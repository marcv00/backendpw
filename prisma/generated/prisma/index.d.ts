
/**
 * Client
**/

import * as runtime from './runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Usuario
 * 
 */
export type Usuario = $Result.DefaultSelection<Prisma.$UsuarioPayload>
/**
 * Model Juego
 * 
 */
export type Juego = $Result.DefaultSelection<Prisma.$JuegoPayload>
/**
 * Model Noticia
 * 
 */
export type Noticia = $Result.DefaultSelection<Prisma.$NoticiaPayload>
/**
 * Model Foto
 * 
 */
export type Foto = $Result.DefaultSelection<Prisma.$FotoPayload>
/**
 * Model Categoria
 * 
 */
export type Categoria = $Result.DefaultSelection<Prisma.$CategoriaPayload>
/**
 * Model Plataforma
 * 
 */
export type Plataforma = $Result.DefaultSelection<Prisma.$PlataformaPayload>
/**
 * Model Venta
 * 
 */
export type Venta = $Result.DefaultSelection<Prisma.$VentaPayload>
/**
 * Model JuegoXVenta
 * 
 */
export type JuegoXVenta = $Result.DefaultSelection<Prisma.$JuegoXVentaPayload>
/**
 * Model JuegoXUsuario
 * 
 */
export type JuegoXUsuario = $Result.DefaultSelection<Prisma.$JuegoXUsuarioPayload>
/**
 * Model Clave
 * 
 */
export type Clave = $Result.DefaultSelection<Prisma.$ClavePayload>
/**
 * Model CategoriaXJuego
 * 
 */
export type CategoriaXJuego = $Result.DefaultSelection<Prisma.$CategoriaXJuegoPayload>
/**
 * Model PlataformaXJuego
 * 
 */
export type PlataformaXJuego = $Result.DefaultSelection<Prisma.$PlataformaXJuegoPayload>
/**
 * Model CatNoticia
 * 
 */
export type CatNoticia = $Result.DefaultSelection<Prisma.$CatNoticiaPayload>
/**
 * Model CatNoticiaXNoticia
 * 
 */
export type CatNoticiaXNoticia = $Result.DefaultSelection<Prisma.$CatNoticiaXNoticiaPayload>
/**
 * Model Resena
 * 
 */
export type Resena = $Result.DefaultSelection<Prisma.$ResenaPayload>
/**
 * Model Carrito
 * 
 */
export type Carrito = $Result.DefaultSelection<Prisma.$CarritoPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const Rol: {
  USER: 'USER',
  ADMIN: 'ADMIN'
};

export type Rol = (typeof Rol)[keyof typeof Rol]

}

export type Rol = $Enums.Rol

export const Rol: typeof $Enums.Rol

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Usuarios
 * const usuarios = await prisma.usuario.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Usuarios
   * const usuarios = await prisma.usuario.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.usuario`: Exposes CRUD operations for the **Usuario** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Usuarios
    * const usuarios = await prisma.usuario.findMany()
    * ```
    */
  get usuario(): Prisma.UsuarioDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.juego`: Exposes CRUD operations for the **Juego** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Juegos
    * const juegos = await prisma.juego.findMany()
    * ```
    */
  get juego(): Prisma.JuegoDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.noticia`: Exposes CRUD operations for the **Noticia** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Noticias
    * const noticias = await prisma.noticia.findMany()
    * ```
    */
  get noticia(): Prisma.NoticiaDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.foto`: Exposes CRUD operations for the **Foto** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Fotos
    * const fotos = await prisma.foto.findMany()
    * ```
    */
  get foto(): Prisma.FotoDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.categoria`: Exposes CRUD operations for the **Categoria** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Categorias
    * const categorias = await prisma.categoria.findMany()
    * ```
    */
  get categoria(): Prisma.CategoriaDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.plataforma`: Exposes CRUD operations for the **Plataforma** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Plataformas
    * const plataformas = await prisma.plataforma.findMany()
    * ```
    */
  get plataforma(): Prisma.PlataformaDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.venta`: Exposes CRUD operations for the **Venta** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Ventas
    * const ventas = await prisma.venta.findMany()
    * ```
    */
  get venta(): Prisma.VentaDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.juegoXVenta`: Exposes CRUD operations for the **JuegoXVenta** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more JuegoXVentas
    * const juegoXVentas = await prisma.juegoXVenta.findMany()
    * ```
    */
  get juegoXVenta(): Prisma.JuegoXVentaDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.juegoXUsuario`: Exposes CRUD operations for the **JuegoXUsuario** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more JuegoXUsuarios
    * const juegoXUsuarios = await prisma.juegoXUsuario.findMany()
    * ```
    */
  get juegoXUsuario(): Prisma.JuegoXUsuarioDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.clave`: Exposes CRUD operations for the **Clave** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Claves
    * const claves = await prisma.clave.findMany()
    * ```
    */
  get clave(): Prisma.ClaveDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.categoriaXJuego`: Exposes CRUD operations for the **CategoriaXJuego** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CategoriaXJuegos
    * const categoriaXJuegos = await prisma.categoriaXJuego.findMany()
    * ```
    */
  get categoriaXJuego(): Prisma.CategoriaXJuegoDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.plataformaXJuego`: Exposes CRUD operations for the **PlataformaXJuego** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PlataformaXJuegos
    * const plataformaXJuegos = await prisma.plataformaXJuego.findMany()
    * ```
    */
  get plataformaXJuego(): Prisma.PlataformaXJuegoDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.catNoticia`: Exposes CRUD operations for the **CatNoticia** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CatNoticias
    * const catNoticias = await prisma.catNoticia.findMany()
    * ```
    */
  get catNoticia(): Prisma.CatNoticiaDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.catNoticiaXNoticia`: Exposes CRUD operations for the **CatNoticiaXNoticia** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CatNoticiaXNoticias
    * const catNoticiaXNoticias = await prisma.catNoticiaXNoticia.findMany()
    * ```
    */
  get catNoticiaXNoticia(): Prisma.CatNoticiaXNoticiaDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.resena`: Exposes CRUD operations for the **Resena** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Resenas
    * const resenas = await prisma.resena.findMany()
    * ```
    */
  get resena(): Prisma.ResenaDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.carrito`: Exposes CRUD operations for the **Carrito** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Carritos
    * const carritos = await prisma.carrito.findMany()
    * ```
    */
  get carrito(): Prisma.CarritoDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.11.1
   * Query Engine version: f40f79ec31188888a2e33acda0ecc8fd10a853a9
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Usuario: 'Usuario',
    Juego: 'Juego',
    Noticia: 'Noticia',
    Foto: 'Foto',
    Categoria: 'Categoria',
    Plataforma: 'Plataforma',
    Venta: 'Venta',
    JuegoXVenta: 'JuegoXVenta',
    JuegoXUsuario: 'JuegoXUsuario',
    Clave: 'Clave',
    CategoriaXJuego: 'CategoriaXJuego',
    PlataformaXJuego: 'PlataformaXJuego',
    CatNoticia: 'CatNoticia',
    CatNoticiaXNoticia: 'CatNoticiaXNoticia',
    Resena: 'Resena',
    Carrito: 'Carrito'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "usuario" | "juego" | "noticia" | "foto" | "categoria" | "plataforma" | "venta" | "juegoXVenta" | "juegoXUsuario" | "clave" | "categoriaXJuego" | "plataformaXJuego" | "catNoticia" | "catNoticiaXNoticia" | "resena" | "carrito"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Usuario: {
        payload: Prisma.$UsuarioPayload<ExtArgs>
        fields: Prisma.UsuarioFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UsuarioFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UsuarioFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>
          }
          findFirst: {
            args: Prisma.UsuarioFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UsuarioFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>
          }
          findMany: {
            args: Prisma.UsuarioFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>[]
          }
          create: {
            args: Prisma.UsuarioCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>
          }
          createMany: {
            args: Prisma.UsuarioCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UsuarioCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>[]
          }
          delete: {
            args: Prisma.UsuarioDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>
          }
          update: {
            args: Prisma.UsuarioUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>
          }
          deleteMany: {
            args: Prisma.UsuarioDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UsuarioUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UsuarioUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>[]
          }
          upsert: {
            args: Prisma.UsuarioUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>
          }
          aggregate: {
            args: Prisma.UsuarioAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUsuario>
          }
          groupBy: {
            args: Prisma.UsuarioGroupByArgs<ExtArgs>
            result: $Utils.Optional<UsuarioGroupByOutputType>[]
          }
          count: {
            args: Prisma.UsuarioCountArgs<ExtArgs>
            result: $Utils.Optional<UsuarioCountAggregateOutputType> | number
          }
        }
      }
      Juego: {
        payload: Prisma.$JuegoPayload<ExtArgs>
        fields: Prisma.JuegoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.JuegoFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JuegoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.JuegoFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JuegoPayload>
          }
          findFirst: {
            args: Prisma.JuegoFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JuegoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.JuegoFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JuegoPayload>
          }
          findMany: {
            args: Prisma.JuegoFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JuegoPayload>[]
          }
          create: {
            args: Prisma.JuegoCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JuegoPayload>
          }
          createMany: {
            args: Prisma.JuegoCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.JuegoCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JuegoPayload>[]
          }
          delete: {
            args: Prisma.JuegoDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JuegoPayload>
          }
          update: {
            args: Prisma.JuegoUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JuegoPayload>
          }
          deleteMany: {
            args: Prisma.JuegoDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.JuegoUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.JuegoUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JuegoPayload>[]
          }
          upsert: {
            args: Prisma.JuegoUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JuegoPayload>
          }
          aggregate: {
            args: Prisma.JuegoAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateJuego>
          }
          groupBy: {
            args: Prisma.JuegoGroupByArgs<ExtArgs>
            result: $Utils.Optional<JuegoGroupByOutputType>[]
          }
          count: {
            args: Prisma.JuegoCountArgs<ExtArgs>
            result: $Utils.Optional<JuegoCountAggregateOutputType> | number
          }
        }
      }
      Noticia: {
        payload: Prisma.$NoticiaPayload<ExtArgs>
        fields: Prisma.NoticiaFieldRefs
        operations: {
          findUnique: {
            args: Prisma.NoticiaFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NoticiaPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.NoticiaFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NoticiaPayload>
          }
          findFirst: {
            args: Prisma.NoticiaFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NoticiaPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.NoticiaFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NoticiaPayload>
          }
          findMany: {
            args: Prisma.NoticiaFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NoticiaPayload>[]
          }
          create: {
            args: Prisma.NoticiaCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NoticiaPayload>
          }
          createMany: {
            args: Prisma.NoticiaCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.NoticiaCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NoticiaPayload>[]
          }
          delete: {
            args: Prisma.NoticiaDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NoticiaPayload>
          }
          update: {
            args: Prisma.NoticiaUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NoticiaPayload>
          }
          deleteMany: {
            args: Prisma.NoticiaDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.NoticiaUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.NoticiaUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NoticiaPayload>[]
          }
          upsert: {
            args: Prisma.NoticiaUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NoticiaPayload>
          }
          aggregate: {
            args: Prisma.NoticiaAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateNoticia>
          }
          groupBy: {
            args: Prisma.NoticiaGroupByArgs<ExtArgs>
            result: $Utils.Optional<NoticiaGroupByOutputType>[]
          }
          count: {
            args: Prisma.NoticiaCountArgs<ExtArgs>
            result: $Utils.Optional<NoticiaCountAggregateOutputType> | number
          }
        }
      }
      Foto: {
        payload: Prisma.$FotoPayload<ExtArgs>
        fields: Prisma.FotoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FotoFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FotoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FotoFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FotoPayload>
          }
          findFirst: {
            args: Prisma.FotoFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FotoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FotoFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FotoPayload>
          }
          findMany: {
            args: Prisma.FotoFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FotoPayload>[]
          }
          create: {
            args: Prisma.FotoCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FotoPayload>
          }
          createMany: {
            args: Prisma.FotoCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.FotoCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FotoPayload>[]
          }
          delete: {
            args: Prisma.FotoDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FotoPayload>
          }
          update: {
            args: Prisma.FotoUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FotoPayload>
          }
          deleteMany: {
            args: Prisma.FotoDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.FotoUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.FotoUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FotoPayload>[]
          }
          upsert: {
            args: Prisma.FotoUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FotoPayload>
          }
          aggregate: {
            args: Prisma.FotoAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFoto>
          }
          groupBy: {
            args: Prisma.FotoGroupByArgs<ExtArgs>
            result: $Utils.Optional<FotoGroupByOutputType>[]
          }
          count: {
            args: Prisma.FotoCountArgs<ExtArgs>
            result: $Utils.Optional<FotoCountAggregateOutputType> | number
          }
        }
      }
      Categoria: {
        payload: Prisma.$CategoriaPayload<ExtArgs>
        fields: Prisma.CategoriaFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CategoriaFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoriaPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CategoriaFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoriaPayload>
          }
          findFirst: {
            args: Prisma.CategoriaFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoriaPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CategoriaFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoriaPayload>
          }
          findMany: {
            args: Prisma.CategoriaFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoriaPayload>[]
          }
          create: {
            args: Prisma.CategoriaCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoriaPayload>
          }
          createMany: {
            args: Prisma.CategoriaCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CategoriaCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoriaPayload>[]
          }
          delete: {
            args: Prisma.CategoriaDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoriaPayload>
          }
          update: {
            args: Prisma.CategoriaUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoriaPayload>
          }
          deleteMany: {
            args: Prisma.CategoriaDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CategoriaUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CategoriaUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoriaPayload>[]
          }
          upsert: {
            args: Prisma.CategoriaUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoriaPayload>
          }
          aggregate: {
            args: Prisma.CategoriaAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCategoria>
          }
          groupBy: {
            args: Prisma.CategoriaGroupByArgs<ExtArgs>
            result: $Utils.Optional<CategoriaGroupByOutputType>[]
          }
          count: {
            args: Prisma.CategoriaCountArgs<ExtArgs>
            result: $Utils.Optional<CategoriaCountAggregateOutputType> | number
          }
        }
      }
      Plataforma: {
        payload: Prisma.$PlataformaPayload<ExtArgs>
        fields: Prisma.PlataformaFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PlataformaFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlataformaPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PlataformaFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlataformaPayload>
          }
          findFirst: {
            args: Prisma.PlataformaFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlataformaPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PlataformaFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlataformaPayload>
          }
          findMany: {
            args: Prisma.PlataformaFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlataformaPayload>[]
          }
          create: {
            args: Prisma.PlataformaCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlataformaPayload>
          }
          createMany: {
            args: Prisma.PlataformaCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PlataformaCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlataformaPayload>[]
          }
          delete: {
            args: Prisma.PlataformaDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlataformaPayload>
          }
          update: {
            args: Prisma.PlataformaUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlataformaPayload>
          }
          deleteMany: {
            args: Prisma.PlataformaDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PlataformaUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PlataformaUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlataformaPayload>[]
          }
          upsert: {
            args: Prisma.PlataformaUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlataformaPayload>
          }
          aggregate: {
            args: Prisma.PlataformaAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePlataforma>
          }
          groupBy: {
            args: Prisma.PlataformaGroupByArgs<ExtArgs>
            result: $Utils.Optional<PlataformaGroupByOutputType>[]
          }
          count: {
            args: Prisma.PlataformaCountArgs<ExtArgs>
            result: $Utils.Optional<PlataformaCountAggregateOutputType> | number
          }
        }
      }
      Venta: {
        payload: Prisma.$VentaPayload<ExtArgs>
        fields: Prisma.VentaFieldRefs
        operations: {
          findUnique: {
            args: Prisma.VentaFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VentaPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.VentaFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VentaPayload>
          }
          findFirst: {
            args: Prisma.VentaFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VentaPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.VentaFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VentaPayload>
          }
          findMany: {
            args: Prisma.VentaFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VentaPayload>[]
          }
          create: {
            args: Prisma.VentaCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VentaPayload>
          }
          createMany: {
            args: Prisma.VentaCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.VentaCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VentaPayload>[]
          }
          delete: {
            args: Prisma.VentaDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VentaPayload>
          }
          update: {
            args: Prisma.VentaUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VentaPayload>
          }
          deleteMany: {
            args: Prisma.VentaDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.VentaUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.VentaUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VentaPayload>[]
          }
          upsert: {
            args: Prisma.VentaUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VentaPayload>
          }
          aggregate: {
            args: Prisma.VentaAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateVenta>
          }
          groupBy: {
            args: Prisma.VentaGroupByArgs<ExtArgs>
            result: $Utils.Optional<VentaGroupByOutputType>[]
          }
          count: {
            args: Prisma.VentaCountArgs<ExtArgs>
            result: $Utils.Optional<VentaCountAggregateOutputType> | number
          }
        }
      }
      JuegoXVenta: {
        payload: Prisma.$JuegoXVentaPayload<ExtArgs>
        fields: Prisma.JuegoXVentaFieldRefs
        operations: {
          findUnique: {
            args: Prisma.JuegoXVentaFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JuegoXVentaPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.JuegoXVentaFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JuegoXVentaPayload>
          }
          findFirst: {
            args: Prisma.JuegoXVentaFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JuegoXVentaPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.JuegoXVentaFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JuegoXVentaPayload>
          }
          findMany: {
            args: Prisma.JuegoXVentaFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JuegoXVentaPayload>[]
          }
          create: {
            args: Prisma.JuegoXVentaCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JuegoXVentaPayload>
          }
          createMany: {
            args: Prisma.JuegoXVentaCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.JuegoXVentaCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JuegoXVentaPayload>[]
          }
          delete: {
            args: Prisma.JuegoXVentaDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JuegoXVentaPayload>
          }
          update: {
            args: Prisma.JuegoXVentaUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JuegoXVentaPayload>
          }
          deleteMany: {
            args: Prisma.JuegoXVentaDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.JuegoXVentaUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.JuegoXVentaUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JuegoXVentaPayload>[]
          }
          upsert: {
            args: Prisma.JuegoXVentaUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JuegoXVentaPayload>
          }
          aggregate: {
            args: Prisma.JuegoXVentaAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateJuegoXVenta>
          }
          groupBy: {
            args: Prisma.JuegoXVentaGroupByArgs<ExtArgs>
            result: $Utils.Optional<JuegoXVentaGroupByOutputType>[]
          }
          count: {
            args: Prisma.JuegoXVentaCountArgs<ExtArgs>
            result: $Utils.Optional<JuegoXVentaCountAggregateOutputType> | number
          }
        }
      }
      JuegoXUsuario: {
        payload: Prisma.$JuegoXUsuarioPayload<ExtArgs>
        fields: Prisma.JuegoXUsuarioFieldRefs
        operations: {
          findUnique: {
            args: Prisma.JuegoXUsuarioFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JuegoXUsuarioPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.JuegoXUsuarioFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JuegoXUsuarioPayload>
          }
          findFirst: {
            args: Prisma.JuegoXUsuarioFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JuegoXUsuarioPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.JuegoXUsuarioFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JuegoXUsuarioPayload>
          }
          findMany: {
            args: Prisma.JuegoXUsuarioFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JuegoXUsuarioPayload>[]
          }
          create: {
            args: Prisma.JuegoXUsuarioCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JuegoXUsuarioPayload>
          }
          createMany: {
            args: Prisma.JuegoXUsuarioCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.JuegoXUsuarioCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JuegoXUsuarioPayload>[]
          }
          delete: {
            args: Prisma.JuegoXUsuarioDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JuegoXUsuarioPayload>
          }
          update: {
            args: Prisma.JuegoXUsuarioUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JuegoXUsuarioPayload>
          }
          deleteMany: {
            args: Prisma.JuegoXUsuarioDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.JuegoXUsuarioUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.JuegoXUsuarioUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JuegoXUsuarioPayload>[]
          }
          upsert: {
            args: Prisma.JuegoXUsuarioUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JuegoXUsuarioPayload>
          }
          aggregate: {
            args: Prisma.JuegoXUsuarioAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateJuegoXUsuario>
          }
          groupBy: {
            args: Prisma.JuegoXUsuarioGroupByArgs<ExtArgs>
            result: $Utils.Optional<JuegoXUsuarioGroupByOutputType>[]
          }
          count: {
            args: Prisma.JuegoXUsuarioCountArgs<ExtArgs>
            result: $Utils.Optional<JuegoXUsuarioCountAggregateOutputType> | number
          }
        }
      }
      Clave: {
        payload: Prisma.$ClavePayload<ExtArgs>
        fields: Prisma.ClaveFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ClaveFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClavePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ClaveFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClavePayload>
          }
          findFirst: {
            args: Prisma.ClaveFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClavePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ClaveFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClavePayload>
          }
          findMany: {
            args: Prisma.ClaveFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClavePayload>[]
          }
          create: {
            args: Prisma.ClaveCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClavePayload>
          }
          createMany: {
            args: Prisma.ClaveCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ClaveCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClavePayload>[]
          }
          delete: {
            args: Prisma.ClaveDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClavePayload>
          }
          update: {
            args: Prisma.ClaveUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClavePayload>
          }
          deleteMany: {
            args: Prisma.ClaveDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ClaveUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ClaveUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClavePayload>[]
          }
          upsert: {
            args: Prisma.ClaveUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClavePayload>
          }
          aggregate: {
            args: Prisma.ClaveAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateClave>
          }
          groupBy: {
            args: Prisma.ClaveGroupByArgs<ExtArgs>
            result: $Utils.Optional<ClaveGroupByOutputType>[]
          }
          count: {
            args: Prisma.ClaveCountArgs<ExtArgs>
            result: $Utils.Optional<ClaveCountAggregateOutputType> | number
          }
        }
      }
      CategoriaXJuego: {
        payload: Prisma.$CategoriaXJuegoPayload<ExtArgs>
        fields: Prisma.CategoriaXJuegoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CategoriaXJuegoFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoriaXJuegoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CategoriaXJuegoFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoriaXJuegoPayload>
          }
          findFirst: {
            args: Prisma.CategoriaXJuegoFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoriaXJuegoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CategoriaXJuegoFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoriaXJuegoPayload>
          }
          findMany: {
            args: Prisma.CategoriaXJuegoFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoriaXJuegoPayload>[]
          }
          create: {
            args: Prisma.CategoriaXJuegoCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoriaXJuegoPayload>
          }
          createMany: {
            args: Prisma.CategoriaXJuegoCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CategoriaXJuegoCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoriaXJuegoPayload>[]
          }
          delete: {
            args: Prisma.CategoriaXJuegoDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoriaXJuegoPayload>
          }
          update: {
            args: Prisma.CategoriaXJuegoUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoriaXJuegoPayload>
          }
          deleteMany: {
            args: Prisma.CategoriaXJuegoDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CategoriaXJuegoUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CategoriaXJuegoUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoriaXJuegoPayload>[]
          }
          upsert: {
            args: Prisma.CategoriaXJuegoUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoriaXJuegoPayload>
          }
          aggregate: {
            args: Prisma.CategoriaXJuegoAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCategoriaXJuego>
          }
          groupBy: {
            args: Prisma.CategoriaXJuegoGroupByArgs<ExtArgs>
            result: $Utils.Optional<CategoriaXJuegoGroupByOutputType>[]
          }
          count: {
            args: Prisma.CategoriaXJuegoCountArgs<ExtArgs>
            result: $Utils.Optional<CategoriaXJuegoCountAggregateOutputType> | number
          }
        }
      }
      PlataformaXJuego: {
        payload: Prisma.$PlataformaXJuegoPayload<ExtArgs>
        fields: Prisma.PlataformaXJuegoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PlataformaXJuegoFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlataformaXJuegoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PlataformaXJuegoFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlataformaXJuegoPayload>
          }
          findFirst: {
            args: Prisma.PlataformaXJuegoFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlataformaXJuegoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PlataformaXJuegoFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlataformaXJuegoPayload>
          }
          findMany: {
            args: Prisma.PlataformaXJuegoFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlataformaXJuegoPayload>[]
          }
          create: {
            args: Prisma.PlataformaXJuegoCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlataformaXJuegoPayload>
          }
          createMany: {
            args: Prisma.PlataformaXJuegoCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PlataformaXJuegoCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlataformaXJuegoPayload>[]
          }
          delete: {
            args: Prisma.PlataformaXJuegoDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlataformaXJuegoPayload>
          }
          update: {
            args: Prisma.PlataformaXJuegoUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlataformaXJuegoPayload>
          }
          deleteMany: {
            args: Prisma.PlataformaXJuegoDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PlataformaXJuegoUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PlataformaXJuegoUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlataformaXJuegoPayload>[]
          }
          upsert: {
            args: Prisma.PlataformaXJuegoUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlataformaXJuegoPayload>
          }
          aggregate: {
            args: Prisma.PlataformaXJuegoAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePlataformaXJuego>
          }
          groupBy: {
            args: Prisma.PlataformaXJuegoGroupByArgs<ExtArgs>
            result: $Utils.Optional<PlataformaXJuegoGroupByOutputType>[]
          }
          count: {
            args: Prisma.PlataformaXJuegoCountArgs<ExtArgs>
            result: $Utils.Optional<PlataformaXJuegoCountAggregateOutputType> | number
          }
        }
      }
      CatNoticia: {
        payload: Prisma.$CatNoticiaPayload<ExtArgs>
        fields: Prisma.CatNoticiaFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CatNoticiaFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CatNoticiaPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CatNoticiaFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CatNoticiaPayload>
          }
          findFirst: {
            args: Prisma.CatNoticiaFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CatNoticiaPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CatNoticiaFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CatNoticiaPayload>
          }
          findMany: {
            args: Prisma.CatNoticiaFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CatNoticiaPayload>[]
          }
          create: {
            args: Prisma.CatNoticiaCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CatNoticiaPayload>
          }
          createMany: {
            args: Prisma.CatNoticiaCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CatNoticiaCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CatNoticiaPayload>[]
          }
          delete: {
            args: Prisma.CatNoticiaDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CatNoticiaPayload>
          }
          update: {
            args: Prisma.CatNoticiaUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CatNoticiaPayload>
          }
          deleteMany: {
            args: Prisma.CatNoticiaDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CatNoticiaUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CatNoticiaUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CatNoticiaPayload>[]
          }
          upsert: {
            args: Prisma.CatNoticiaUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CatNoticiaPayload>
          }
          aggregate: {
            args: Prisma.CatNoticiaAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCatNoticia>
          }
          groupBy: {
            args: Prisma.CatNoticiaGroupByArgs<ExtArgs>
            result: $Utils.Optional<CatNoticiaGroupByOutputType>[]
          }
          count: {
            args: Prisma.CatNoticiaCountArgs<ExtArgs>
            result: $Utils.Optional<CatNoticiaCountAggregateOutputType> | number
          }
        }
      }
      CatNoticiaXNoticia: {
        payload: Prisma.$CatNoticiaXNoticiaPayload<ExtArgs>
        fields: Prisma.CatNoticiaXNoticiaFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CatNoticiaXNoticiaFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CatNoticiaXNoticiaPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CatNoticiaXNoticiaFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CatNoticiaXNoticiaPayload>
          }
          findFirst: {
            args: Prisma.CatNoticiaXNoticiaFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CatNoticiaXNoticiaPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CatNoticiaXNoticiaFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CatNoticiaXNoticiaPayload>
          }
          findMany: {
            args: Prisma.CatNoticiaXNoticiaFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CatNoticiaXNoticiaPayload>[]
          }
          create: {
            args: Prisma.CatNoticiaXNoticiaCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CatNoticiaXNoticiaPayload>
          }
          createMany: {
            args: Prisma.CatNoticiaXNoticiaCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CatNoticiaXNoticiaCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CatNoticiaXNoticiaPayload>[]
          }
          delete: {
            args: Prisma.CatNoticiaXNoticiaDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CatNoticiaXNoticiaPayload>
          }
          update: {
            args: Prisma.CatNoticiaXNoticiaUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CatNoticiaXNoticiaPayload>
          }
          deleteMany: {
            args: Prisma.CatNoticiaXNoticiaDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CatNoticiaXNoticiaUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CatNoticiaXNoticiaUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CatNoticiaXNoticiaPayload>[]
          }
          upsert: {
            args: Prisma.CatNoticiaXNoticiaUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CatNoticiaXNoticiaPayload>
          }
          aggregate: {
            args: Prisma.CatNoticiaXNoticiaAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCatNoticiaXNoticia>
          }
          groupBy: {
            args: Prisma.CatNoticiaXNoticiaGroupByArgs<ExtArgs>
            result: $Utils.Optional<CatNoticiaXNoticiaGroupByOutputType>[]
          }
          count: {
            args: Prisma.CatNoticiaXNoticiaCountArgs<ExtArgs>
            result: $Utils.Optional<CatNoticiaXNoticiaCountAggregateOutputType> | number
          }
        }
      }
      Resena: {
        payload: Prisma.$ResenaPayload<ExtArgs>
        fields: Prisma.ResenaFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ResenaFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResenaPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ResenaFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResenaPayload>
          }
          findFirst: {
            args: Prisma.ResenaFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResenaPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ResenaFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResenaPayload>
          }
          findMany: {
            args: Prisma.ResenaFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResenaPayload>[]
          }
          create: {
            args: Prisma.ResenaCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResenaPayload>
          }
          createMany: {
            args: Prisma.ResenaCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ResenaCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResenaPayload>[]
          }
          delete: {
            args: Prisma.ResenaDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResenaPayload>
          }
          update: {
            args: Prisma.ResenaUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResenaPayload>
          }
          deleteMany: {
            args: Prisma.ResenaDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ResenaUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ResenaUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResenaPayload>[]
          }
          upsert: {
            args: Prisma.ResenaUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResenaPayload>
          }
          aggregate: {
            args: Prisma.ResenaAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateResena>
          }
          groupBy: {
            args: Prisma.ResenaGroupByArgs<ExtArgs>
            result: $Utils.Optional<ResenaGroupByOutputType>[]
          }
          count: {
            args: Prisma.ResenaCountArgs<ExtArgs>
            result: $Utils.Optional<ResenaCountAggregateOutputType> | number
          }
        }
      }
      Carrito: {
        payload: Prisma.$CarritoPayload<ExtArgs>
        fields: Prisma.CarritoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CarritoFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CarritoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CarritoFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CarritoPayload>
          }
          findFirst: {
            args: Prisma.CarritoFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CarritoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CarritoFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CarritoPayload>
          }
          findMany: {
            args: Prisma.CarritoFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CarritoPayload>[]
          }
          create: {
            args: Prisma.CarritoCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CarritoPayload>
          }
          createMany: {
            args: Prisma.CarritoCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CarritoCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CarritoPayload>[]
          }
          delete: {
            args: Prisma.CarritoDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CarritoPayload>
          }
          update: {
            args: Prisma.CarritoUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CarritoPayload>
          }
          deleteMany: {
            args: Prisma.CarritoDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CarritoUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CarritoUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CarritoPayload>[]
          }
          upsert: {
            args: Prisma.CarritoUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CarritoPayload>
          }
          aggregate: {
            args: Prisma.CarritoAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCarrito>
          }
          groupBy: {
            args: Prisma.CarritoGroupByArgs<ExtArgs>
            result: $Utils.Optional<CarritoGroupByOutputType>[]
          }
          count: {
            args: Prisma.CarritoCountArgs<ExtArgs>
            result: $Utils.Optional<CarritoCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    usuario?: UsuarioOmit
    juego?: JuegoOmit
    noticia?: NoticiaOmit
    foto?: FotoOmit
    categoria?: CategoriaOmit
    plataforma?: PlataformaOmit
    venta?: VentaOmit
    juegoXVenta?: JuegoXVentaOmit
    juegoXUsuario?: JuegoXUsuarioOmit
    clave?: ClaveOmit
    categoriaXJuego?: CategoriaXJuegoOmit
    plataformaXJuego?: PlataformaXJuegoOmit
    catNoticia?: CatNoticiaOmit
    catNoticiaXNoticia?: CatNoticiaXNoticiaOmit
    resena?: ResenaOmit
    carrito?: CarritoOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UsuarioCountOutputType
   */

  export type UsuarioCountOutputType = {
    ventas: number
    juegos: number
    resenas: number
    carrito: number
  }

  export type UsuarioCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    ventas?: boolean | UsuarioCountOutputTypeCountVentasArgs
    juegos?: boolean | UsuarioCountOutputTypeCountJuegosArgs
    resenas?: boolean | UsuarioCountOutputTypeCountResenasArgs
    carrito?: boolean | UsuarioCountOutputTypeCountCarritoArgs
  }

  // Custom InputTypes
  /**
   * UsuarioCountOutputType without action
   */
  export type UsuarioCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsuarioCountOutputType
     */
    select?: UsuarioCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UsuarioCountOutputType without action
   */
  export type UsuarioCountOutputTypeCountVentasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VentaWhereInput
  }

  /**
   * UsuarioCountOutputType without action
   */
  export type UsuarioCountOutputTypeCountJuegosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: JuegoXUsuarioWhereInput
  }

  /**
   * UsuarioCountOutputType without action
   */
  export type UsuarioCountOutputTypeCountResenasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ResenaWhereInput
  }

  /**
   * UsuarioCountOutputType without action
   */
  export type UsuarioCountOutputTypeCountCarritoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CarritoWhereInput
  }


  /**
   * Count Type JuegoCountOutputType
   */

  export type JuegoCountOutputType = {
    fotos: number
    categorias: number
    plataformas: number
    claves: number
    ventas: number
    usuarios: number
    resenas: number
    enCarritos: number
  }

  export type JuegoCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    fotos?: boolean | JuegoCountOutputTypeCountFotosArgs
    categorias?: boolean | JuegoCountOutputTypeCountCategoriasArgs
    plataformas?: boolean | JuegoCountOutputTypeCountPlataformasArgs
    claves?: boolean | JuegoCountOutputTypeCountClavesArgs
    ventas?: boolean | JuegoCountOutputTypeCountVentasArgs
    usuarios?: boolean | JuegoCountOutputTypeCountUsuariosArgs
    resenas?: boolean | JuegoCountOutputTypeCountResenasArgs
    enCarritos?: boolean | JuegoCountOutputTypeCountEnCarritosArgs
  }

  // Custom InputTypes
  /**
   * JuegoCountOutputType without action
   */
  export type JuegoCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JuegoCountOutputType
     */
    select?: JuegoCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * JuegoCountOutputType without action
   */
  export type JuegoCountOutputTypeCountFotosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FotoWhereInput
  }

  /**
   * JuegoCountOutputType without action
   */
  export type JuegoCountOutputTypeCountCategoriasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CategoriaXJuegoWhereInput
  }

  /**
   * JuegoCountOutputType without action
   */
  export type JuegoCountOutputTypeCountPlataformasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PlataformaXJuegoWhereInput
  }

  /**
   * JuegoCountOutputType without action
   */
  export type JuegoCountOutputTypeCountClavesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ClaveWhereInput
  }

  /**
   * JuegoCountOutputType without action
   */
  export type JuegoCountOutputTypeCountVentasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: JuegoXVentaWhereInput
  }

  /**
   * JuegoCountOutputType without action
   */
  export type JuegoCountOutputTypeCountUsuariosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: JuegoXUsuarioWhereInput
  }

  /**
   * JuegoCountOutputType without action
   */
  export type JuegoCountOutputTypeCountResenasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ResenaWhereInput
  }

  /**
   * JuegoCountOutputType without action
   */
  export type JuegoCountOutputTypeCountEnCarritosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CarritoWhereInput
  }


  /**
   * Count Type NoticiaCountOutputType
   */

  export type NoticiaCountOutputType = {
    categorias: number
  }

  export type NoticiaCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    categorias?: boolean | NoticiaCountOutputTypeCountCategoriasArgs
  }

  // Custom InputTypes
  /**
   * NoticiaCountOutputType without action
   */
  export type NoticiaCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NoticiaCountOutputType
     */
    select?: NoticiaCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * NoticiaCountOutputType without action
   */
  export type NoticiaCountOutputTypeCountCategoriasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CatNoticiaXNoticiaWhereInput
  }


  /**
   * Count Type CategoriaCountOutputType
   */

  export type CategoriaCountOutputType = {
    juegos: number
  }

  export type CategoriaCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    juegos?: boolean | CategoriaCountOutputTypeCountJuegosArgs
  }

  // Custom InputTypes
  /**
   * CategoriaCountOutputType without action
   */
  export type CategoriaCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CategoriaCountOutputType
     */
    select?: CategoriaCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CategoriaCountOutputType without action
   */
  export type CategoriaCountOutputTypeCountJuegosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CategoriaXJuegoWhereInput
  }


  /**
   * Count Type PlataformaCountOutputType
   */

  export type PlataformaCountOutputType = {
    juegos: number
  }

  export type PlataformaCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    juegos?: boolean | PlataformaCountOutputTypeCountJuegosArgs
  }

  // Custom InputTypes
  /**
   * PlataformaCountOutputType without action
   */
  export type PlataformaCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlataformaCountOutputType
     */
    select?: PlataformaCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * PlataformaCountOutputType without action
   */
  export type PlataformaCountOutputTypeCountJuegosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PlataformaXJuegoWhereInput
  }


  /**
   * Count Type VentaCountOutputType
   */

  export type VentaCountOutputType = {
    juegos: number
    claves: number
  }

  export type VentaCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    juegos?: boolean | VentaCountOutputTypeCountJuegosArgs
    claves?: boolean | VentaCountOutputTypeCountClavesArgs
  }

  // Custom InputTypes
  /**
   * VentaCountOutputType without action
   */
  export type VentaCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VentaCountOutputType
     */
    select?: VentaCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * VentaCountOutputType without action
   */
  export type VentaCountOutputTypeCountJuegosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: JuegoXVentaWhereInput
  }

  /**
   * VentaCountOutputType without action
   */
  export type VentaCountOutputTypeCountClavesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ClaveWhereInput
  }


  /**
   * Count Type CatNoticiaCountOutputType
   */

  export type CatNoticiaCountOutputType = {
    noticias: number
  }

  export type CatNoticiaCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    noticias?: boolean | CatNoticiaCountOutputTypeCountNoticiasArgs
  }

  // Custom InputTypes
  /**
   * CatNoticiaCountOutputType without action
   */
  export type CatNoticiaCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CatNoticiaCountOutputType
     */
    select?: CatNoticiaCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CatNoticiaCountOutputType without action
   */
  export type CatNoticiaCountOutputTypeCountNoticiasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CatNoticiaXNoticiaWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Usuario
   */

  export type AggregateUsuario = {
    _count: UsuarioCountAggregateOutputType | null
    _avg: UsuarioAvgAggregateOutputType | null
    _sum: UsuarioSumAggregateOutputType | null
    _min: UsuarioMinAggregateOutputType | null
    _max: UsuarioMaxAggregateOutputType | null
  }

  export type UsuarioAvgAggregateOutputType = {
    id: number | null
  }

  export type UsuarioSumAggregateOutputType = {
    id: number | null
  }

  export type UsuarioMinAggregateOutputType = {
    id: number | null
    correo: string | null
    contrasena: string | null
    rol: $Enums.Rol | null
    nombre: string | null
    apellido: string | null
  }

  export type UsuarioMaxAggregateOutputType = {
    id: number | null
    correo: string | null
    contrasena: string | null
    rol: $Enums.Rol | null
    nombre: string | null
    apellido: string | null
  }

  export type UsuarioCountAggregateOutputType = {
    id: number
    correo: number
    contrasena: number
    rol: number
    nombre: number
    apellido: number
    _all: number
  }


  export type UsuarioAvgAggregateInputType = {
    id?: true
  }

  export type UsuarioSumAggregateInputType = {
    id?: true
  }

  export type UsuarioMinAggregateInputType = {
    id?: true
    correo?: true
    contrasena?: true
    rol?: true
    nombre?: true
    apellido?: true
  }

  export type UsuarioMaxAggregateInputType = {
    id?: true
    correo?: true
    contrasena?: true
    rol?: true
    nombre?: true
    apellido?: true
  }

  export type UsuarioCountAggregateInputType = {
    id?: true
    correo?: true
    contrasena?: true
    rol?: true
    nombre?: true
    apellido?: true
    _all?: true
  }

  export type UsuarioAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Usuario to aggregate.
     */
    where?: UsuarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Usuarios to fetch.
     */
    orderBy?: UsuarioOrderByWithRelationInput | UsuarioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UsuarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Usuarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Usuarios
    **/
    _count?: true | UsuarioCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UsuarioAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UsuarioSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UsuarioMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UsuarioMaxAggregateInputType
  }

  export type GetUsuarioAggregateType<T extends UsuarioAggregateArgs> = {
        [P in keyof T & keyof AggregateUsuario]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUsuario[P]>
      : GetScalarType<T[P], AggregateUsuario[P]>
  }




  export type UsuarioGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UsuarioWhereInput
    orderBy?: UsuarioOrderByWithAggregationInput | UsuarioOrderByWithAggregationInput[]
    by: UsuarioScalarFieldEnum[] | UsuarioScalarFieldEnum
    having?: UsuarioScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UsuarioCountAggregateInputType | true
    _avg?: UsuarioAvgAggregateInputType
    _sum?: UsuarioSumAggregateInputType
    _min?: UsuarioMinAggregateInputType
    _max?: UsuarioMaxAggregateInputType
  }

  export type UsuarioGroupByOutputType = {
    id: number
    correo: string
    contrasena: string
    rol: $Enums.Rol
    nombre: string
    apellido: string
    _count: UsuarioCountAggregateOutputType | null
    _avg: UsuarioAvgAggregateOutputType | null
    _sum: UsuarioSumAggregateOutputType | null
    _min: UsuarioMinAggregateOutputType | null
    _max: UsuarioMaxAggregateOutputType | null
  }

  type GetUsuarioGroupByPayload<T extends UsuarioGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UsuarioGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UsuarioGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UsuarioGroupByOutputType[P]>
            : GetScalarType<T[P], UsuarioGroupByOutputType[P]>
        }
      >
    >


  export type UsuarioSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    correo?: boolean
    contrasena?: boolean
    rol?: boolean
    nombre?: boolean
    apellido?: boolean
    ventas?: boolean | Usuario$ventasArgs<ExtArgs>
    juegos?: boolean | Usuario$juegosArgs<ExtArgs>
    resenas?: boolean | Usuario$resenasArgs<ExtArgs>
    carrito?: boolean | Usuario$carritoArgs<ExtArgs>
    _count?: boolean | UsuarioCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["usuario"]>

  export type UsuarioSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    correo?: boolean
    contrasena?: boolean
    rol?: boolean
    nombre?: boolean
    apellido?: boolean
  }, ExtArgs["result"]["usuario"]>

  export type UsuarioSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    correo?: boolean
    contrasena?: boolean
    rol?: boolean
    nombre?: boolean
    apellido?: boolean
  }, ExtArgs["result"]["usuario"]>

  export type UsuarioSelectScalar = {
    id?: boolean
    correo?: boolean
    contrasena?: boolean
    rol?: boolean
    nombre?: boolean
    apellido?: boolean
  }

  export type UsuarioOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "correo" | "contrasena" | "rol" | "nombre" | "apellido", ExtArgs["result"]["usuario"]>
  export type UsuarioInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    ventas?: boolean | Usuario$ventasArgs<ExtArgs>
    juegos?: boolean | Usuario$juegosArgs<ExtArgs>
    resenas?: boolean | Usuario$resenasArgs<ExtArgs>
    carrito?: boolean | Usuario$carritoArgs<ExtArgs>
    _count?: boolean | UsuarioCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UsuarioIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type UsuarioIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UsuarioPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Usuario"
    objects: {
      ventas: Prisma.$VentaPayload<ExtArgs>[]
      juegos: Prisma.$JuegoXUsuarioPayload<ExtArgs>[]
      resenas: Prisma.$ResenaPayload<ExtArgs>[]
      carrito: Prisma.$CarritoPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      correo: string
      contrasena: string
      rol: $Enums.Rol
      nombre: string
      apellido: string
    }, ExtArgs["result"]["usuario"]>
    composites: {}
  }

  type UsuarioGetPayload<S extends boolean | null | undefined | UsuarioDefaultArgs> = $Result.GetResult<Prisma.$UsuarioPayload, S>

  type UsuarioCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UsuarioFindManyArgs, 'select' | 'include' | 'distinct' | 'omit' | 'relationLoadStrategy'> & {
      select?: UsuarioCountAggregateInputType | true
    }

  export interface UsuarioDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Usuario'], meta: { name: 'Usuario' } }
    /**
     * Find zero or one Usuario that matches the filter.
     * @param {UsuarioFindUniqueArgs} args - Arguments to find a Usuario
     * @example
     * // Get one Usuario
     * const usuario = await prisma.usuario.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UsuarioFindUniqueArgs>(args: SelectSubset<T, UsuarioFindUniqueArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Usuario that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UsuarioFindUniqueOrThrowArgs} args - Arguments to find a Usuario
     * @example
     * // Get one Usuario
     * const usuario = await prisma.usuario.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UsuarioFindUniqueOrThrowArgs>(args: SelectSubset<T, UsuarioFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Usuario that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioFindFirstArgs} args - Arguments to find a Usuario
     * @example
     * // Get one Usuario
     * const usuario = await prisma.usuario.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UsuarioFindFirstArgs>(args?: SelectSubset<T, UsuarioFindFirstArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Usuario that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioFindFirstOrThrowArgs} args - Arguments to find a Usuario
     * @example
     * // Get one Usuario
     * const usuario = await prisma.usuario.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UsuarioFindFirstOrThrowArgs>(args?: SelectSubset<T, UsuarioFindFirstOrThrowArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Usuarios that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Usuarios
     * const usuarios = await prisma.usuario.findMany()
     * 
     * // Get first 10 Usuarios
     * const usuarios = await prisma.usuario.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const usuarioWithIdOnly = await prisma.usuario.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UsuarioFindManyArgs>(args?: SelectSubset<T, UsuarioFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Usuario.
     * @param {UsuarioCreateArgs} args - Arguments to create a Usuario.
     * @example
     * // Create one Usuario
     * const Usuario = await prisma.usuario.create({
     *   data: {
     *     // ... data to create a Usuario
     *   }
     * })
     * 
     */
    create<T extends UsuarioCreateArgs>(args: SelectSubset<T, UsuarioCreateArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Usuarios.
     * @param {UsuarioCreateManyArgs} args - Arguments to create many Usuarios.
     * @example
     * // Create many Usuarios
     * const usuario = await prisma.usuario.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UsuarioCreateManyArgs>(args?: SelectSubset<T, UsuarioCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Usuarios and returns the data saved in the database.
     * @param {UsuarioCreateManyAndReturnArgs} args - Arguments to create many Usuarios.
     * @example
     * // Create many Usuarios
     * const usuario = await prisma.usuario.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Usuarios and only return the `id`
     * const usuarioWithIdOnly = await prisma.usuario.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UsuarioCreateManyAndReturnArgs>(args?: SelectSubset<T, UsuarioCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Usuario.
     * @param {UsuarioDeleteArgs} args - Arguments to delete one Usuario.
     * @example
     * // Delete one Usuario
     * const Usuario = await prisma.usuario.delete({
     *   where: {
     *     // ... filter to delete one Usuario
     *   }
     * })
     * 
     */
    delete<T extends UsuarioDeleteArgs>(args: SelectSubset<T, UsuarioDeleteArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Usuario.
     * @param {UsuarioUpdateArgs} args - Arguments to update one Usuario.
     * @example
     * // Update one Usuario
     * const usuario = await prisma.usuario.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UsuarioUpdateArgs>(args: SelectSubset<T, UsuarioUpdateArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Usuarios.
     * @param {UsuarioDeleteManyArgs} args - Arguments to filter Usuarios to delete.
     * @example
     * // Delete a few Usuarios
     * const { count } = await prisma.usuario.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UsuarioDeleteManyArgs>(args?: SelectSubset<T, UsuarioDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Usuarios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Usuarios
     * const usuario = await prisma.usuario.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UsuarioUpdateManyArgs>(args: SelectSubset<T, UsuarioUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Usuarios and returns the data updated in the database.
     * @param {UsuarioUpdateManyAndReturnArgs} args - Arguments to update many Usuarios.
     * @example
     * // Update many Usuarios
     * const usuario = await prisma.usuario.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Usuarios and only return the `id`
     * const usuarioWithIdOnly = await prisma.usuario.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UsuarioUpdateManyAndReturnArgs>(args: SelectSubset<T, UsuarioUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Usuario.
     * @param {UsuarioUpsertArgs} args - Arguments to update or create a Usuario.
     * @example
     * // Update or create a Usuario
     * const usuario = await prisma.usuario.upsert({
     *   create: {
     *     // ... data to create a Usuario
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Usuario we want to update
     *   }
     * })
     */
    upsert<T extends UsuarioUpsertArgs>(args: SelectSubset<T, UsuarioUpsertArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Usuarios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioCountArgs} args - Arguments to filter Usuarios to count.
     * @example
     * // Count the number of Usuarios
     * const count = await prisma.usuario.count({
     *   where: {
     *     // ... the filter for the Usuarios we want to count
     *   }
     * })
    **/
    count<T extends UsuarioCountArgs>(
      args?: Subset<T, UsuarioCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UsuarioCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Usuario.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UsuarioAggregateArgs>(args: Subset<T, UsuarioAggregateArgs>): Prisma.PrismaPromise<GetUsuarioAggregateType<T>>

    /**
     * Group by Usuario.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UsuarioGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UsuarioGroupByArgs['orderBy'] }
        : { orderBy?: UsuarioGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UsuarioGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUsuarioGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Usuario model
   */
  readonly fields: UsuarioFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Usuario.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UsuarioClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    ventas<T extends Usuario$ventasArgs<ExtArgs> = {}>(args?: Subset<T, Usuario$ventasArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VentaPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    juegos<T extends Usuario$juegosArgs<ExtArgs> = {}>(args?: Subset<T, Usuario$juegosArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JuegoXUsuarioPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    resenas<T extends Usuario$resenasArgs<ExtArgs> = {}>(args?: Subset<T, Usuario$resenasArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ResenaPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    carrito<T extends Usuario$carritoArgs<ExtArgs> = {}>(args?: Subset<T, Usuario$carritoArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CarritoPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Usuario model
   */
  interface UsuarioFieldRefs {
    readonly id: FieldRef<"Usuario", 'Int'>
    readonly correo: FieldRef<"Usuario", 'String'>
    readonly contrasena: FieldRef<"Usuario", 'String'>
    readonly rol: FieldRef<"Usuario", 'Rol'>
    readonly nombre: FieldRef<"Usuario", 'String'>
    readonly apellido: FieldRef<"Usuario", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Usuario findUnique
   */
  export type UsuarioFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Usuario
     */
    omit?: UsuarioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * Filter, which Usuario to fetch.
     */
    where: UsuarioWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * Usuario findUniqueOrThrow
   */
  export type UsuarioFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Usuario
     */
    omit?: UsuarioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * Filter, which Usuario to fetch.
     */
    where: UsuarioWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * Usuario findFirst
   */
  export type UsuarioFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Usuario
     */
    omit?: UsuarioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * Filter, which Usuario to fetch.
     */
    where?: UsuarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Usuarios to fetch.
     */
    orderBy?: UsuarioOrderByWithRelationInput | UsuarioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Usuarios.
     */
    cursor?: UsuarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Usuarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Usuarios.
     */
    distinct?: UsuarioScalarFieldEnum | UsuarioScalarFieldEnum[]
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * Usuario findFirstOrThrow
   */
  export type UsuarioFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Usuario
     */
    omit?: UsuarioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * Filter, which Usuario to fetch.
     */
    where?: UsuarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Usuarios to fetch.
     */
    orderBy?: UsuarioOrderByWithRelationInput | UsuarioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Usuarios.
     */
    cursor?: UsuarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Usuarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Usuarios.
     */
    distinct?: UsuarioScalarFieldEnum | UsuarioScalarFieldEnum[]
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * Usuario findMany
   */
  export type UsuarioFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Usuario
     */
    omit?: UsuarioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * Filter, which Usuarios to fetch.
     */
    where?: UsuarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Usuarios to fetch.
     */
    orderBy?: UsuarioOrderByWithRelationInput | UsuarioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Usuarios.
     */
    cursor?: UsuarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Usuarios.
     */
    skip?: number
    distinct?: UsuarioScalarFieldEnum | UsuarioScalarFieldEnum[]
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * Usuario create
   */
  export type UsuarioCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Usuario
     */
    omit?: UsuarioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * The data needed to create a Usuario.
     */
    data: XOR<UsuarioCreateInput, UsuarioUncheckedCreateInput>
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * Usuario createMany
   */
  export type UsuarioCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Usuarios.
     */
    data: UsuarioCreateManyInput | UsuarioCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Usuario createManyAndReturn
   */
  export type UsuarioCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Usuario
     */
    omit?: UsuarioOmit<ExtArgs> | null
    /**
     * The data used to create many Usuarios.
     */
    data: UsuarioCreateManyInput | UsuarioCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Usuario update
   */
  export type UsuarioUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Usuario
     */
    omit?: UsuarioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * The data needed to update a Usuario.
     */
    data: XOR<UsuarioUpdateInput, UsuarioUncheckedUpdateInput>
    /**
     * Choose, which Usuario to update.
     */
    where: UsuarioWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * Usuario updateMany
   */
  export type UsuarioUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Usuarios.
     */
    data: XOR<UsuarioUpdateManyMutationInput, UsuarioUncheckedUpdateManyInput>
    /**
     * Filter which Usuarios to update
     */
    where?: UsuarioWhereInput
    /**
     * Limit how many Usuarios to update.
     */
    limit?: number
  }

  /**
   * Usuario updateManyAndReturn
   */
  export type UsuarioUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Usuario
     */
    omit?: UsuarioOmit<ExtArgs> | null
    /**
     * The data used to update Usuarios.
     */
    data: XOR<UsuarioUpdateManyMutationInput, UsuarioUncheckedUpdateManyInput>
    /**
     * Filter which Usuarios to update
     */
    where?: UsuarioWhereInput
    /**
     * Limit how many Usuarios to update.
     */
    limit?: number
  }

  /**
   * Usuario upsert
   */
  export type UsuarioUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Usuario
     */
    omit?: UsuarioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * The filter to search for the Usuario to update in case it exists.
     */
    where: UsuarioWhereUniqueInput
    /**
     * In case the Usuario found by the `where` argument doesn't exist, create a new Usuario with this data.
     */
    create: XOR<UsuarioCreateInput, UsuarioUncheckedCreateInput>
    /**
     * In case the Usuario was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UsuarioUpdateInput, UsuarioUncheckedUpdateInput>
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * Usuario delete
   */
  export type UsuarioDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Usuario
     */
    omit?: UsuarioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * Filter which Usuario to delete.
     */
    where: UsuarioWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * Usuario deleteMany
   */
  export type UsuarioDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Usuarios to delete
     */
    where?: UsuarioWhereInput
    /**
     * Limit how many Usuarios to delete.
     */
    limit?: number
  }

  /**
   * Usuario.ventas
   */
  export type Usuario$ventasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Venta
     */
    select?: VentaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Venta
     */
    omit?: VentaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VentaInclude<ExtArgs> | null
    where?: VentaWhereInput
    orderBy?: VentaOrderByWithRelationInput | VentaOrderByWithRelationInput[]
    cursor?: VentaWhereUniqueInput
    take?: number
    skip?: number
    distinct?: VentaScalarFieldEnum | VentaScalarFieldEnum[]
  }

  /**
   * Usuario.juegos
   */
  export type Usuario$juegosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JuegoXUsuario
     */
    select?: JuegoXUsuarioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JuegoXUsuario
     */
    omit?: JuegoXUsuarioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JuegoXUsuarioInclude<ExtArgs> | null
    where?: JuegoXUsuarioWhereInput
    orderBy?: JuegoXUsuarioOrderByWithRelationInput | JuegoXUsuarioOrderByWithRelationInput[]
    cursor?: JuegoXUsuarioWhereUniqueInput
    take?: number
    skip?: number
    distinct?: JuegoXUsuarioScalarFieldEnum | JuegoXUsuarioScalarFieldEnum[]
  }

  /**
   * Usuario.resenas
   */
  export type Usuario$resenasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Resena
     */
    select?: ResenaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Resena
     */
    omit?: ResenaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResenaInclude<ExtArgs> | null
    where?: ResenaWhereInput
    orderBy?: ResenaOrderByWithRelationInput | ResenaOrderByWithRelationInput[]
    cursor?: ResenaWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ResenaScalarFieldEnum | ResenaScalarFieldEnum[]
  }

  /**
   * Usuario.carrito
   */
  export type Usuario$carritoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Carrito
     */
    select?: CarritoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Carrito
     */
    omit?: CarritoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CarritoInclude<ExtArgs> | null
    where?: CarritoWhereInput
    orderBy?: CarritoOrderByWithRelationInput | CarritoOrderByWithRelationInput[]
    cursor?: CarritoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CarritoScalarFieldEnum | CarritoScalarFieldEnum[]
  }

  /**
   * Usuario without action
   */
  export type UsuarioDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Usuario
     */
    omit?: UsuarioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
  }


  /**
   * Model Juego
   */

  export type AggregateJuego = {
    _count: JuegoCountAggregateOutputType | null
    _avg: JuegoAvgAggregateOutputType | null
    _sum: JuegoSumAggregateOutputType | null
    _min: JuegoMinAggregateOutputType | null
    _max: JuegoMaxAggregateOutputType | null
  }

  export type JuegoAvgAggregateOutputType = {
    id: number | null
    precio: number | null
    porcentajeOferta: number | null
    rating: number | null
  }

  export type JuegoSumAggregateOutputType = {
    id: number | null
    precio: number | null
    porcentajeOferta: number | null
    rating: number | null
  }

  export type JuegoMinAggregateOutputType = {
    id: number | null
    titulo: string | null
    descripcion: string | null
    precio: number | null
    porcentajeOferta: number | null
    trailerUrl: string | null
    rating: number | null
    fechaLanzamiento: Date | null
    fechaSubida: Date | null
    slug: string | null
    reviewJuego: string | null
  }

  export type JuegoMaxAggregateOutputType = {
    id: number | null
    titulo: string | null
    descripcion: string | null
    precio: number | null
    porcentajeOferta: number | null
    trailerUrl: string | null
    rating: number | null
    fechaLanzamiento: Date | null
    fechaSubida: Date | null
    slug: string | null
    reviewJuego: string | null
  }

  export type JuegoCountAggregateOutputType = {
    id: number
    titulo: number
    descripcion: number
    precio: number
    porcentajeOferta: number
    trailerUrl: number
    rating: number
    fechaLanzamiento: number
    fechaSubida: number
    slug: number
    reviewJuego: number
    _all: number
  }


  export type JuegoAvgAggregateInputType = {
    id?: true
    precio?: true
    porcentajeOferta?: true
    rating?: true
  }

  export type JuegoSumAggregateInputType = {
    id?: true
    precio?: true
    porcentajeOferta?: true
    rating?: true
  }

  export type JuegoMinAggregateInputType = {
    id?: true
    titulo?: true
    descripcion?: true
    precio?: true
    porcentajeOferta?: true
    trailerUrl?: true
    rating?: true
    fechaLanzamiento?: true
    fechaSubida?: true
    slug?: true
    reviewJuego?: true
  }

  export type JuegoMaxAggregateInputType = {
    id?: true
    titulo?: true
    descripcion?: true
    precio?: true
    porcentajeOferta?: true
    trailerUrl?: true
    rating?: true
    fechaLanzamiento?: true
    fechaSubida?: true
    slug?: true
    reviewJuego?: true
  }

  export type JuegoCountAggregateInputType = {
    id?: true
    titulo?: true
    descripcion?: true
    precio?: true
    porcentajeOferta?: true
    trailerUrl?: true
    rating?: true
    fechaLanzamiento?: true
    fechaSubida?: true
    slug?: true
    reviewJuego?: true
    _all?: true
  }

  export type JuegoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Juego to aggregate.
     */
    where?: JuegoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Juegos to fetch.
     */
    orderBy?: JuegoOrderByWithRelationInput | JuegoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: JuegoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Juegos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Juegos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Juegos
    **/
    _count?: true | JuegoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: JuegoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: JuegoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: JuegoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: JuegoMaxAggregateInputType
  }

  export type GetJuegoAggregateType<T extends JuegoAggregateArgs> = {
        [P in keyof T & keyof AggregateJuego]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateJuego[P]>
      : GetScalarType<T[P], AggregateJuego[P]>
  }




  export type JuegoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: JuegoWhereInput
    orderBy?: JuegoOrderByWithAggregationInput | JuegoOrderByWithAggregationInput[]
    by: JuegoScalarFieldEnum[] | JuegoScalarFieldEnum
    having?: JuegoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: JuegoCountAggregateInputType | true
    _avg?: JuegoAvgAggregateInputType
    _sum?: JuegoSumAggregateInputType
    _min?: JuegoMinAggregateInputType
    _max?: JuegoMaxAggregateInputType
  }

  export type JuegoGroupByOutputType = {
    id: number
    titulo: string
    descripcion: string
    precio: number
    porcentajeOferta: number | null
    trailerUrl: string | null
    rating: number | null
    fechaLanzamiento: Date
    fechaSubida: Date
    slug: string
    reviewJuego: string | null
    _count: JuegoCountAggregateOutputType | null
    _avg: JuegoAvgAggregateOutputType | null
    _sum: JuegoSumAggregateOutputType | null
    _min: JuegoMinAggregateOutputType | null
    _max: JuegoMaxAggregateOutputType | null
  }

  type GetJuegoGroupByPayload<T extends JuegoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<JuegoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof JuegoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], JuegoGroupByOutputType[P]>
            : GetScalarType<T[P], JuegoGroupByOutputType[P]>
        }
      >
    >


  export type JuegoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    titulo?: boolean
    descripcion?: boolean
    precio?: boolean
    porcentajeOferta?: boolean
    trailerUrl?: boolean
    rating?: boolean
    fechaLanzamiento?: boolean
    fechaSubida?: boolean
    slug?: boolean
    reviewJuego?: boolean
    fotos?: boolean | Juego$fotosArgs<ExtArgs>
    categorias?: boolean | Juego$categoriasArgs<ExtArgs>
    plataformas?: boolean | Juego$plataformasArgs<ExtArgs>
    claves?: boolean | Juego$clavesArgs<ExtArgs>
    ventas?: boolean | Juego$ventasArgs<ExtArgs>
    usuarios?: boolean | Juego$usuariosArgs<ExtArgs>
    resenas?: boolean | Juego$resenasArgs<ExtArgs>
    enCarritos?: boolean | Juego$enCarritosArgs<ExtArgs>
    _count?: boolean | JuegoCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["juego"]>

  export type JuegoSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    titulo?: boolean
    descripcion?: boolean
    precio?: boolean
    porcentajeOferta?: boolean
    trailerUrl?: boolean
    rating?: boolean
    fechaLanzamiento?: boolean
    fechaSubida?: boolean
    slug?: boolean
    reviewJuego?: boolean
  }, ExtArgs["result"]["juego"]>

  export type JuegoSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    titulo?: boolean
    descripcion?: boolean
    precio?: boolean
    porcentajeOferta?: boolean
    trailerUrl?: boolean
    rating?: boolean
    fechaLanzamiento?: boolean
    fechaSubida?: boolean
    slug?: boolean
    reviewJuego?: boolean
  }, ExtArgs["result"]["juego"]>

  export type JuegoSelectScalar = {
    id?: boolean
    titulo?: boolean
    descripcion?: boolean
    precio?: boolean
    porcentajeOferta?: boolean
    trailerUrl?: boolean
    rating?: boolean
    fechaLanzamiento?: boolean
    fechaSubida?: boolean
    slug?: boolean
    reviewJuego?: boolean
  }

  export type JuegoOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "titulo" | "descripcion" | "precio" | "porcentajeOferta" | "trailerUrl" | "rating" | "fechaLanzamiento" | "fechaSubida" | "slug" | "reviewJuego", ExtArgs["result"]["juego"]>
  export type JuegoInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    fotos?: boolean | Juego$fotosArgs<ExtArgs>
    categorias?: boolean | Juego$categoriasArgs<ExtArgs>
    plataformas?: boolean | Juego$plataformasArgs<ExtArgs>
    claves?: boolean | Juego$clavesArgs<ExtArgs>
    ventas?: boolean | Juego$ventasArgs<ExtArgs>
    usuarios?: boolean | Juego$usuariosArgs<ExtArgs>
    resenas?: boolean | Juego$resenasArgs<ExtArgs>
    enCarritos?: boolean | Juego$enCarritosArgs<ExtArgs>
    _count?: boolean | JuegoCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type JuegoIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type JuegoIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $JuegoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Juego"
    objects: {
      fotos: Prisma.$FotoPayload<ExtArgs>[]
      categorias: Prisma.$CategoriaXJuegoPayload<ExtArgs>[]
      plataformas: Prisma.$PlataformaXJuegoPayload<ExtArgs>[]
      claves: Prisma.$ClavePayload<ExtArgs>[]
      ventas: Prisma.$JuegoXVentaPayload<ExtArgs>[]
      usuarios: Prisma.$JuegoXUsuarioPayload<ExtArgs>[]
      resenas: Prisma.$ResenaPayload<ExtArgs>[]
      enCarritos: Prisma.$CarritoPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      titulo: string
      descripcion: string
      precio: number
      porcentajeOferta: number | null
      trailerUrl: string | null
      rating: number | null
      fechaLanzamiento: Date
      fechaSubida: Date
      slug: string
      reviewJuego: string | null
    }, ExtArgs["result"]["juego"]>
    composites: {}
  }

  type JuegoGetPayload<S extends boolean | null | undefined | JuegoDefaultArgs> = $Result.GetResult<Prisma.$JuegoPayload, S>

  type JuegoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<JuegoFindManyArgs, 'select' | 'include' | 'distinct' | 'omit' | 'relationLoadStrategy'> & {
      select?: JuegoCountAggregateInputType | true
    }

  export interface JuegoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Juego'], meta: { name: 'Juego' } }
    /**
     * Find zero or one Juego that matches the filter.
     * @param {JuegoFindUniqueArgs} args - Arguments to find a Juego
     * @example
     * // Get one Juego
     * const juego = await prisma.juego.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends JuegoFindUniqueArgs>(args: SelectSubset<T, JuegoFindUniqueArgs<ExtArgs>>): Prisma__JuegoClient<$Result.GetResult<Prisma.$JuegoPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Juego that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {JuegoFindUniqueOrThrowArgs} args - Arguments to find a Juego
     * @example
     * // Get one Juego
     * const juego = await prisma.juego.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends JuegoFindUniqueOrThrowArgs>(args: SelectSubset<T, JuegoFindUniqueOrThrowArgs<ExtArgs>>): Prisma__JuegoClient<$Result.GetResult<Prisma.$JuegoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Juego that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JuegoFindFirstArgs} args - Arguments to find a Juego
     * @example
     * // Get one Juego
     * const juego = await prisma.juego.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends JuegoFindFirstArgs>(args?: SelectSubset<T, JuegoFindFirstArgs<ExtArgs>>): Prisma__JuegoClient<$Result.GetResult<Prisma.$JuegoPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Juego that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JuegoFindFirstOrThrowArgs} args - Arguments to find a Juego
     * @example
     * // Get one Juego
     * const juego = await prisma.juego.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends JuegoFindFirstOrThrowArgs>(args?: SelectSubset<T, JuegoFindFirstOrThrowArgs<ExtArgs>>): Prisma__JuegoClient<$Result.GetResult<Prisma.$JuegoPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Juegos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JuegoFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Juegos
     * const juegos = await prisma.juego.findMany()
     * 
     * // Get first 10 Juegos
     * const juegos = await prisma.juego.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const juegoWithIdOnly = await prisma.juego.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends JuegoFindManyArgs>(args?: SelectSubset<T, JuegoFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JuegoPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Juego.
     * @param {JuegoCreateArgs} args - Arguments to create a Juego.
     * @example
     * // Create one Juego
     * const Juego = await prisma.juego.create({
     *   data: {
     *     // ... data to create a Juego
     *   }
     * })
     * 
     */
    create<T extends JuegoCreateArgs>(args: SelectSubset<T, JuegoCreateArgs<ExtArgs>>): Prisma__JuegoClient<$Result.GetResult<Prisma.$JuegoPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Juegos.
     * @param {JuegoCreateManyArgs} args - Arguments to create many Juegos.
     * @example
     * // Create many Juegos
     * const juego = await prisma.juego.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends JuegoCreateManyArgs>(args?: SelectSubset<T, JuegoCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Juegos and returns the data saved in the database.
     * @param {JuegoCreateManyAndReturnArgs} args - Arguments to create many Juegos.
     * @example
     * // Create many Juegos
     * const juego = await prisma.juego.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Juegos and only return the `id`
     * const juegoWithIdOnly = await prisma.juego.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends JuegoCreateManyAndReturnArgs>(args?: SelectSubset<T, JuegoCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JuegoPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Juego.
     * @param {JuegoDeleteArgs} args - Arguments to delete one Juego.
     * @example
     * // Delete one Juego
     * const Juego = await prisma.juego.delete({
     *   where: {
     *     // ... filter to delete one Juego
     *   }
     * })
     * 
     */
    delete<T extends JuegoDeleteArgs>(args: SelectSubset<T, JuegoDeleteArgs<ExtArgs>>): Prisma__JuegoClient<$Result.GetResult<Prisma.$JuegoPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Juego.
     * @param {JuegoUpdateArgs} args - Arguments to update one Juego.
     * @example
     * // Update one Juego
     * const juego = await prisma.juego.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends JuegoUpdateArgs>(args: SelectSubset<T, JuegoUpdateArgs<ExtArgs>>): Prisma__JuegoClient<$Result.GetResult<Prisma.$JuegoPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Juegos.
     * @param {JuegoDeleteManyArgs} args - Arguments to filter Juegos to delete.
     * @example
     * // Delete a few Juegos
     * const { count } = await prisma.juego.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends JuegoDeleteManyArgs>(args?: SelectSubset<T, JuegoDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Juegos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JuegoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Juegos
     * const juego = await prisma.juego.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends JuegoUpdateManyArgs>(args: SelectSubset<T, JuegoUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Juegos and returns the data updated in the database.
     * @param {JuegoUpdateManyAndReturnArgs} args - Arguments to update many Juegos.
     * @example
     * // Update many Juegos
     * const juego = await prisma.juego.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Juegos and only return the `id`
     * const juegoWithIdOnly = await prisma.juego.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends JuegoUpdateManyAndReturnArgs>(args: SelectSubset<T, JuegoUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JuegoPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Juego.
     * @param {JuegoUpsertArgs} args - Arguments to update or create a Juego.
     * @example
     * // Update or create a Juego
     * const juego = await prisma.juego.upsert({
     *   create: {
     *     // ... data to create a Juego
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Juego we want to update
     *   }
     * })
     */
    upsert<T extends JuegoUpsertArgs>(args: SelectSubset<T, JuegoUpsertArgs<ExtArgs>>): Prisma__JuegoClient<$Result.GetResult<Prisma.$JuegoPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Juegos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JuegoCountArgs} args - Arguments to filter Juegos to count.
     * @example
     * // Count the number of Juegos
     * const count = await prisma.juego.count({
     *   where: {
     *     // ... the filter for the Juegos we want to count
     *   }
     * })
    **/
    count<T extends JuegoCountArgs>(
      args?: Subset<T, JuegoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], JuegoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Juego.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JuegoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends JuegoAggregateArgs>(args: Subset<T, JuegoAggregateArgs>): Prisma.PrismaPromise<GetJuegoAggregateType<T>>

    /**
     * Group by Juego.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JuegoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends JuegoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: JuegoGroupByArgs['orderBy'] }
        : { orderBy?: JuegoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, JuegoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetJuegoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Juego model
   */
  readonly fields: JuegoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Juego.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__JuegoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    fotos<T extends Juego$fotosArgs<ExtArgs> = {}>(args?: Subset<T, Juego$fotosArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FotoPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    categorias<T extends Juego$categoriasArgs<ExtArgs> = {}>(args?: Subset<T, Juego$categoriasArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CategoriaXJuegoPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    plataformas<T extends Juego$plataformasArgs<ExtArgs> = {}>(args?: Subset<T, Juego$plataformasArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlataformaXJuegoPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    claves<T extends Juego$clavesArgs<ExtArgs> = {}>(args?: Subset<T, Juego$clavesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClavePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    ventas<T extends Juego$ventasArgs<ExtArgs> = {}>(args?: Subset<T, Juego$ventasArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JuegoXVentaPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    usuarios<T extends Juego$usuariosArgs<ExtArgs> = {}>(args?: Subset<T, Juego$usuariosArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JuegoXUsuarioPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    resenas<T extends Juego$resenasArgs<ExtArgs> = {}>(args?: Subset<T, Juego$resenasArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ResenaPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    enCarritos<T extends Juego$enCarritosArgs<ExtArgs> = {}>(args?: Subset<T, Juego$enCarritosArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CarritoPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Juego model
   */
  interface JuegoFieldRefs {
    readonly id: FieldRef<"Juego", 'Int'>
    readonly titulo: FieldRef<"Juego", 'String'>
    readonly descripcion: FieldRef<"Juego", 'String'>
    readonly precio: FieldRef<"Juego", 'Float'>
    readonly porcentajeOferta: FieldRef<"Juego", 'Float'>
    readonly trailerUrl: FieldRef<"Juego", 'String'>
    readonly rating: FieldRef<"Juego", 'Float'>
    readonly fechaLanzamiento: FieldRef<"Juego", 'DateTime'>
    readonly fechaSubida: FieldRef<"Juego", 'DateTime'>
    readonly slug: FieldRef<"Juego", 'String'>
    readonly reviewJuego: FieldRef<"Juego", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Juego findUnique
   */
  export type JuegoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Juego
     */
    select?: JuegoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Juego
     */
    omit?: JuegoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JuegoInclude<ExtArgs> | null
    /**
     * Filter, which Juego to fetch.
     */
    where: JuegoWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * Juego findUniqueOrThrow
   */
  export type JuegoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Juego
     */
    select?: JuegoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Juego
     */
    omit?: JuegoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JuegoInclude<ExtArgs> | null
    /**
     * Filter, which Juego to fetch.
     */
    where: JuegoWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * Juego findFirst
   */
  export type JuegoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Juego
     */
    select?: JuegoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Juego
     */
    omit?: JuegoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JuegoInclude<ExtArgs> | null
    /**
     * Filter, which Juego to fetch.
     */
    where?: JuegoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Juegos to fetch.
     */
    orderBy?: JuegoOrderByWithRelationInput | JuegoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Juegos.
     */
    cursor?: JuegoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Juegos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Juegos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Juegos.
     */
    distinct?: JuegoScalarFieldEnum | JuegoScalarFieldEnum[]
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * Juego findFirstOrThrow
   */
  export type JuegoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Juego
     */
    select?: JuegoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Juego
     */
    omit?: JuegoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JuegoInclude<ExtArgs> | null
    /**
     * Filter, which Juego to fetch.
     */
    where?: JuegoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Juegos to fetch.
     */
    orderBy?: JuegoOrderByWithRelationInput | JuegoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Juegos.
     */
    cursor?: JuegoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Juegos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Juegos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Juegos.
     */
    distinct?: JuegoScalarFieldEnum | JuegoScalarFieldEnum[]
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * Juego findMany
   */
  export type JuegoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Juego
     */
    select?: JuegoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Juego
     */
    omit?: JuegoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JuegoInclude<ExtArgs> | null
    /**
     * Filter, which Juegos to fetch.
     */
    where?: JuegoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Juegos to fetch.
     */
    orderBy?: JuegoOrderByWithRelationInput | JuegoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Juegos.
     */
    cursor?: JuegoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Juegos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Juegos.
     */
    skip?: number
    distinct?: JuegoScalarFieldEnum | JuegoScalarFieldEnum[]
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * Juego create
   */
  export type JuegoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Juego
     */
    select?: JuegoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Juego
     */
    omit?: JuegoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JuegoInclude<ExtArgs> | null
    /**
     * The data needed to create a Juego.
     */
    data: XOR<JuegoCreateInput, JuegoUncheckedCreateInput>
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * Juego createMany
   */
  export type JuegoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Juegos.
     */
    data: JuegoCreateManyInput | JuegoCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Juego createManyAndReturn
   */
  export type JuegoCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Juego
     */
    select?: JuegoSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Juego
     */
    omit?: JuegoOmit<ExtArgs> | null
    /**
     * The data used to create many Juegos.
     */
    data: JuegoCreateManyInput | JuegoCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Juego update
   */
  export type JuegoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Juego
     */
    select?: JuegoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Juego
     */
    omit?: JuegoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JuegoInclude<ExtArgs> | null
    /**
     * The data needed to update a Juego.
     */
    data: XOR<JuegoUpdateInput, JuegoUncheckedUpdateInput>
    /**
     * Choose, which Juego to update.
     */
    where: JuegoWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * Juego updateMany
   */
  export type JuegoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Juegos.
     */
    data: XOR<JuegoUpdateManyMutationInput, JuegoUncheckedUpdateManyInput>
    /**
     * Filter which Juegos to update
     */
    where?: JuegoWhereInput
    /**
     * Limit how many Juegos to update.
     */
    limit?: number
  }

  /**
   * Juego updateManyAndReturn
   */
  export type JuegoUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Juego
     */
    select?: JuegoSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Juego
     */
    omit?: JuegoOmit<ExtArgs> | null
    /**
     * The data used to update Juegos.
     */
    data: XOR<JuegoUpdateManyMutationInput, JuegoUncheckedUpdateManyInput>
    /**
     * Filter which Juegos to update
     */
    where?: JuegoWhereInput
    /**
     * Limit how many Juegos to update.
     */
    limit?: number
  }

  /**
   * Juego upsert
   */
  export type JuegoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Juego
     */
    select?: JuegoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Juego
     */
    omit?: JuegoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JuegoInclude<ExtArgs> | null
    /**
     * The filter to search for the Juego to update in case it exists.
     */
    where: JuegoWhereUniqueInput
    /**
     * In case the Juego found by the `where` argument doesn't exist, create a new Juego with this data.
     */
    create: XOR<JuegoCreateInput, JuegoUncheckedCreateInput>
    /**
     * In case the Juego was found with the provided `where` argument, update it with this data.
     */
    update: XOR<JuegoUpdateInput, JuegoUncheckedUpdateInput>
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * Juego delete
   */
  export type JuegoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Juego
     */
    select?: JuegoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Juego
     */
    omit?: JuegoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JuegoInclude<ExtArgs> | null
    /**
     * Filter which Juego to delete.
     */
    where: JuegoWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * Juego deleteMany
   */
  export type JuegoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Juegos to delete
     */
    where?: JuegoWhereInput
    /**
     * Limit how many Juegos to delete.
     */
    limit?: number
  }

  /**
   * Juego.fotos
   */
  export type Juego$fotosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Foto
     */
    select?: FotoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Foto
     */
    omit?: FotoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FotoInclude<ExtArgs> | null
    where?: FotoWhereInput
    orderBy?: FotoOrderByWithRelationInput | FotoOrderByWithRelationInput[]
    cursor?: FotoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FotoScalarFieldEnum | FotoScalarFieldEnum[]
  }

  /**
   * Juego.categorias
   */
  export type Juego$categoriasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CategoriaXJuego
     */
    select?: CategoriaXJuegoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CategoriaXJuego
     */
    omit?: CategoriaXJuegoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoriaXJuegoInclude<ExtArgs> | null
    where?: CategoriaXJuegoWhereInput
    orderBy?: CategoriaXJuegoOrderByWithRelationInput | CategoriaXJuegoOrderByWithRelationInput[]
    cursor?: CategoriaXJuegoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CategoriaXJuegoScalarFieldEnum | CategoriaXJuegoScalarFieldEnum[]
  }

  /**
   * Juego.plataformas
   */
  export type Juego$plataformasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlataformaXJuego
     */
    select?: PlataformaXJuegoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlataformaXJuego
     */
    omit?: PlataformaXJuegoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlataformaXJuegoInclude<ExtArgs> | null
    where?: PlataformaXJuegoWhereInput
    orderBy?: PlataformaXJuegoOrderByWithRelationInput | PlataformaXJuegoOrderByWithRelationInput[]
    cursor?: PlataformaXJuegoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PlataformaXJuegoScalarFieldEnum | PlataformaXJuegoScalarFieldEnum[]
  }

  /**
   * Juego.claves
   */
  export type Juego$clavesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Clave
     */
    select?: ClaveSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Clave
     */
    omit?: ClaveOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClaveInclude<ExtArgs> | null
    where?: ClaveWhereInput
    orderBy?: ClaveOrderByWithRelationInput | ClaveOrderByWithRelationInput[]
    cursor?: ClaveWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ClaveScalarFieldEnum | ClaveScalarFieldEnum[]
  }

  /**
   * Juego.ventas
   */
  export type Juego$ventasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JuegoXVenta
     */
    select?: JuegoXVentaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JuegoXVenta
     */
    omit?: JuegoXVentaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JuegoXVentaInclude<ExtArgs> | null
    where?: JuegoXVentaWhereInput
    orderBy?: JuegoXVentaOrderByWithRelationInput | JuegoXVentaOrderByWithRelationInput[]
    cursor?: JuegoXVentaWhereUniqueInput
    take?: number
    skip?: number
    distinct?: JuegoXVentaScalarFieldEnum | JuegoXVentaScalarFieldEnum[]
  }

  /**
   * Juego.usuarios
   */
  export type Juego$usuariosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JuegoXUsuario
     */
    select?: JuegoXUsuarioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JuegoXUsuario
     */
    omit?: JuegoXUsuarioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JuegoXUsuarioInclude<ExtArgs> | null
    where?: JuegoXUsuarioWhereInput
    orderBy?: JuegoXUsuarioOrderByWithRelationInput | JuegoXUsuarioOrderByWithRelationInput[]
    cursor?: JuegoXUsuarioWhereUniqueInput
    take?: number
    skip?: number
    distinct?: JuegoXUsuarioScalarFieldEnum | JuegoXUsuarioScalarFieldEnum[]
  }

  /**
   * Juego.resenas
   */
  export type Juego$resenasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Resena
     */
    select?: ResenaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Resena
     */
    omit?: ResenaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResenaInclude<ExtArgs> | null
    where?: ResenaWhereInput
    orderBy?: ResenaOrderByWithRelationInput | ResenaOrderByWithRelationInput[]
    cursor?: ResenaWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ResenaScalarFieldEnum | ResenaScalarFieldEnum[]
  }

  /**
   * Juego.enCarritos
   */
  export type Juego$enCarritosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Carrito
     */
    select?: CarritoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Carrito
     */
    omit?: CarritoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CarritoInclude<ExtArgs> | null
    where?: CarritoWhereInput
    orderBy?: CarritoOrderByWithRelationInput | CarritoOrderByWithRelationInput[]
    cursor?: CarritoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CarritoScalarFieldEnum | CarritoScalarFieldEnum[]
  }

  /**
   * Juego without action
   */
  export type JuegoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Juego
     */
    select?: JuegoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Juego
     */
    omit?: JuegoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JuegoInclude<ExtArgs> | null
  }


  /**
   * Model Noticia
   */

  export type AggregateNoticia = {
    _count: NoticiaCountAggregateOutputType | null
    _avg: NoticiaAvgAggregateOutputType | null
    _sum: NoticiaSumAggregateOutputType | null
    _min: NoticiaMinAggregateOutputType | null
    _max: NoticiaMaxAggregateOutputType | null
  }

  export type NoticiaAvgAggregateOutputType = {
    id: number | null
    tiempoLectura: number | null
    fotoId: number | null
  }

  export type NoticiaSumAggregateOutputType = {
    id: number | null
    tiempoLectura: number | null
    fotoId: number | null
  }

  export type NoticiaMinAggregateOutputType = {
    id: number | null
    titulo: string | null
    slug: string | null
    tiempoLectura: number | null
    fechaPub: Date | null
    texto: string | null
    resumen: string | null
    fotoId: number | null
  }

  export type NoticiaMaxAggregateOutputType = {
    id: number | null
    titulo: string | null
    slug: string | null
    tiempoLectura: number | null
    fechaPub: Date | null
    texto: string | null
    resumen: string | null
    fotoId: number | null
  }

  export type NoticiaCountAggregateOutputType = {
    id: number
    titulo: number
    slug: number
    tiempoLectura: number
    fechaPub: number
    texto: number
    resumen: number
    fotoId: number
    _all: number
  }


  export type NoticiaAvgAggregateInputType = {
    id?: true
    tiempoLectura?: true
    fotoId?: true
  }

  export type NoticiaSumAggregateInputType = {
    id?: true
    tiempoLectura?: true
    fotoId?: true
  }

  export type NoticiaMinAggregateInputType = {
    id?: true
    titulo?: true
    slug?: true
    tiempoLectura?: true
    fechaPub?: true
    texto?: true
    resumen?: true
    fotoId?: true
  }

  export type NoticiaMaxAggregateInputType = {
    id?: true
    titulo?: true
    slug?: true
    tiempoLectura?: true
    fechaPub?: true
    texto?: true
    resumen?: true
    fotoId?: true
  }

  export type NoticiaCountAggregateInputType = {
    id?: true
    titulo?: true
    slug?: true
    tiempoLectura?: true
    fechaPub?: true
    texto?: true
    resumen?: true
    fotoId?: true
    _all?: true
  }

  export type NoticiaAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Noticia to aggregate.
     */
    where?: NoticiaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Noticias to fetch.
     */
    orderBy?: NoticiaOrderByWithRelationInput | NoticiaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: NoticiaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Noticias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Noticias.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Noticias
    **/
    _count?: true | NoticiaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: NoticiaAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: NoticiaSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: NoticiaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: NoticiaMaxAggregateInputType
  }

  export type GetNoticiaAggregateType<T extends NoticiaAggregateArgs> = {
        [P in keyof T & keyof AggregateNoticia]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateNoticia[P]>
      : GetScalarType<T[P], AggregateNoticia[P]>
  }




  export type NoticiaGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NoticiaWhereInput
    orderBy?: NoticiaOrderByWithAggregationInput | NoticiaOrderByWithAggregationInput[]
    by: NoticiaScalarFieldEnum[] | NoticiaScalarFieldEnum
    having?: NoticiaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: NoticiaCountAggregateInputType | true
    _avg?: NoticiaAvgAggregateInputType
    _sum?: NoticiaSumAggregateInputType
    _min?: NoticiaMinAggregateInputType
    _max?: NoticiaMaxAggregateInputType
  }

  export type NoticiaGroupByOutputType = {
    id: number
    titulo: string
    slug: string
    tiempoLectura: number
    fechaPub: Date
    texto: string
    resumen: string
    fotoId: number
    _count: NoticiaCountAggregateOutputType | null
    _avg: NoticiaAvgAggregateOutputType | null
    _sum: NoticiaSumAggregateOutputType | null
    _min: NoticiaMinAggregateOutputType | null
    _max: NoticiaMaxAggregateOutputType | null
  }

  type GetNoticiaGroupByPayload<T extends NoticiaGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<NoticiaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof NoticiaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], NoticiaGroupByOutputType[P]>
            : GetScalarType<T[P], NoticiaGroupByOutputType[P]>
        }
      >
    >


  export type NoticiaSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    titulo?: boolean
    slug?: boolean
    tiempoLectura?: boolean
    fechaPub?: boolean
    texto?: boolean
    resumen?: boolean
    fotoId?: boolean
    foto?: boolean | FotoDefaultArgs<ExtArgs>
    categorias?: boolean | Noticia$categoriasArgs<ExtArgs>
    _count?: boolean | NoticiaCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["noticia"]>

  export type NoticiaSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    titulo?: boolean
    slug?: boolean
    tiempoLectura?: boolean
    fechaPub?: boolean
    texto?: boolean
    resumen?: boolean
    fotoId?: boolean
    foto?: boolean | FotoDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["noticia"]>

  export type NoticiaSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    titulo?: boolean
    slug?: boolean
    tiempoLectura?: boolean
    fechaPub?: boolean
    texto?: boolean
    resumen?: boolean
    fotoId?: boolean
    foto?: boolean | FotoDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["noticia"]>

  export type NoticiaSelectScalar = {
    id?: boolean
    titulo?: boolean
    slug?: boolean
    tiempoLectura?: boolean
    fechaPub?: boolean
    texto?: boolean
    resumen?: boolean
    fotoId?: boolean
  }

  export type NoticiaOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "titulo" | "slug" | "tiempoLectura" | "fechaPub" | "texto" | "resumen" | "fotoId", ExtArgs["result"]["noticia"]>
  export type NoticiaInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    foto?: boolean | FotoDefaultArgs<ExtArgs>
    categorias?: boolean | Noticia$categoriasArgs<ExtArgs>
    _count?: boolean | NoticiaCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type NoticiaIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    foto?: boolean | FotoDefaultArgs<ExtArgs>
  }
  export type NoticiaIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    foto?: boolean | FotoDefaultArgs<ExtArgs>
  }

  export type $NoticiaPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Noticia"
    objects: {
      foto: Prisma.$FotoPayload<ExtArgs>
      categorias: Prisma.$CatNoticiaXNoticiaPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      titulo: string
      slug: string
      tiempoLectura: number
      fechaPub: Date
      texto: string
      resumen: string
      fotoId: number
    }, ExtArgs["result"]["noticia"]>
    composites: {}
  }

  type NoticiaGetPayload<S extends boolean | null | undefined | NoticiaDefaultArgs> = $Result.GetResult<Prisma.$NoticiaPayload, S>

  type NoticiaCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<NoticiaFindManyArgs, 'select' | 'include' | 'distinct' | 'omit' | 'relationLoadStrategy'> & {
      select?: NoticiaCountAggregateInputType | true
    }

  export interface NoticiaDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Noticia'], meta: { name: 'Noticia' } }
    /**
     * Find zero or one Noticia that matches the filter.
     * @param {NoticiaFindUniqueArgs} args - Arguments to find a Noticia
     * @example
     * // Get one Noticia
     * const noticia = await prisma.noticia.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends NoticiaFindUniqueArgs>(args: SelectSubset<T, NoticiaFindUniqueArgs<ExtArgs>>): Prisma__NoticiaClient<$Result.GetResult<Prisma.$NoticiaPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Noticia that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {NoticiaFindUniqueOrThrowArgs} args - Arguments to find a Noticia
     * @example
     * // Get one Noticia
     * const noticia = await prisma.noticia.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends NoticiaFindUniqueOrThrowArgs>(args: SelectSubset<T, NoticiaFindUniqueOrThrowArgs<ExtArgs>>): Prisma__NoticiaClient<$Result.GetResult<Prisma.$NoticiaPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Noticia that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NoticiaFindFirstArgs} args - Arguments to find a Noticia
     * @example
     * // Get one Noticia
     * const noticia = await prisma.noticia.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends NoticiaFindFirstArgs>(args?: SelectSubset<T, NoticiaFindFirstArgs<ExtArgs>>): Prisma__NoticiaClient<$Result.GetResult<Prisma.$NoticiaPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Noticia that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NoticiaFindFirstOrThrowArgs} args - Arguments to find a Noticia
     * @example
     * // Get one Noticia
     * const noticia = await prisma.noticia.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends NoticiaFindFirstOrThrowArgs>(args?: SelectSubset<T, NoticiaFindFirstOrThrowArgs<ExtArgs>>): Prisma__NoticiaClient<$Result.GetResult<Prisma.$NoticiaPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Noticias that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NoticiaFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Noticias
     * const noticias = await prisma.noticia.findMany()
     * 
     * // Get first 10 Noticias
     * const noticias = await prisma.noticia.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const noticiaWithIdOnly = await prisma.noticia.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends NoticiaFindManyArgs>(args?: SelectSubset<T, NoticiaFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NoticiaPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Noticia.
     * @param {NoticiaCreateArgs} args - Arguments to create a Noticia.
     * @example
     * // Create one Noticia
     * const Noticia = await prisma.noticia.create({
     *   data: {
     *     // ... data to create a Noticia
     *   }
     * })
     * 
     */
    create<T extends NoticiaCreateArgs>(args: SelectSubset<T, NoticiaCreateArgs<ExtArgs>>): Prisma__NoticiaClient<$Result.GetResult<Prisma.$NoticiaPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Noticias.
     * @param {NoticiaCreateManyArgs} args - Arguments to create many Noticias.
     * @example
     * // Create many Noticias
     * const noticia = await prisma.noticia.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends NoticiaCreateManyArgs>(args?: SelectSubset<T, NoticiaCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Noticias and returns the data saved in the database.
     * @param {NoticiaCreateManyAndReturnArgs} args - Arguments to create many Noticias.
     * @example
     * // Create many Noticias
     * const noticia = await prisma.noticia.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Noticias and only return the `id`
     * const noticiaWithIdOnly = await prisma.noticia.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends NoticiaCreateManyAndReturnArgs>(args?: SelectSubset<T, NoticiaCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NoticiaPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Noticia.
     * @param {NoticiaDeleteArgs} args - Arguments to delete one Noticia.
     * @example
     * // Delete one Noticia
     * const Noticia = await prisma.noticia.delete({
     *   where: {
     *     // ... filter to delete one Noticia
     *   }
     * })
     * 
     */
    delete<T extends NoticiaDeleteArgs>(args: SelectSubset<T, NoticiaDeleteArgs<ExtArgs>>): Prisma__NoticiaClient<$Result.GetResult<Prisma.$NoticiaPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Noticia.
     * @param {NoticiaUpdateArgs} args - Arguments to update one Noticia.
     * @example
     * // Update one Noticia
     * const noticia = await prisma.noticia.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends NoticiaUpdateArgs>(args: SelectSubset<T, NoticiaUpdateArgs<ExtArgs>>): Prisma__NoticiaClient<$Result.GetResult<Prisma.$NoticiaPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Noticias.
     * @param {NoticiaDeleteManyArgs} args - Arguments to filter Noticias to delete.
     * @example
     * // Delete a few Noticias
     * const { count } = await prisma.noticia.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends NoticiaDeleteManyArgs>(args?: SelectSubset<T, NoticiaDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Noticias.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NoticiaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Noticias
     * const noticia = await prisma.noticia.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends NoticiaUpdateManyArgs>(args: SelectSubset<T, NoticiaUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Noticias and returns the data updated in the database.
     * @param {NoticiaUpdateManyAndReturnArgs} args - Arguments to update many Noticias.
     * @example
     * // Update many Noticias
     * const noticia = await prisma.noticia.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Noticias and only return the `id`
     * const noticiaWithIdOnly = await prisma.noticia.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends NoticiaUpdateManyAndReturnArgs>(args: SelectSubset<T, NoticiaUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NoticiaPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Noticia.
     * @param {NoticiaUpsertArgs} args - Arguments to update or create a Noticia.
     * @example
     * // Update or create a Noticia
     * const noticia = await prisma.noticia.upsert({
     *   create: {
     *     // ... data to create a Noticia
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Noticia we want to update
     *   }
     * })
     */
    upsert<T extends NoticiaUpsertArgs>(args: SelectSubset<T, NoticiaUpsertArgs<ExtArgs>>): Prisma__NoticiaClient<$Result.GetResult<Prisma.$NoticiaPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Noticias.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NoticiaCountArgs} args - Arguments to filter Noticias to count.
     * @example
     * // Count the number of Noticias
     * const count = await prisma.noticia.count({
     *   where: {
     *     // ... the filter for the Noticias we want to count
     *   }
     * })
    **/
    count<T extends NoticiaCountArgs>(
      args?: Subset<T, NoticiaCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], NoticiaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Noticia.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NoticiaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends NoticiaAggregateArgs>(args: Subset<T, NoticiaAggregateArgs>): Prisma.PrismaPromise<GetNoticiaAggregateType<T>>

    /**
     * Group by Noticia.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NoticiaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends NoticiaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: NoticiaGroupByArgs['orderBy'] }
        : { orderBy?: NoticiaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, NoticiaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNoticiaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Noticia model
   */
  readonly fields: NoticiaFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Noticia.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__NoticiaClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    foto<T extends FotoDefaultArgs<ExtArgs> = {}>(args?: Subset<T, FotoDefaultArgs<ExtArgs>>): Prisma__FotoClient<$Result.GetResult<Prisma.$FotoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    categorias<T extends Noticia$categoriasArgs<ExtArgs> = {}>(args?: Subset<T, Noticia$categoriasArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CatNoticiaXNoticiaPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Noticia model
   */
  interface NoticiaFieldRefs {
    readonly id: FieldRef<"Noticia", 'Int'>
    readonly titulo: FieldRef<"Noticia", 'String'>
    readonly slug: FieldRef<"Noticia", 'String'>
    readonly tiempoLectura: FieldRef<"Noticia", 'Int'>
    readonly fechaPub: FieldRef<"Noticia", 'DateTime'>
    readonly texto: FieldRef<"Noticia", 'String'>
    readonly resumen: FieldRef<"Noticia", 'String'>
    readonly fotoId: FieldRef<"Noticia", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Noticia findUnique
   */
  export type NoticiaFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Noticia
     */
    select?: NoticiaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Noticia
     */
    omit?: NoticiaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NoticiaInclude<ExtArgs> | null
    /**
     * Filter, which Noticia to fetch.
     */
    where: NoticiaWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * Noticia findUniqueOrThrow
   */
  export type NoticiaFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Noticia
     */
    select?: NoticiaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Noticia
     */
    omit?: NoticiaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NoticiaInclude<ExtArgs> | null
    /**
     * Filter, which Noticia to fetch.
     */
    where: NoticiaWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * Noticia findFirst
   */
  export type NoticiaFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Noticia
     */
    select?: NoticiaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Noticia
     */
    omit?: NoticiaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NoticiaInclude<ExtArgs> | null
    /**
     * Filter, which Noticia to fetch.
     */
    where?: NoticiaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Noticias to fetch.
     */
    orderBy?: NoticiaOrderByWithRelationInput | NoticiaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Noticias.
     */
    cursor?: NoticiaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Noticias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Noticias.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Noticias.
     */
    distinct?: NoticiaScalarFieldEnum | NoticiaScalarFieldEnum[]
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * Noticia findFirstOrThrow
   */
  export type NoticiaFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Noticia
     */
    select?: NoticiaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Noticia
     */
    omit?: NoticiaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NoticiaInclude<ExtArgs> | null
    /**
     * Filter, which Noticia to fetch.
     */
    where?: NoticiaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Noticias to fetch.
     */
    orderBy?: NoticiaOrderByWithRelationInput | NoticiaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Noticias.
     */
    cursor?: NoticiaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Noticias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Noticias.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Noticias.
     */
    distinct?: NoticiaScalarFieldEnum | NoticiaScalarFieldEnum[]
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * Noticia findMany
   */
  export type NoticiaFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Noticia
     */
    select?: NoticiaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Noticia
     */
    omit?: NoticiaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NoticiaInclude<ExtArgs> | null
    /**
     * Filter, which Noticias to fetch.
     */
    where?: NoticiaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Noticias to fetch.
     */
    orderBy?: NoticiaOrderByWithRelationInput | NoticiaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Noticias.
     */
    cursor?: NoticiaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Noticias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Noticias.
     */
    skip?: number
    distinct?: NoticiaScalarFieldEnum | NoticiaScalarFieldEnum[]
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * Noticia create
   */
  export type NoticiaCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Noticia
     */
    select?: NoticiaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Noticia
     */
    omit?: NoticiaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NoticiaInclude<ExtArgs> | null
    /**
     * The data needed to create a Noticia.
     */
    data: XOR<NoticiaCreateInput, NoticiaUncheckedCreateInput>
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * Noticia createMany
   */
  export type NoticiaCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Noticias.
     */
    data: NoticiaCreateManyInput | NoticiaCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Noticia createManyAndReturn
   */
  export type NoticiaCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Noticia
     */
    select?: NoticiaSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Noticia
     */
    omit?: NoticiaOmit<ExtArgs> | null
    /**
     * The data used to create many Noticias.
     */
    data: NoticiaCreateManyInput | NoticiaCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NoticiaIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Noticia update
   */
  export type NoticiaUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Noticia
     */
    select?: NoticiaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Noticia
     */
    omit?: NoticiaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NoticiaInclude<ExtArgs> | null
    /**
     * The data needed to update a Noticia.
     */
    data: XOR<NoticiaUpdateInput, NoticiaUncheckedUpdateInput>
    /**
     * Choose, which Noticia to update.
     */
    where: NoticiaWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * Noticia updateMany
   */
  export type NoticiaUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Noticias.
     */
    data: XOR<NoticiaUpdateManyMutationInput, NoticiaUncheckedUpdateManyInput>
    /**
     * Filter which Noticias to update
     */
    where?: NoticiaWhereInput
    /**
     * Limit how many Noticias to update.
     */
    limit?: number
  }

  /**
   * Noticia updateManyAndReturn
   */
  export type NoticiaUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Noticia
     */
    select?: NoticiaSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Noticia
     */
    omit?: NoticiaOmit<ExtArgs> | null
    /**
     * The data used to update Noticias.
     */
    data: XOR<NoticiaUpdateManyMutationInput, NoticiaUncheckedUpdateManyInput>
    /**
     * Filter which Noticias to update
     */
    where?: NoticiaWhereInput
    /**
     * Limit how many Noticias to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NoticiaIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Noticia upsert
   */
  export type NoticiaUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Noticia
     */
    select?: NoticiaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Noticia
     */
    omit?: NoticiaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NoticiaInclude<ExtArgs> | null
    /**
     * The filter to search for the Noticia to update in case it exists.
     */
    where: NoticiaWhereUniqueInput
    /**
     * In case the Noticia found by the `where` argument doesn't exist, create a new Noticia with this data.
     */
    create: XOR<NoticiaCreateInput, NoticiaUncheckedCreateInput>
    /**
     * In case the Noticia was found with the provided `where` argument, update it with this data.
     */
    update: XOR<NoticiaUpdateInput, NoticiaUncheckedUpdateInput>
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * Noticia delete
   */
  export type NoticiaDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Noticia
     */
    select?: NoticiaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Noticia
     */
    omit?: NoticiaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NoticiaInclude<ExtArgs> | null
    /**
     * Filter which Noticia to delete.
     */
    where: NoticiaWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * Noticia deleteMany
   */
  export type NoticiaDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Noticias to delete
     */
    where?: NoticiaWhereInput
    /**
     * Limit how many Noticias to delete.
     */
    limit?: number
  }

  /**
   * Noticia.categorias
   */
  export type Noticia$categoriasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CatNoticiaXNoticia
     */
    select?: CatNoticiaXNoticiaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CatNoticiaXNoticia
     */
    omit?: CatNoticiaXNoticiaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CatNoticiaXNoticiaInclude<ExtArgs> | null
    where?: CatNoticiaXNoticiaWhereInput
    orderBy?: CatNoticiaXNoticiaOrderByWithRelationInput | CatNoticiaXNoticiaOrderByWithRelationInput[]
    cursor?: CatNoticiaXNoticiaWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CatNoticiaXNoticiaScalarFieldEnum | CatNoticiaXNoticiaScalarFieldEnum[]
  }

  /**
   * Noticia without action
   */
  export type NoticiaDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Noticia
     */
    select?: NoticiaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Noticia
     */
    omit?: NoticiaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NoticiaInclude<ExtArgs> | null
  }


  /**
   * Model Foto
   */

  export type AggregateFoto = {
    _count: FotoCountAggregateOutputType | null
    _avg: FotoAvgAggregateOutputType | null
    _sum: FotoSumAggregateOutputType | null
    _min: FotoMinAggregateOutputType | null
    _max: FotoMaxAggregateOutputType | null
  }

  export type FotoAvgAggregateOutputType = {
    id: number | null
    juegoId: number | null
  }

  export type FotoSumAggregateOutputType = {
    id: number | null
    juegoId: number | null
  }

  export type FotoMinAggregateOutputType = {
    id: number | null
    url: string | null
    juegoId: number | null
  }

  export type FotoMaxAggregateOutputType = {
    id: number | null
    url: string | null
    juegoId: number | null
  }

  export type FotoCountAggregateOutputType = {
    id: number
    url: number
    juegoId: number
    _all: number
  }


  export type FotoAvgAggregateInputType = {
    id?: true
    juegoId?: true
  }

  export type FotoSumAggregateInputType = {
    id?: true
    juegoId?: true
  }

  export type FotoMinAggregateInputType = {
    id?: true
    url?: true
    juegoId?: true
  }

  export type FotoMaxAggregateInputType = {
    id?: true
    url?: true
    juegoId?: true
  }

  export type FotoCountAggregateInputType = {
    id?: true
    url?: true
    juegoId?: true
    _all?: true
  }

  export type FotoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Foto to aggregate.
     */
    where?: FotoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Fotos to fetch.
     */
    orderBy?: FotoOrderByWithRelationInput | FotoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FotoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Fotos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Fotos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Fotos
    **/
    _count?: true | FotoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FotoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FotoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FotoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FotoMaxAggregateInputType
  }

  export type GetFotoAggregateType<T extends FotoAggregateArgs> = {
        [P in keyof T & keyof AggregateFoto]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFoto[P]>
      : GetScalarType<T[P], AggregateFoto[P]>
  }




  export type FotoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FotoWhereInput
    orderBy?: FotoOrderByWithAggregationInput | FotoOrderByWithAggregationInput[]
    by: FotoScalarFieldEnum[] | FotoScalarFieldEnum
    having?: FotoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FotoCountAggregateInputType | true
    _avg?: FotoAvgAggregateInputType
    _sum?: FotoSumAggregateInputType
    _min?: FotoMinAggregateInputType
    _max?: FotoMaxAggregateInputType
  }

  export type FotoGroupByOutputType = {
    id: number
    url: string
    juegoId: number | null
    _count: FotoCountAggregateOutputType | null
    _avg: FotoAvgAggregateOutputType | null
    _sum: FotoSumAggregateOutputType | null
    _min: FotoMinAggregateOutputType | null
    _max: FotoMaxAggregateOutputType | null
  }

  type GetFotoGroupByPayload<T extends FotoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FotoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FotoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FotoGroupByOutputType[P]>
            : GetScalarType<T[P], FotoGroupByOutputType[P]>
        }
      >
    >


  export type FotoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    url?: boolean
    juegoId?: boolean
    juego?: boolean | Foto$juegoArgs<ExtArgs>
    noticia?: boolean | Foto$noticiaArgs<ExtArgs>
  }, ExtArgs["result"]["foto"]>

  export type FotoSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    url?: boolean
    juegoId?: boolean
    juego?: boolean | Foto$juegoArgs<ExtArgs>
  }, ExtArgs["result"]["foto"]>

  export type FotoSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    url?: boolean
    juegoId?: boolean
    juego?: boolean | Foto$juegoArgs<ExtArgs>
  }, ExtArgs["result"]["foto"]>

  export type FotoSelectScalar = {
    id?: boolean
    url?: boolean
    juegoId?: boolean
  }

  export type FotoOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "url" | "juegoId", ExtArgs["result"]["foto"]>
  export type FotoInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    juego?: boolean | Foto$juegoArgs<ExtArgs>
    noticia?: boolean | Foto$noticiaArgs<ExtArgs>
  }
  export type FotoIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    juego?: boolean | Foto$juegoArgs<ExtArgs>
  }
  export type FotoIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    juego?: boolean | Foto$juegoArgs<ExtArgs>
  }

  export type $FotoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Foto"
    objects: {
      juego: Prisma.$JuegoPayload<ExtArgs> | null
      noticia: Prisma.$NoticiaPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      url: string
      juegoId: number | null
    }, ExtArgs["result"]["foto"]>
    composites: {}
  }

  type FotoGetPayload<S extends boolean | null | undefined | FotoDefaultArgs> = $Result.GetResult<Prisma.$FotoPayload, S>

  type FotoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<FotoFindManyArgs, 'select' | 'include' | 'distinct' | 'omit' | 'relationLoadStrategy'> & {
      select?: FotoCountAggregateInputType | true
    }

  export interface FotoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Foto'], meta: { name: 'Foto' } }
    /**
     * Find zero or one Foto that matches the filter.
     * @param {FotoFindUniqueArgs} args - Arguments to find a Foto
     * @example
     * // Get one Foto
     * const foto = await prisma.foto.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FotoFindUniqueArgs>(args: SelectSubset<T, FotoFindUniqueArgs<ExtArgs>>): Prisma__FotoClient<$Result.GetResult<Prisma.$FotoPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Foto that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {FotoFindUniqueOrThrowArgs} args - Arguments to find a Foto
     * @example
     * // Get one Foto
     * const foto = await prisma.foto.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FotoFindUniqueOrThrowArgs>(args: SelectSubset<T, FotoFindUniqueOrThrowArgs<ExtArgs>>): Prisma__FotoClient<$Result.GetResult<Prisma.$FotoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Foto that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FotoFindFirstArgs} args - Arguments to find a Foto
     * @example
     * // Get one Foto
     * const foto = await prisma.foto.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FotoFindFirstArgs>(args?: SelectSubset<T, FotoFindFirstArgs<ExtArgs>>): Prisma__FotoClient<$Result.GetResult<Prisma.$FotoPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Foto that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FotoFindFirstOrThrowArgs} args - Arguments to find a Foto
     * @example
     * // Get one Foto
     * const foto = await prisma.foto.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FotoFindFirstOrThrowArgs>(args?: SelectSubset<T, FotoFindFirstOrThrowArgs<ExtArgs>>): Prisma__FotoClient<$Result.GetResult<Prisma.$FotoPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Fotos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FotoFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Fotos
     * const fotos = await prisma.foto.findMany()
     * 
     * // Get first 10 Fotos
     * const fotos = await prisma.foto.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const fotoWithIdOnly = await prisma.foto.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends FotoFindManyArgs>(args?: SelectSubset<T, FotoFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FotoPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Foto.
     * @param {FotoCreateArgs} args - Arguments to create a Foto.
     * @example
     * // Create one Foto
     * const Foto = await prisma.foto.create({
     *   data: {
     *     // ... data to create a Foto
     *   }
     * })
     * 
     */
    create<T extends FotoCreateArgs>(args: SelectSubset<T, FotoCreateArgs<ExtArgs>>): Prisma__FotoClient<$Result.GetResult<Prisma.$FotoPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Fotos.
     * @param {FotoCreateManyArgs} args - Arguments to create many Fotos.
     * @example
     * // Create many Fotos
     * const foto = await prisma.foto.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends FotoCreateManyArgs>(args?: SelectSubset<T, FotoCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Fotos and returns the data saved in the database.
     * @param {FotoCreateManyAndReturnArgs} args - Arguments to create many Fotos.
     * @example
     * // Create many Fotos
     * const foto = await prisma.foto.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Fotos and only return the `id`
     * const fotoWithIdOnly = await prisma.foto.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends FotoCreateManyAndReturnArgs>(args?: SelectSubset<T, FotoCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FotoPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Foto.
     * @param {FotoDeleteArgs} args - Arguments to delete one Foto.
     * @example
     * // Delete one Foto
     * const Foto = await prisma.foto.delete({
     *   where: {
     *     // ... filter to delete one Foto
     *   }
     * })
     * 
     */
    delete<T extends FotoDeleteArgs>(args: SelectSubset<T, FotoDeleteArgs<ExtArgs>>): Prisma__FotoClient<$Result.GetResult<Prisma.$FotoPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Foto.
     * @param {FotoUpdateArgs} args - Arguments to update one Foto.
     * @example
     * // Update one Foto
     * const foto = await prisma.foto.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends FotoUpdateArgs>(args: SelectSubset<T, FotoUpdateArgs<ExtArgs>>): Prisma__FotoClient<$Result.GetResult<Prisma.$FotoPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Fotos.
     * @param {FotoDeleteManyArgs} args - Arguments to filter Fotos to delete.
     * @example
     * // Delete a few Fotos
     * const { count } = await prisma.foto.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends FotoDeleteManyArgs>(args?: SelectSubset<T, FotoDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Fotos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FotoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Fotos
     * const foto = await prisma.foto.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends FotoUpdateManyArgs>(args: SelectSubset<T, FotoUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Fotos and returns the data updated in the database.
     * @param {FotoUpdateManyAndReturnArgs} args - Arguments to update many Fotos.
     * @example
     * // Update many Fotos
     * const foto = await prisma.foto.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Fotos and only return the `id`
     * const fotoWithIdOnly = await prisma.foto.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends FotoUpdateManyAndReturnArgs>(args: SelectSubset<T, FotoUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FotoPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Foto.
     * @param {FotoUpsertArgs} args - Arguments to update or create a Foto.
     * @example
     * // Update or create a Foto
     * const foto = await prisma.foto.upsert({
     *   create: {
     *     // ... data to create a Foto
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Foto we want to update
     *   }
     * })
     */
    upsert<T extends FotoUpsertArgs>(args: SelectSubset<T, FotoUpsertArgs<ExtArgs>>): Prisma__FotoClient<$Result.GetResult<Prisma.$FotoPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Fotos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FotoCountArgs} args - Arguments to filter Fotos to count.
     * @example
     * // Count the number of Fotos
     * const count = await prisma.foto.count({
     *   where: {
     *     // ... the filter for the Fotos we want to count
     *   }
     * })
    **/
    count<T extends FotoCountArgs>(
      args?: Subset<T, FotoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FotoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Foto.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FotoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FotoAggregateArgs>(args: Subset<T, FotoAggregateArgs>): Prisma.PrismaPromise<GetFotoAggregateType<T>>

    /**
     * Group by Foto.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FotoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FotoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FotoGroupByArgs['orderBy'] }
        : { orderBy?: FotoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FotoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFotoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Foto model
   */
  readonly fields: FotoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Foto.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FotoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    juego<T extends Foto$juegoArgs<ExtArgs> = {}>(args?: Subset<T, Foto$juegoArgs<ExtArgs>>): Prisma__JuegoClient<$Result.GetResult<Prisma.$JuegoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    noticia<T extends Foto$noticiaArgs<ExtArgs> = {}>(args?: Subset<T, Foto$noticiaArgs<ExtArgs>>): Prisma__NoticiaClient<$Result.GetResult<Prisma.$NoticiaPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Foto model
   */
  interface FotoFieldRefs {
    readonly id: FieldRef<"Foto", 'Int'>
    readonly url: FieldRef<"Foto", 'String'>
    readonly juegoId: FieldRef<"Foto", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Foto findUnique
   */
  export type FotoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Foto
     */
    select?: FotoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Foto
     */
    omit?: FotoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FotoInclude<ExtArgs> | null
    /**
     * Filter, which Foto to fetch.
     */
    where: FotoWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * Foto findUniqueOrThrow
   */
  export type FotoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Foto
     */
    select?: FotoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Foto
     */
    omit?: FotoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FotoInclude<ExtArgs> | null
    /**
     * Filter, which Foto to fetch.
     */
    where: FotoWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * Foto findFirst
   */
  export type FotoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Foto
     */
    select?: FotoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Foto
     */
    omit?: FotoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FotoInclude<ExtArgs> | null
    /**
     * Filter, which Foto to fetch.
     */
    where?: FotoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Fotos to fetch.
     */
    orderBy?: FotoOrderByWithRelationInput | FotoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Fotos.
     */
    cursor?: FotoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Fotos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Fotos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Fotos.
     */
    distinct?: FotoScalarFieldEnum | FotoScalarFieldEnum[]
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * Foto findFirstOrThrow
   */
  export type FotoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Foto
     */
    select?: FotoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Foto
     */
    omit?: FotoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FotoInclude<ExtArgs> | null
    /**
     * Filter, which Foto to fetch.
     */
    where?: FotoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Fotos to fetch.
     */
    orderBy?: FotoOrderByWithRelationInput | FotoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Fotos.
     */
    cursor?: FotoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Fotos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Fotos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Fotos.
     */
    distinct?: FotoScalarFieldEnum | FotoScalarFieldEnum[]
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * Foto findMany
   */
  export type FotoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Foto
     */
    select?: FotoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Foto
     */
    omit?: FotoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FotoInclude<ExtArgs> | null
    /**
     * Filter, which Fotos to fetch.
     */
    where?: FotoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Fotos to fetch.
     */
    orderBy?: FotoOrderByWithRelationInput | FotoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Fotos.
     */
    cursor?: FotoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Fotos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Fotos.
     */
    skip?: number
    distinct?: FotoScalarFieldEnum | FotoScalarFieldEnum[]
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * Foto create
   */
  export type FotoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Foto
     */
    select?: FotoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Foto
     */
    omit?: FotoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FotoInclude<ExtArgs> | null
    /**
     * The data needed to create a Foto.
     */
    data: XOR<FotoCreateInput, FotoUncheckedCreateInput>
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * Foto createMany
   */
  export type FotoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Fotos.
     */
    data: FotoCreateManyInput | FotoCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Foto createManyAndReturn
   */
  export type FotoCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Foto
     */
    select?: FotoSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Foto
     */
    omit?: FotoOmit<ExtArgs> | null
    /**
     * The data used to create many Fotos.
     */
    data: FotoCreateManyInput | FotoCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FotoIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Foto update
   */
  export type FotoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Foto
     */
    select?: FotoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Foto
     */
    omit?: FotoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FotoInclude<ExtArgs> | null
    /**
     * The data needed to update a Foto.
     */
    data: XOR<FotoUpdateInput, FotoUncheckedUpdateInput>
    /**
     * Choose, which Foto to update.
     */
    where: FotoWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * Foto updateMany
   */
  export type FotoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Fotos.
     */
    data: XOR<FotoUpdateManyMutationInput, FotoUncheckedUpdateManyInput>
    /**
     * Filter which Fotos to update
     */
    where?: FotoWhereInput
    /**
     * Limit how many Fotos to update.
     */
    limit?: number
  }

  /**
   * Foto updateManyAndReturn
   */
  export type FotoUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Foto
     */
    select?: FotoSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Foto
     */
    omit?: FotoOmit<ExtArgs> | null
    /**
     * The data used to update Fotos.
     */
    data: XOR<FotoUpdateManyMutationInput, FotoUncheckedUpdateManyInput>
    /**
     * Filter which Fotos to update
     */
    where?: FotoWhereInput
    /**
     * Limit how many Fotos to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FotoIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Foto upsert
   */
  export type FotoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Foto
     */
    select?: FotoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Foto
     */
    omit?: FotoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FotoInclude<ExtArgs> | null
    /**
     * The filter to search for the Foto to update in case it exists.
     */
    where: FotoWhereUniqueInput
    /**
     * In case the Foto found by the `where` argument doesn't exist, create a new Foto with this data.
     */
    create: XOR<FotoCreateInput, FotoUncheckedCreateInput>
    /**
     * In case the Foto was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FotoUpdateInput, FotoUncheckedUpdateInput>
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * Foto delete
   */
  export type FotoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Foto
     */
    select?: FotoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Foto
     */
    omit?: FotoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FotoInclude<ExtArgs> | null
    /**
     * Filter which Foto to delete.
     */
    where: FotoWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * Foto deleteMany
   */
  export type FotoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Fotos to delete
     */
    where?: FotoWhereInput
    /**
     * Limit how many Fotos to delete.
     */
    limit?: number
  }

  /**
   * Foto.juego
   */
  export type Foto$juegoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Juego
     */
    select?: JuegoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Juego
     */
    omit?: JuegoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JuegoInclude<ExtArgs> | null
    where?: JuegoWhereInput
  }

  /**
   * Foto.noticia
   */
  export type Foto$noticiaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Noticia
     */
    select?: NoticiaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Noticia
     */
    omit?: NoticiaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NoticiaInclude<ExtArgs> | null
    where?: NoticiaWhereInput
  }

  /**
   * Foto without action
   */
  export type FotoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Foto
     */
    select?: FotoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Foto
     */
    omit?: FotoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FotoInclude<ExtArgs> | null
  }


  /**
   * Model Categoria
   */

  export type AggregateCategoria = {
    _count: CategoriaCountAggregateOutputType | null
    _avg: CategoriaAvgAggregateOutputType | null
    _sum: CategoriaSumAggregateOutputType | null
    _min: CategoriaMinAggregateOutputType | null
    _max: CategoriaMaxAggregateOutputType | null
  }

  export type CategoriaAvgAggregateOutputType = {
    id: number | null
  }

  export type CategoriaSumAggregateOutputType = {
    id: number | null
  }

  export type CategoriaMinAggregateOutputType = {
    id: number | null
    nombre: string | null
  }

  export type CategoriaMaxAggregateOutputType = {
    id: number | null
    nombre: string | null
  }

  export type CategoriaCountAggregateOutputType = {
    id: number
    nombre: number
    _all: number
  }


  export type CategoriaAvgAggregateInputType = {
    id?: true
  }

  export type CategoriaSumAggregateInputType = {
    id?: true
  }

  export type CategoriaMinAggregateInputType = {
    id?: true
    nombre?: true
  }

  export type CategoriaMaxAggregateInputType = {
    id?: true
    nombre?: true
  }

  export type CategoriaCountAggregateInputType = {
    id?: true
    nombre?: true
    _all?: true
  }

  export type CategoriaAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Categoria to aggregate.
     */
    where?: CategoriaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categorias to fetch.
     */
    orderBy?: CategoriaOrderByWithRelationInput | CategoriaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CategoriaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categorias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categorias.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Categorias
    **/
    _count?: true | CategoriaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CategoriaAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CategoriaSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CategoriaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CategoriaMaxAggregateInputType
  }

  export type GetCategoriaAggregateType<T extends CategoriaAggregateArgs> = {
        [P in keyof T & keyof AggregateCategoria]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCategoria[P]>
      : GetScalarType<T[P], AggregateCategoria[P]>
  }




  export type CategoriaGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CategoriaWhereInput
    orderBy?: CategoriaOrderByWithAggregationInput | CategoriaOrderByWithAggregationInput[]
    by: CategoriaScalarFieldEnum[] | CategoriaScalarFieldEnum
    having?: CategoriaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CategoriaCountAggregateInputType | true
    _avg?: CategoriaAvgAggregateInputType
    _sum?: CategoriaSumAggregateInputType
    _min?: CategoriaMinAggregateInputType
    _max?: CategoriaMaxAggregateInputType
  }

  export type CategoriaGroupByOutputType = {
    id: number
    nombre: string
    _count: CategoriaCountAggregateOutputType | null
    _avg: CategoriaAvgAggregateOutputType | null
    _sum: CategoriaSumAggregateOutputType | null
    _min: CategoriaMinAggregateOutputType | null
    _max: CategoriaMaxAggregateOutputType | null
  }

  type GetCategoriaGroupByPayload<T extends CategoriaGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CategoriaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CategoriaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CategoriaGroupByOutputType[P]>
            : GetScalarType<T[P], CategoriaGroupByOutputType[P]>
        }
      >
    >


  export type CategoriaSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nombre?: boolean
    juegos?: boolean | Categoria$juegosArgs<ExtArgs>
    _count?: boolean | CategoriaCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["categoria"]>

  export type CategoriaSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nombre?: boolean
  }, ExtArgs["result"]["categoria"]>

  export type CategoriaSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nombre?: boolean
  }, ExtArgs["result"]["categoria"]>

  export type CategoriaSelectScalar = {
    id?: boolean
    nombre?: boolean
  }

  export type CategoriaOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "nombre", ExtArgs["result"]["categoria"]>
  export type CategoriaInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    juegos?: boolean | Categoria$juegosArgs<ExtArgs>
    _count?: boolean | CategoriaCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type CategoriaIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type CategoriaIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $CategoriaPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Categoria"
    objects: {
      juegos: Prisma.$CategoriaXJuegoPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      nombre: string
    }, ExtArgs["result"]["categoria"]>
    composites: {}
  }

  type CategoriaGetPayload<S extends boolean | null | undefined | CategoriaDefaultArgs> = $Result.GetResult<Prisma.$CategoriaPayload, S>

  type CategoriaCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CategoriaFindManyArgs, 'select' | 'include' | 'distinct' | 'omit' | 'relationLoadStrategy'> & {
      select?: CategoriaCountAggregateInputType | true
    }

  export interface CategoriaDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Categoria'], meta: { name: 'Categoria' } }
    /**
     * Find zero or one Categoria that matches the filter.
     * @param {CategoriaFindUniqueArgs} args - Arguments to find a Categoria
     * @example
     * // Get one Categoria
     * const categoria = await prisma.categoria.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CategoriaFindUniqueArgs>(args: SelectSubset<T, CategoriaFindUniqueArgs<ExtArgs>>): Prisma__CategoriaClient<$Result.GetResult<Prisma.$CategoriaPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Categoria that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CategoriaFindUniqueOrThrowArgs} args - Arguments to find a Categoria
     * @example
     * // Get one Categoria
     * const categoria = await prisma.categoria.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CategoriaFindUniqueOrThrowArgs>(args: SelectSubset<T, CategoriaFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CategoriaClient<$Result.GetResult<Prisma.$CategoriaPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Categoria that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoriaFindFirstArgs} args - Arguments to find a Categoria
     * @example
     * // Get one Categoria
     * const categoria = await prisma.categoria.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CategoriaFindFirstArgs>(args?: SelectSubset<T, CategoriaFindFirstArgs<ExtArgs>>): Prisma__CategoriaClient<$Result.GetResult<Prisma.$CategoriaPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Categoria that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoriaFindFirstOrThrowArgs} args - Arguments to find a Categoria
     * @example
     * // Get one Categoria
     * const categoria = await prisma.categoria.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CategoriaFindFirstOrThrowArgs>(args?: SelectSubset<T, CategoriaFindFirstOrThrowArgs<ExtArgs>>): Prisma__CategoriaClient<$Result.GetResult<Prisma.$CategoriaPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Categorias that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoriaFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Categorias
     * const categorias = await prisma.categoria.findMany()
     * 
     * // Get first 10 Categorias
     * const categorias = await prisma.categoria.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const categoriaWithIdOnly = await prisma.categoria.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CategoriaFindManyArgs>(args?: SelectSubset<T, CategoriaFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CategoriaPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Categoria.
     * @param {CategoriaCreateArgs} args - Arguments to create a Categoria.
     * @example
     * // Create one Categoria
     * const Categoria = await prisma.categoria.create({
     *   data: {
     *     // ... data to create a Categoria
     *   }
     * })
     * 
     */
    create<T extends CategoriaCreateArgs>(args: SelectSubset<T, CategoriaCreateArgs<ExtArgs>>): Prisma__CategoriaClient<$Result.GetResult<Prisma.$CategoriaPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Categorias.
     * @param {CategoriaCreateManyArgs} args - Arguments to create many Categorias.
     * @example
     * // Create many Categorias
     * const categoria = await prisma.categoria.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CategoriaCreateManyArgs>(args?: SelectSubset<T, CategoriaCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Categorias and returns the data saved in the database.
     * @param {CategoriaCreateManyAndReturnArgs} args - Arguments to create many Categorias.
     * @example
     * // Create many Categorias
     * const categoria = await prisma.categoria.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Categorias and only return the `id`
     * const categoriaWithIdOnly = await prisma.categoria.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CategoriaCreateManyAndReturnArgs>(args?: SelectSubset<T, CategoriaCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CategoriaPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Categoria.
     * @param {CategoriaDeleteArgs} args - Arguments to delete one Categoria.
     * @example
     * // Delete one Categoria
     * const Categoria = await prisma.categoria.delete({
     *   where: {
     *     // ... filter to delete one Categoria
     *   }
     * })
     * 
     */
    delete<T extends CategoriaDeleteArgs>(args: SelectSubset<T, CategoriaDeleteArgs<ExtArgs>>): Prisma__CategoriaClient<$Result.GetResult<Prisma.$CategoriaPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Categoria.
     * @param {CategoriaUpdateArgs} args - Arguments to update one Categoria.
     * @example
     * // Update one Categoria
     * const categoria = await prisma.categoria.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CategoriaUpdateArgs>(args: SelectSubset<T, CategoriaUpdateArgs<ExtArgs>>): Prisma__CategoriaClient<$Result.GetResult<Prisma.$CategoriaPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Categorias.
     * @param {CategoriaDeleteManyArgs} args - Arguments to filter Categorias to delete.
     * @example
     * // Delete a few Categorias
     * const { count } = await prisma.categoria.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CategoriaDeleteManyArgs>(args?: SelectSubset<T, CategoriaDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Categorias.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoriaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Categorias
     * const categoria = await prisma.categoria.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CategoriaUpdateManyArgs>(args: SelectSubset<T, CategoriaUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Categorias and returns the data updated in the database.
     * @param {CategoriaUpdateManyAndReturnArgs} args - Arguments to update many Categorias.
     * @example
     * // Update many Categorias
     * const categoria = await prisma.categoria.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Categorias and only return the `id`
     * const categoriaWithIdOnly = await prisma.categoria.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CategoriaUpdateManyAndReturnArgs>(args: SelectSubset<T, CategoriaUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CategoriaPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Categoria.
     * @param {CategoriaUpsertArgs} args - Arguments to update or create a Categoria.
     * @example
     * // Update or create a Categoria
     * const categoria = await prisma.categoria.upsert({
     *   create: {
     *     // ... data to create a Categoria
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Categoria we want to update
     *   }
     * })
     */
    upsert<T extends CategoriaUpsertArgs>(args: SelectSubset<T, CategoriaUpsertArgs<ExtArgs>>): Prisma__CategoriaClient<$Result.GetResult<Prisma.$CategoriaPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Categorias.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoriaCountArgs} args - Arguments to filter Categorias to count.
     * @example
     * // Count the number of Categorias
     * const count = await prisma.categoria.count({
     *   where: {
     *     // ... the filter for the Categorias we want to count
     *   }
     * })
    **/
    count<T extends CategoriaCountArgs>(
      args?: Subset<T, CategoriaCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CategoriaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Categoria.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoriaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CategoriaAggregateArgs>(args: Subset<T, CategoriaAggregateArgs>): Prisma.PrismaPromise<GetCategoriaAggregateType<T>>

    /**
     * Group by Categoria.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoriaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CategoriaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CategoriaGroupByArgs['orderBy'] }
        : { orderBy?: CategoriaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CategoriaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCategoriaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Categoria model
   */
  readonly fields: CategoriaFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Categoria.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CategoriaClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    juegos<T extends Categoria$juegosArgs<ExtArgs> = {}>(args?: Subset<T, Categoria$juegosArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CategoriaXJuegoPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Categoria model
   */
  interface CategoriaFieldRefs {
    readonly id: FieldRef<"Categoria", 'Int'>
    readonly nombre: FieldRef<"Categoria", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Categoria findUnique
   */
  export type CategoriaFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Categoria
     */
    select?: CategoriaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Categoria
     */
    omit?: CategoriaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoriaInclude<ExtArgs> | null
    /**
     * Filter, which Categoria to fetch.
     */
    where: CategoriaWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * Categoria findUniqueOrThrow
   */
  export type CategoriaFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Categoria
     */
    select?: CategoriaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Categoria
     */
    omit?: CategoriaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoriaInclude<ExtArgs> | null
    /**
     * Filter, which Categoria to fetch.
     */
    where: CategoriaWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * Categoria findFirst
   */
  export type CategoriaFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Categoria
     */
    select?: CategoriaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Categoria
     */
    omit?: CategoriaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoriaInclude<ExtArgs> | null
    /**
     * Filter, which Categoria to fetch.
     */
    where?: CategoriaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categorias to fetch.
     */
    orderBy?: CategoriaOrderByWithRelationInput | CategoriaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Categorias.
     */
    cursor?: CategoriaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categorias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categorias.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Categorias.
     */
    distinct?: CategoriaScalarFieldEnum | CategoriaScalarFieldEnum[]
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * Categoria findFirstOrThrow
   */
  export type CategoriaFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Categoria
     */
    select?: CategoriaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Categoria
     */
    omit?: CategoriaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoriaInclude<ExtArgs> | null
    /**
     * Filter, which Categoria to fetch.
     */
    where?: CategoriaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categorias to fetch.
     */
    orderBy?: CategoriaOrderByWithRelationInput | CategoriaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Categorias.
     */
    cursor?: CategoriaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categorias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categorias.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Categorias.
     */
    distinct?: CategoriaScalarFieldEnum | CategoriaScalarFieldEnum[]
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * Categoria findMany
   */
  export type CategoriaFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Categoria
     */
    select?: CategoriaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Categoria
     */
    omit?: CategoriaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoriaInclude<ExtArgs> | null
    /**
     * Filter, which Categorias to fetch.
     */
    where?: CategoriaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categorias to fetch.
     */
    orderBy?: CategoriaOrderByWithRelationInput | CategoriaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Categorias.
     */
    cursor?: CategoriaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categorias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categorias.
     */
    skip?: number
    distinct?: CategoriaScalarFieldEnum | CategoriaScalarFieldEnum[]
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * Categoria create
   */
  export type CategoriaCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Categoria
     */
    select?: CategoriaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Categoria
     */
    omit?: CategoriaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoriaInclude<ExtArgs> | null
    /**
     * The data needed to create a Categoria.
     */
    data: XOR<CategoriaCreateInput, CategoriaUncheckedCreateInput>
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * Categoria createMany
   */
  export type CategoriaCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Categorias.
     */
    data: CategoriaCreateManyInput | CategoriaCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Categoria createManyAndReturn
   */
  export type CategoriaCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Categoria
     */
    select?: CategoriaSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Categoria
     */
    omit?: CategoriaOmit<ExtArgs> | null
    /**
     * The data used to create many Categorias.
     */
    data: CategoriaCreateManyInput | CategoriaCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Categoria update
   */
  export type CategoriaUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Categoria
     */
    select?: CategoriaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Categoria
     */
    omit?: CategoriaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoriaInclude<ExtArgs> | null
    /**
     * The data needed to update a Categoria.
     */
    data: XOR<CategoriaUpdateInput, CategoriaUncheckedUpdateInput>
    /**
     * Choose, which Categoria to update.
     */
    where: CategoriaWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * Categoria updateMany
   */
  export type CategoriaUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Categorias.
     */
    data: XOR<CategoriaUpdateManyMutationInput, CategoriaUncheckedUpdateManyInput>
    /**
     * Filter which Categorias to update
     */
    where?: CategoriaWhereInput
    /**
     * Limit how many Categorias to update.
     */
    limit?: number
  }

  /**
   * Categoria updateManyAndReturn
   */
  export type CategoriaUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Categoria
     */
    select?: CategoriaSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Categoria
     */
    omit?: CategoriaOmit<ExtArgs> | null
    /**
     * The data used to update Categorias.
     */
    data: XOR<CategoriaUpdateManyMutationInput, CategoriaUncheckedUpdateManyInput>
    /**
     * Filter which Categorias to update
     */
    where?: CategoriaWhereInput
    /**
     * Limit how many Categorias to update.
     */
    limit?: number
  }

  /**
   * Categoria upsert
   */
  export type CategoriaUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Categoria
     */
    select?: CategoriaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Categoria
     */
    omit?: CategoriaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoriaInclude<ExtArgs> | null
    /**
     * The filter to search for the Categoria to update in case it exists.
     */
    where: CategoriaWhereUniqueInput
    /**
     * In case the Categoria found by the `where` argument doesn't exist, create a new Categoria with this data.
     */
    create: XOR<CategoriaCreateInput, CategoriaUncheckedCreateInput>
    /**
     * In case the Categoria was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CategoriaUpdateInput, CategoriaUncheckedUpdateInput>
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * Categoria delete
   */
  export type CategoriaDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Categoria
     */
    select?: CategoriaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Categoria
     */
    omit?: CategoriaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoriaInclude<ExtArgs> | null
    /**
     * Filter which Categoria to delete.
     */
    where: CategoriaWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * Categoria deleteMany
   */
  export type CategoriaDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Categorias to delete
     */
    where?: CategoriaWhereInput
    /**
     * Limit how many Categorias to delete.
     */
    limit?: number
  }

  /**
   * Categoria.juegos
   */
  export type Categoria$juegosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CategoriaXJuego
     */
    select?: CategoriaXJuegoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CategoriaXJuego
     */
    omit?: CategoriaXJuegoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoriaXJuegoInclude<ExtArgs> | null
    where?: CategoriaXJuegoWhereInput
    orderBy?: CategoriaXJuegoOrderByWithRelationInput | CategoriaXJuegoOrderByWithRelationInput[]
    cursor?: CategoriaXJuegoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CategoriaXJuegoScalarFieldEnum | CategoriaXJuegoScalarFieldEnum[]
  }

  /**
   * Categoria without action
   */
  export type CategoriaDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Categoria
     */
    select?: CategoriaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Categoria
     */
    omit?: CategoriaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoriaInclude<ExtArgs> | null
  }


  /**
   * Model Plataforma
   */

  export type AggregatePlataforma = {
    _count: PlataformaCountAggregateOutputType | null
    _avg: PlataformaAvgAggregateOutputType | null
    _sum: PlataformaSumAggregateOutputType | null
    _min: PlataformaMinAggregateOutputType | null
    _max: PlataformaMaxAggregateOutputType | null
  }

  export type PlataformaAvgAggregateOutputType = {
    id: number | null
  }

  export type PlataformaSumAggregateOutputType = {
    id: number | null
  }

  export type PlataformaMinAggregateOutputType = {
    id: number | null
    nombre: string | null
    color: string | null
  }

  export type PlataformaMaxAggregateOutputType = {
    id: number | null
    nombre: string | null
    color: string | null
  }

  export type PlataformaCountAggregateOutputType = {
    id: number
    nombre: number
    color: number
    _all: number
  }


  export type PlataformaAvgAggregateInputType = {
    id?: true
  }

  export type PlataformaSumAggregateInputType = {
    id?: true
  }

  export type PlataformaMinAggregateInputType = {
    id?: true
    nombre?: true
    color?: true
  }

  export type PlataformaMaxAggregateInputType = {
    id?: true
    nombre?: true
    color?: true
  }

  export type PlataformaCountAggregateInputType = {
    id?: true
    nombre?: true
    color?: true
    _all?: true
  }

  export type PlataformaAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Plataforma to aggregate.
     */
    where?: PlataformaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Plataformas to fetch.
     */
    orderBy?: PlataformaOrderByWithRelationInput | PlataformaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PlataformaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Plataformas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Plataformas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Plataformas
    **/
    _count?: true | PlataformaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PlataformaAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PlataformaSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PlataformaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PlataformaMaxAggregateInputType
  }

  export type GetPlataformaAggregateType<T extends PlataformaAggregateArgs> = {
        [P in keyof T & keyof AggregatePlataforma]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePlataforma[P]>
      : GetScalarType<T[P], AggregatePlataforma[P]>
  }




  export type PlataformaGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PlataformaWhereInput
    orderBy?: PlataformaOrderByWithAggregationInput | PlataformaOrderByWithAggregationInput[]
    by: PlataformaScalarFieldEnum[] | PlataformaScalarFieldEnum
    having?: PlataformaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PlataformaCountAggregateInputType | true
    _avg?: PlataformaAvgAggregateInputType
    _sum?: PlataformaSumAggregateInputType
    _min?: PlataformaMinAggregateInputType
    _max?: PlataformaMaxAggregateInputType
  }

  export type PlataformaGroupByOutputType = {
    id: number
    nombre: string
    color: string
    _count: PlataformaCountAggregateOutputType | null
    _avg: PlataformaAvgAggregateOutputType | null
    _sum: PlataformaSumAggregateOutputType | null
    _min: PlataformaMinAggregateOutputType | null
    _max: PlataformaMaxAggregateOutputType | null
  }

  type GetPlataformaGroupByPayload<T extends PlataformaGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PlataformaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PlataformaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PlataformaGroupByOutputType[P]>
            : GetScalarType<T[P], PlataformaGroupByOutputType[P]>
        }
      >
    >


  export type PlataformaSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nombre?: boolean
    color?: boolean
    juegos?: boolean | Plataforma$juegosArgs<ExtArgs>
    _count?: boolean | PlataformaCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["plataforma"]>

  export type PlataformaSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nombre?: boolean
    color?: boolean
  }, ExtArgs["result"]["plataforma"]>

  export type PlataformaSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nombre?: boolean
    color?: boolean
  }, ExtArgs["result"]["plataforma"]>

  export type PlataformaSelectScalar = {
    id?: boolean
    nombre?: boolean
    color?: boolean
  }

  export type PlataformaOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "nombre" | "color", ExtArgs["result"]["plataforma"]>
  export type PlataformaInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    juegos?: boolean | Plataforma$juegosArgs<ExtArgs>
    _count?: boolean | PlataformaCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type PlataformaIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type PlataformaIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $PlataformaPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Plataforma"
    objects: {
      juegos: Prisma.$PlataformaXJuegoPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      nombre: string
      color: string
    }, ExtArgs["result"]["plataforma"]>
    composites: {}
  }

  type PlataformaGetPayload<S extends boolean | null | undefined | PlataformaDefaultArgs> = $Result.GetResult<Prisma.$PlataformaPayload, S>

  type PlataformaCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PlataformaFindManyArgs, 'select' | 'include' | 'distinct' | 'omit' | 'relationLoadStrategy'> & {
      select?: PlataformaCountAggregateInputType | true
    }

  export interface PlataformaDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Plataforma'], meta: { name: 'Plataforma' } }
    /**
     * Find zero or one Plataforma that matches the filter.
     * @param {PlataformaFindUniqueArgs} args - Arguments to find a Plataforma
     * @example
     * // Get one Plataforma
     * const plataforma = await prisma.plataforma.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PlataformaFindUniqueArgs>(args: SelectSubset<T, PlataformaFindUniqueArgs<ExtArgs>>): Prisma__PlataformaClient<$Result.GetResult<Prisma.$PlataformaPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Plataforma that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PlataformaFindUniqueOrThrowArgs} args - Arguments to find a Plataforma
     * @example
     * // Get one Plataforma
     * const plataforma = await prisma.plataforma.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PlataformaFindUniqueOrThrowArgs>(args: SelectSubset<T, PlataformaFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PlataformaClient<$Result.GetResult<Prisma.$PlataformaPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Plataforma that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlataformaFindFirstArgs} args - Arguments to find a Plataforma
     * @example
     * // Get one Plataforma
     * const plataforma = await prisma.plataforma.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PlataformaFindFirstArgs>(args?: SelectSubset<T, PlataformaFindFirstArgs<ExtArgs>>): Prisma__PlataformaClient<$Result.GetResult<Prisma.$PlataformaPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Plataforma that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlataformaFindFirstOrThrowArgs} args - Arguments to find a Plataforma
     * @example
     * // Get one Plataforma
     * const plataforma = await prisma.plataforma.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PlataformaFindFirstOrThrowArgs>(args?: SelectSubset<T, PlataformaFindFirstOrThrowArgs<ExtArgs>>): Prisma__PlataformaClient<$Result.GetResult<Prisma.$PlataformaPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Plataformas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlataformaFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Plataformas
     * const plataformas = await prisma.plataforma.findMany()
     * 
     * // Get first 10 Plataformas
     * const plataformas = await prisma.plataforma.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const plataformaWithIdOnly = await prisma.plataforma.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PlataformaFindManyArgs>(args?: SelectSubset<T, PlataformaFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlataformaPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Plataforma.
     * @param {PlataformaCreateArgs} args - Arguments to create a Plataforma.
     * @example
     * // Create one Plataforma
     * const Plataforma = await prisma.plataforma.create({
     *   data: {
     *     // ... data to create a Plataforma
     *   }
     * })
     * 
     */
    create<T extends PlataformaCreateArgs>(args: SelectSubset<T, PlataformaCreateArgs<ExtArgs>>): Prisma__PlataformaClient<$Result.GetResult<Prisma.$PlataformaPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Plataformas.
     * @param {PlataformaCreateManyArgs} args - Arguments to create many Plataformas.
     * @example
     * // Create many Plataformas
     * const plataforma = await prisma.plataforma.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PlataformaCreateManyArgs>(args?: SelectSubset<T, PlataformaCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Plataformas and returns the data saved in the database.
     * @param {PlataformaCreateManyAndReturnArgs} args - Arguments to create many Plataformas.
     * @example
     * // Create many Plataformas
     * const plataforma = await prisma.plataforma.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Plataformas and only return the `id`
     * const plataformaWithIdOnly = await prisma.plataforma.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PlataformaCreateManyAndReturnArgs>(args?: SelectSubset<T, PlataformaCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlataformaPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Plataforma.
     * @param {PlataformaDeleteArgs} args - Arguments to delete one Plataforma.
     * @example
     * // Delete one Plataforma
     * const Plataforma = await prisma.plataforma.delete({
     *   where: {
     *     // ... filter to delete one Plataforma
     *   }
     * })
     * 
     */
    delete<T extends PlataformaDeleteArgs>(args: SelectSubset<T, PlataformaDeleteArgs<ExtArgs>>): Prisma__PlataformaClient<$Result.GetResult<Prisma.$PlataformaPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Plataforma.
     * @param {PlataformaUpdateArgs} args - Arguments to update one Plataforma.
     * @example
     * // Update one Plataforma
     * const plataforma = await prisma.plataforma.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PlataformaUpdateArgs>(args: SelectSubset<T, PlataformaUpdateArgs<ExtArgs>>): Prisma__PlataformaClient<$Result.GetResult<Prisma.$PlataformaPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Plataformas.
     * @param {PlataformaDeleteManyArgs} args - Arguments to filter Plataformas to delete.
     * @example
     * // Delete a few Plataformas
     * const { count } = await prisma.plataforma.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PlataformaDeleteManyArgs>(args?: SelectSubset<T, PlataformaDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Plataformas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlataformaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Plataformas
     * const plataforma = await prisma.plataforma.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PlataformaUpdateManyArgs>(args: SelectSubset<T, PlataformaUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Plataformas and returns the data updated in the database.
     * @param {PlataformaUpdateManyAndReturnArgs} args - Arguments to update many Plataformas.
     * @example
     * // Update many Plataformas
     * const plataforma = await prisma.plataforma.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Plataformas and only return the `id`
     * const plataformaWithIdOnly = await prisma.plataforma.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PlataformaUpdateManyAndReturnArgs>(args: SelectSubset<T, PlataformaUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlataformaPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Plataforma.
     * @param {PlataformaUpsertArgs} args - Arguments to update or create a Plataforma.
     * @example
     * // Update or create a Plataforma
     * const plataforma = await prisma.plataforma.upsert({
     *   create: {
     *     // ... data to create a Plataforma
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Plataforma we want to update
     *   }
     * })
     */
    upsert<T extends PlataformaUpsertArgs>(args: SelectSubset<T, PlataformaUpsertArgs<ExtArgs>>): Prisma__PlataformaClient<$Result.GetResult<Prisma.$PlataformaPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Plataformas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlataformaCountArgs} args - Arguments to filter Plataformas to count.
     * @example
     * // Count the number of Plataformas
     * const count = await prisma.plataforma.count({
     *   where: {
     *     // ... the filter for the Plataformas we want to count
     *   }
     * })
    **/
    count<T extends PlataformaCountArgs>(
      args?: Subset<T, PlataformaCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PlataformaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Plataforma.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlataformaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PlataformaAggregateArgs>(args: Subset<T, PlataformaAggregateArgs>): Prisma.PrismaPromise<GetPlataformaAggregateType<T>>

    /**
     * Group by Plataforma.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlataformaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PlataformaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PlataformaGroupByArgs['orderBy'] }
        : { orderBy?: PlataformaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PlataformaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPlataformaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Plataforma model
   */
  readonly fields: PlataformaFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Plataforma.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PlataformaClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    juegos<T extends Plataforma$juegosArgs<ExtArgs> = {}>(args?: Subset<T, Plataforma$juegosArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlataformaXJuegoPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Plataforma model
   */
  interface PlataformaFieldRefs {
    readonly id: FieldRef<"Plataforma", 'Int'>
    readonly nombre: FieldRef<"Plataforma", 'String'>
    readonly color: FieldRef<"Plataforma", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Plataforma findUnique
   */
  export type PlataformaFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Plataforma
     */
    select?: PlataformaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Plataforma
     */
    omit?: PlataformaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlataformaInclude<ExtArgs> | null
    /**
     * Filter, which Plataforma to fetch.
     */
    where: PlataformaWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * Plataforma findUniqueOrThrow
   */
  export type PlataformaFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Plataforma
     */
    select?: PlataformaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Plataforma
     */
    omit?: PlataformaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlataformaInclude<ExtArgs> | null
    /**
     * Filter, which Plataforma to fetch.
     */
    where: PlataformaWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * Plataforma findFirst
   */
  export type PlataformaFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Plataforma
     */
    select?: PlataformaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Plataforma
     */
    omit?: PlataformaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlataformaInclude<ExtArgs> | null
    /**
     * Filter, which Plataforma to fetch.
     */
    where?: PlataformaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Plataformas to fetch.
     */
    orderBy?: PlataformaOrderByWithRelationInput | PlataformaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Plataformas.
     */
    cursor?: PlataformaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Plataformas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Plataformas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Plataformas.
     */
    distinct?: PlataformaScalarFieldEnum | PlataformaScalarFieldEnum[]
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * Plataforma findFirstOrThrow
   */
  export type PlataformaFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Plataforma
     */
    select?: PlataformaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Plataforma
     */
    omit?: PlataformaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlataformaInclude<ExtArgs> | null
    /**
     * Filter, which Plataforma to fetch.
     */
    where?: PlataformaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Plataformas to fetch.
     */
    orderBy?: PlataformaOrderByWithRelationInput | PlataformaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Plataformas.
     */
    cursor?: PlataformaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Plataformas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Plataformas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Plataformas.
     */
    distinct?: PlataformaScalarFieldEnum | PlataformaScalarFieldEnum[]
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * Plataforma findMany
   */
  export type PlataformaFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Plataforma
     */
    select?: PlataformaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Plataforma
     */
    omit?: PlataformaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlataformaInclude<ExtArgs> | null
    /**
     * Filter, which Plataformas to fetch.
     */
    where?: PlataformaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Plataformas to fetch.
     */
    orderBy?: PlataformaOrderByWithRelationInput | PlataformaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Plataformas.
     */
    cursor?: PlataformaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Plataformas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Plataformas.
     */
    skip?: number
    distinct?: PlataformaScalarFieldEnum | PlataformaScalarFieldEnum[]
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * Plataforma create
   */
  export type PlataformaCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Plataforma
     */
    select?: PlataformaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Plataforma
     */
    omit?: PlataformaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlataformaInclude<ExtArgs> | null
    /**
     * The data needed to create a Plataforma.
     */
    data: XOR<PlataformaCreateInput, PlataformaUncheckedCreateInput>
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * Plataforma createMany
   */
  export type PlataformaCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Plataformas.
     */
    data: PlataformaCreateManyInput | PlataformaCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Plataforma createManyAndReturn
   */
  export type PlataformaCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Plataforma
     */
    select?: PlataformaSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Plataforma
     */
    omit?: PlataformaOmit<ExtArgs> | null
    /**
     * The data used to create many Plataformas.
     */
    data: PlataformaCreateManyInput | PlataformaCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Plataforma update
   */
  export type PlataformaUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Plataforma
     */
    select?: PlataformaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Plataforma
     */
    omit?: PlataformaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlataformaInclude<ExtArgs> | null
    /**
     * The data needed to update a Plataforma.
     */
    data: XOR<PlataformaUpdateInput, PlataformaUncheckedUpdateInput>
    /**
     * Choose, which Plataforma to update.
     */
    where: PlataformaWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * Plataforma updateMany
   */
  export type PlataformaUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Plataformas.
     */
    data: XOR<PlataformaUpdateManyMutationInput, PlataformaUncheckedUpdateManyInput>
    /**
     * Filter which Plataformas to update
     */
    where?: PlataformaWhereInput
    /**
     * Limit how many Plataformas to update.
     */
    limit?: number
  }

  /**
   * Plataforma updateManyAndReturn
   */
  export type PlataformaUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Plataforma
     */
    select?: PlataformaSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Plataforma
     */
    omit?: PlataformaOmit<ExtArgs> | null
    /**
     * The data used to update Plataformas.
     */
    data: XOR<PlataformaUpdateManyMutationInput, PlataformaUncheckedUpdateManyInput>
    /**
     * Filter which Plataformas to update
     */
    where?: PlataformaWhereInput
    /**
     * Limit how many Plataformas to update.
     */
    limit?: number
  }

  /**
   * Plataforma upsert
   */
  export type PlataformaUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Plataforma
     */
    select?: PlataformaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Plataforma
     */
    omit?: PlataformaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlataformaInclude<ExtArgs> | null
    /**
     * The filter to search for the Plataforma to update in case it exists.
     */
    where: PlataformaWhereUniqueInput
    /**
     * In case the Plataforma found by the `where` argument doesn't exist, create a new Plataforma with this data.
     */
    create: XOR<PlataformaCreateInput, PlataformaUncheckedCreateInput>
    /**
     * In case the Plataforma was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PlataformaUpdateInput, PlataformaUncheckedUpdateInput>
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * Plataforma delete
   */
  export type PlataformaDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Plataforma
     */
    select?: PlataformaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Plataforma
     */
    omit?: PlataformaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlataformaInclude<ExtArgs> | null
    /**
     * Filter which Plataforma to delete.
     */
    where: PlataformaWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * Plataforma deleteMany
   */
  export type PlataformaDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Plataformas to delete
     */
    where?: PlataformaWhereInput
    /**
     * Limit how many Plataformas to delete.
     */
    limit?: number
  }

  /**
   * Plataforma.juegos
   */
  export type Plataforma$juegosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlataformaXJuego
     */
    select?: PlataformaXJuegoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlataformaXJuego
     */
    omit?: PlataformaXJuegoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlataformaXJuegoInclude<ExtArgs> | null
    where?: PlataformaXJuegoWhereInput
    orderBy?: PlataformaXJuegoOrderByWithRelationInput | PlataformaXJuegoOrderByWithRelationInput[]
    cursor?: PlataformaXJuegoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PlataformaXJuegoScalarFieldEnum | PlataformaXJuegoScalarFieldEnum[]
  }

  /**
   * Plataforma without action
   */
  export type PlataformaDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Plataforma
     */
    select?: PlataformaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Plataforma
     */
    omit?: PlataformaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlataformaInclude<ExtArgs> | null
  }


  /**
   * Model Venta
   */

  export type AggregateVenta = {
    _count: VentaCountAggregateOutputType | null
    _avg: VentaAvgAggregateOutputType | null
    _sum: VentaSumAggregateOutputType | null
    _min: VentaMinAggregateOutputType | null
    _max: VentaMaxAggregateOutputType | null
  }

  export type VentaAvgAggregateOutputType = {
    id: number | null
    total: number | null
    usuarioId: number | null
  }

  export type VentaSumAggregateOutputType = {
    id: number | null
    total: number | null
    usuarioId: number | null
  }

  export type VentaMinAggregateOutputType = {
    id: number | null
    total: number | null
    fechaVenta: Date | null
    usuarioId: number | null
  }

  export type VentaMaxAggregateOutputType = {
    id: number | null
    total: number | null
    fechaVenta: Date | null
    usuarioId: number | null
  }

  export type VentaCountAggregateOutputType = {
    id: number
    total: number
    fechaVenta: number
    usuarioId: number
    _all: number
  }


  export type VentaAvgAggregateInputType = {
    id?: true
    total?: true
    usuarioId?: true
  }

  export type VentaSumAggregateInputType = {
    id?: true
    total?: true
    usuarioId?: true
  }

  export type VentaMinAggregateInputType = {
    id?: true
    total?: true
    fechaVenta?: true
    usuarioId?: true
  }

  export type VentaMaxAggregateInputType = {
    id?: true
    total?: true
    fechaVenta?: true
    usuarioId?: true
  }

  export type VentaCountAggregateInputType = {
    id?: true
    total?: true
    fechaVenta?: true
    usuarioId?: true
    _all?: true
  }

  export type VentaAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Venta to aggregate.
     */
    where?: VentaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Ventas to fetch.
     */
    orderBy?: VentaOrderByWithRelationInput | VentaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: VentaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Ventas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Ventas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Ventas
    **/
    _count?: true | VentaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: VentaAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: VentaSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: VentaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: VentaMaxAggregateInputType
  }

  export type GetVentaAggregateType<T extends VentaAggregateArgs> = {
        [P in keyof T & keyof AggregateVenta]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateVenta[P]>
      : GetScalarType<T[P], AggregateVenta[P]>
  }




  export type VentaGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VentaWhereInput
    orderBy?: VentaOrderByWithAggregationInput | VentaOrderByWithAggregationInput[]
    by: VentaScalarFieldEnum[] | VentaScalarFieldEnum
    having?: VentaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: VentaCountAggregateInputType | true
    _avg?: VentaAvgAggregateInputType
    _sum?: VentaSumAggregateInputType
    _min?: VentaMinAggregateInputType
    _max?: VentaMaxAggregateInputType
  }

  export type VentaGroupByOutputType = {
    id: number
    total: number
    fechaVenta: Date
    usuarioId: number
    _count: VentaCountAggregateOutputType | null
    _avg: VentaAvgAggregateOutputType | null
    _sum: VentaSumAggregateOutputType | null
    _min: VentaMinAggregateOutputType | null
    _max: VentaMaxAggregateOutputType | null
  }

  type GetVentaGroupByPayload<T extends VentaGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<VentaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof VentaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], VentaGroupByOutputType[P]>
            : GetScalarType<T[P], VentaGroupByOutputType[P]>
        }
      >
    >


  export type VentaSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    total?: boolean
    fechaVenta?: boolean
    usuarioId?: boolean
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
    juegos?: boolean | Venta$juegosArgs<ExtArgs>
    claves?: boolean | Venta$clavesArgs<ExtArgs>
    _count?: boolean | VentaCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["venta"]>

  export type VentaSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    total?: boolean
    fechaVenta?: boolean
    usuarioId?: boolean
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["venta"]>

  export type VentaSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    total?: boolean
    fechaVenta?: boolean
    usuarioId?: boolean
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["venta"]>

  export type VentaSelectScalar = {
    id?: boolean
    total?: boolean
    fechaVenta?: boolean
    usuarioId?: boolean
  }

  export type VentaOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "total" | "fechaVenta" | "usuarioId", ExtArgs["result"]["venta"]>
  export type VentaInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
    juegos?: boolean | Venta$juegosArgs<ExtArgs>
    claves?: boolean | Venta$clavesArgs<ExtArgs>
    _count?: boolean | VentaCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type VentaIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
  }
  export type VentaIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
  }

  export type $VentaPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Venta"
    objects: {
      usuario: Prisma.$UsuarioPayload<ExtArgs>
      juegos: Prisma.$JuegoXVentaPayload<ExtArgs>[]
      claves: Prisma.$ClavePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      total: number
      fechaVenta: Date
      usuarioId: number
    }, ExtArgs["result"]["venta"]>
    composites: {}
  }

  type VentaGetPayload<S extends boolean | null | undefined | VentaDefaultArgs> = $Result.GetResult<Prisma.$VentaPayload, S>

  type VentaCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<VentaFindManyArgs, 'select' | 'include' | 'distinct' | 'omit' | 'relationLoadStrategy'> & {
      select?: VentaCountAggregateInputType | true
    }

  export interface VentaDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Venta'], meta: { name: 'Venta' } }
    /**
     * Find zero or one Venta that matches the filter.
     * @param {VentaFindUniqueArgs} args - Arguments to find a Venta
     * @example
     * // Get one Venta
     * const venta = await prisma.venta.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends VentaFindUniqueArgs>(args: SelectSubset<T, VentaFindUniqueArgs<ExtArgs>>): Prisma__VentaClient<$Result.GetResult<Prisma.$VentaPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Venta that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {VentaFindUniqueOrThrowArgs} args - Arguments to find a Venta
     * @example
     * // Get one Venta
     * const venta = await prisma.venta.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends VentaFindUniqueOrThrowArgs>(args: SelectSubset<T, VentaFindUniqueOrThrowArgs<ExtArgs>>): Prisma__VentaClient<$Result.GetResult<Prisma.$VentaPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Venta that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VentaFindFirstArgs} args - Arguments to find a Venta
     * @example
     * // Get one Venta
     * const venta = await prisma.venta.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends VentaFindFirstArgs>(args?: SelectSubset<T, VentaFindFirstArgs<ExtArgs>>): Prisma__VentaClient<$Result.GetResult<Prisma.$VentaPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Venta that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VentaFindFirstOrThrowArgs} args - Arguments to find a Venta
     * @example
     * // Get one Venta
     * const venta = await prisma.venta.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends VentaFindFirstOrThrowArgs>(args?: SelectSubset<T, VentaFindFirstOrThrowArgs<ExtArgs>>): Prisma__VentaClient<$Result.GetResult<Prisma.$VentaPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Ventas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VentaFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Ventas
     * const ventas = await prisma.venta.findMany()
     * 
     * // Get first 10 Ventas
     * const ventas = await prisma.venta.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const ventaWithIdOnly = await prisma.venta.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends VentaFindManyArgs>(args?: SelectSubset<T, VentaFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VentaPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Venta.
     * @param {VentaCreateArgs} args - Arguments to create a Venta.
     * @example
     * // Create one Venta
     * const Venta = await prisma.venta.create({
     *   data: {
     *     // ... data to create a Venta
     *   }
     * })
     * 
     */
    create<T extends VentaCreateArgs>(args: SelectSubset<T, VentaCreateArgs<ExtArgs>>): Prisma__VentaClient<$Result.GetResult<Prisma.$VentaPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Ventas.
     * @param {VentaCreateManyArgs} args - Arguments to create many Ventas.
     * @example
     * // Create many Ventas
     * const venta = await prisma.venta.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends VentaCreateManyArgs>(args?: SelectSubset<T, VentaCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Ventas and returns the data saved in the database.
     * @param {VentaCreateManyAndReturnArgs} args - Arguments to create many Ventas.
     * @example
     * // Create many Ventas
     * const venta = await prisma.venta.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Ventas and only return the `id`
     * const ventaWithIdOnly = await prisma.venta.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends VentaCreateManyAndReturnArgs>(args?: SelectSubset<T, VentaCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VentaPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Venta.
     * @param {VentaDeleteArgs} args - Arguments to delete one Venta.
     * @example
     * // Delete one Venta
     * const Venta = await prisma.venta.delete({
     *   where: {
     *     // ... filter to delete one Venta
     *   }
     * })
     * 
     */
    delete<T extends VentaDeleteArgs>(args: SelectSubset<T, VentaDeleteArgs<ExtArgs>>): Prisma__VentaClient<$Result.GetResult<Prisma.$VentaPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Venta.
     * @param {VentaUpdateArgs} args - Arguments to update one Venta.
     * @example
     * // Update one Venta
     * const venta = await prisma.venta.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends VentaUpdateArgs>(args: SelectSubset<T, VentaUpdateArgs<ExtArgs>>): Prisma__VentaClient<$Result.GetResult<Prisma.$VentaPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Ventas.
     * @param {VentaDeleteManyArgs} args - Arguments to filter Ventas to delete.
     * @example
     * // Delete a few Ventas
     * const { count } = await prisma.venta.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends VentaDeleteManyArgs>(args?: SelectSubset<T, VentaDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Ventas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VentaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Ventas
     * const venta = await prisma.venta.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends VentaUpdateManyArgs>(args: SelectSubset<T, VentaUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Ventas and returns the data updated in the database.
     * @param {VentaUpdateManyAndReturnArgs} args - Arguments to update many Ventas.
     * @example
     * // Update many Ventas
     * const venta = await prisma.venta.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Ventas and only return the `id`
     * const ventaWithIdOnly = await prisma.venta.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends VentaUpdateManyAndReturnArgs>(args: SelectSubset<T, VentaUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VentaPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Venta.
     * @param {VentaUpsertArgs} args - Arguments to update or create a Venta.
     * @example
     * // Update or create a Venta
     * const venta = await prisma.venta.upsert({
     *   create: {
     *     // ... data to create a Venta
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Venta we want to update
     *   }
     * })
     */
    upsert<T extends VentaUpsertArgs>(args: SelectSubset<T, VentaUpsertArgs<ExtArgs>>): Prisma__VentaClient<$Result.GetResult<Prisma.$VentaPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Ventas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VentaCountArgs} args - Arguments to filter Ventas to count.
     * @example
     * // Count the number of Ventas
     * const count = await prisma.venta.count({
     *   where: {
     *     // ... the filter for the Ventas we want to count
     *   }
     * })
    **/
    count<T extends VentaCountArgs>(
      args?: Subset<T, VentaCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], VentaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Venta.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VentaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends VentaAggregateArgs>(args: Subset<T, VentaAggregateArgs>): Prisma.PrismaPromise<GetVentaAggregateType<T>>

    /**
     * Group by Venta.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VentaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends VentaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: VentaGroupByArgs['orderBy'] }
        : { orderBy?: VentaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, VentaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetVentaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Venta model
   */
  readonly fields: VentaFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Venta.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__VentaClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    usuario<T extends UsuarioDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UsuarioDefaultArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    juegos<T extends Venta$juegosArgs<ExtArgs> = {}>(args?: Subset<T, Venta$juegosArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JuegoXVentaPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    claves<T extends Venta$clavesArgs<ExtArgs> = {}>(args?: Subset<T, Venta$clavesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClavePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Venta model
   */
  interface VentaFieldRefs {
    readonly id: FieldRef<"Venta", 'Int'>
    readonly total: FieldRef<"Venta", 'Float'>
    readonly fechaVenta: FieldRef<"Venta", 'DateTime'>
    readonly usuarioId: FieldRef<"Venta", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Venta findUnique
   */
  export type VentaFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Venta
     */
    select?: VentaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Venta
     */
    omit?: VentaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VentaInclude<ExtArgs> | null
    /**
     * Filter, which Venta to fetch.
     */
    where: VentaWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * Venta findUniqueOrThrow
   */
  export type VentaFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Venta
     */
    select?: VentaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Venta
     */
    omit?: VentaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VentaInclude<ExtArgs> | null
    /**
     * Filter, which Venta to fetch.
     */
    where: VentaWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * Venta findFirst
   */
  export type VentaFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Venta
     */
    select?: VentaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Venta
     */
    omit?: VentaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VentaInclude<ExtArgs> | null
    /**
     * Filter, which Venta to fetch.
     */
    where?: VentaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Ventas to fetch.
     */
    orderBy?: VentaOrderByWithRelationInput | VentaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Ventas.
     */
    cursor?: VentaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Ventas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Ventas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Ventas.
     */
    distinct?: VentaScalarFieldEnum | VentaScalarFieldEnum[]
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * Venta findFirstOrThrow
   */
  export type VentaFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Venta
     */
    select?: VentaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Venta
     */
    omit?: VentaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VentaInclude<ExtArgs> | null
    /**
     * Filter, which Venta to fetch.
     */
    where?: VentaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Ventas to fetch.
     */
    orderBy?: VentaOrderByWithRelationInput | VentaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Ventas.
     */
    cursor?: VentaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Ventas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Ventas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Ventas.
     */
    distinct?: VentaScalarFieldEnum | VentaScalarFieldEnum[]
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * Venta findMany
   */
  export type VentaFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Venta
     */
    select?: VentaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Venta
     */
    omit?: VentaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VentaInclude<ExtArgs> | null
    /**
     * Filter, which Ventas to fetch.
     */
    where?: VentaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Ventas to fetch.
     */
    orderBy?: VentaOrderByWithRelationInput | VentaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Ventas.
     */
    cursor?: VentaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Ventas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Ventas.
     */
    skip?: number
    distinct?: VentaScalarFieldEnum | VentaScalarFieldEnum[]
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * Venta create
   */
  export type VentaCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Venta
     */
    select?: VentaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Venta
     */
    omit?: VentaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VentaInclude<ExtArgs> | null
    /**
     * The data needed to create a Venta.
     */
    data: XOR<VentaCreateInput, VentaUncheckedCreateInput>
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * Venta createMany
   */
  export type VentaCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Ventas.
     */
    data: VentaCreateManyInput | VentaCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Venta createManyAndReturn
   */
  export type VentaCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Venta
     */
    select?: VentaSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Venta
     */
    omit?: VentaOmit<ExtArgs> | null
    /**
     * The data used to create many Ventas.
     */
    data: VentaCreateManyInput | VentaCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VentaIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Venta update
   */
  export type VentaUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Venta
     */
    select?: VentaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Venta
     */
    omit?: VentaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VentaInclude<ExtArgs> | null
    /**
     * The data needed to update a Venta.
     */
    data: XOR<VentaUpdateInput, VentaUncheckedUpdateInput>
    /**
     * Choose, which Venta to update.
     */
    where: VentaWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * Venta updateMany
   */
  export type VentaUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Ventas.
     */
    data: XOR<VentaUpdateManyMutationInput, VentaUncheckedUpdateManyInput>
    /**
     * Filter which Ventas to update
     */
    where?: VentaWhereInput
    /**
     * Limit how many Ventas to update.
     */
    limit?: number
  }

  /**
   * Venta updateManyAndReturn
   */
  export type VentaUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Venta
     */
    select?: VentaSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Venta
     */
    omit?: VentaOmit<ExtArgs> | null
    /**
     * The data used to update Ventas.
     */
    data: XOR<VentaUpdateManyMutationInput, VentaUncheckedUpdateManyInput>
    /**
     * Filter which Ventas to update
     */
    where?: VentaWhereInput
    /**
     * Limit how many Ventas to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VentaIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Venta upsert
   */
  export type VentaUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Venta
     */
    select?: VentaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Venta
     */
    omit?: VentaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VentaInclude<ExtArgs> | null
    /**
     * The filter to search for the Venta to update in case it exists.
     */
    where: VentaWhereUniqueInput
    /**
     * In case the Venta found by the `where` argument doesn't exist, create a new Venta with this data.
     */
    create: XOR<VentaCreateInput, VentaUncheckedCreateInput>
    /**
     * In case the Venta was found with the provided `where` argument, update it with this data.
     */
    update: XOR<VentaUpdateInput, VentaUncheckedUpdateInput>
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * Venta delete
   */
  export type VentaDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Venta
     */
    select?: VentaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Venta
     */
    omit?: VentaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VentaInclude<ExtArgs> | null
    /**
     * Filter which Venta to delete.
     */
    where: VentaWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * Venta deleteMany
   */
  export type VentaDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Ventas to delete
     */
    where?: VentaWhereInput
    /**
     * Limit how many Ventas to delete.
     */
    limit?: number
  }

  /**
   * Venta.juegos
   */
  export type Venta$juegosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JuegoXVenta
     */
    select?: JuegoXVentaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JuegoXVenta
     */
    omit?: JuegoXVentaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JuegoXVentaInclude<ExtArgs> | null
    where?: JuegoXVentaWhereInput
    orderBy?: JuegoXVentaOrderByWithRelationInput | JuegoXVentaOrderByWithRelationInput[]
    cursor?: JuegoXVentaWhereUniqueInput
    take?: number
    skip?: number
    distinct?: JuegoXVentaScalarFieldEnum | JuegoXVentaScalarFieldEnum[]
  }

  /**
   * Venta.claves
   */
  export type Venta$clavesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Clave
     */
    select?: ClaveSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Clave
     */
    omit?: ClaveOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClaveInclude<ExtArgs> | null
    where?: ClaveWhereInput
    orderBy?: ClaveOrderByWithRelationInput | ClaveOrderByWithRelationInput[]
    cursor?: ClaveWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ClaveScalarFieldEnum | ClaveScalarFieldEnum[]
  }

  /**
   * Venta without action
   */
  export type VentaDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Venta
     */
    select?: VentaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Venta
     */
    omit?: VentaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VentaInclude<ExtArgs> | null
  }


  /**
   * Model JuegoXVenta
   */

  export type AggregateJuegoXVenta = {
    _count: JuegoXVentaCountAggregateOutputType | null
    _avg: JuegoXVentaAvgAggregateOutputType | null
    _sum: JuegoXVentaSumAggregateOutputType | null
    _min: JuegoXVentaMinAggregateOutputType | null
    _max: JuegoXVentaMaxAggregateOutputType | null
  }

  export type JuegoXVentaAvgAggregateOutputType = {
    id: number | null
    juegoId: number | null
    ventaId: number | null
  }

  export type JuegoXVentaSumAggregateOutputType = {
    id: number | null
    juegoId: number | null
    ventaId: number | null
  }

  export type JuegoXVentaMinAggregateOutputType = {
    id: number | null
    juegoId: number | null
    ventaId: number | null
  }

  export type JuegoXVentaMaxAggregateOutputType = {
    id: number | null
    juegoId: number | null
    ventaId: number | null
  }

  export type JuegoXVentaCountAggregateOutputType = {
    id: number
    juegoId: number
    ventaId: number
    _all: number
  }


  export type JuegoXVentaAvgAggregateInputType = {
    id?: true
    juegoId?: true
    ventaId?: true
  }

  export type JuegoXVentaSumAggregateInputType = {
    id?: true
    juegoId?: true
    ventaId?: true
  }

  export type JuegoXVentaMinAggregateInputType = {
    id?: true
    juegoId?: true
    ventaId?: true
  }

  export type JuegoXVentaMaxAggregateInputType = {
    id?: true
    juegoId?: true
    ventaId?: true
  }

  export type JuegoXVentaCountAggregateInputType = {
    id?: true
    juegoId?: true
    ventaId?: true
    _all?: true
  }

  export type JuegoXVentaAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which JuegoXVenta to aggregate.
     */
    where?: JuegoXVentaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of JuegoXVentas to fetch.
     */
    orderBy?: JuegoXVentaOrderByWithRelationInput | JuegoXVentaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: JuegoXVentaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` JuegoXVentas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` JuegoXVentas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned JuegoXVentas
    **/
    _count?: true | JuegoXVentaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: JuegoXVentaAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: JuegoXVentaSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: JuegoXVentaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: JuegoXVentaMaxAggregateInputType
  }

  export type GetJuegoXVentaAggregateType<T extends JuegoXVentaAggregateArgs> = {
        [P in keyof T & keyof AggregateJuegoXVenta]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateJuegoXVenta[P]>
      : GetScalarType<T[P], AggregateJuegoXVenta[P]>
  }




  export type JuegoXVentaGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: JuegoXVentaWhereInput
    orderBy?: JuegoXVentaOrderByWithAggregationInput | JuegoXVentaOrderByWithAggregationInput[]
    by: JuegoXVentaScalarFieldEnum[] | JuegoXVentaScalarFieldEnum
    having?: JuegoXVentaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: JuegoXVentaCountAggregateInputType | true
    _avg?: JuegoXVentaAvgAggregateInputType
    _sum?: JuegoXVentaSumAggregateInputType
    _min?: JuegoXVentaMinAggregateInputType
    _max?: JuegoXVentaMaxAggregateInputType
  }

  export type JuegoXVentaGroupByOutputType = {
    id: number
    juegoId: number
    ventaId: number
    _count: JuegoXVentaCountAggregateOutputType | null
    _avg: JuegoXVentaAvgAggregateOutputType | null
    _sum: JuegoXVentaSumAggregateOutputType | null
    _min: JuegoXVentaMinAggregateOutputType | null
    _max: JuegoXVentaMaxAggregateOutputType | null
  }

  type GetJuegoXVentaGroupByPayload<T extends JuegoXVentaGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<JuegoXVentaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof JuegoXVentaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], JuegoXVentaGroupByOutputType[P]>
            : GetScalarType<T[P], JuegoXVentaGroupByOutputType[P]>
        }
      >
    >


  export type JuegoXVentaSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    juegoId?: boolean
    ventaId?: boolean
    juego?: boolean | JuegoDefaultArgs<ExtArgs>
    venta?: boolean | VentaDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["juegoXVenta"]>

  export type JuegoXVentaSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    juegoId?: boolean
    ventaId?: boolean
    juego?: boolean | JuegoDefaultArgs<ExtArgs>
    venta?: boolean | VentaDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["juegoXVenta"]>

  export type JuegoXVentaSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    juegoId?: boolean
    ventaId?: boolean
    juego?: boolean | JuegoDefaultArgs<ExtArgs>
    venta?: boolean | VentaDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["juegoXVenta"]>

  export type JuegoXVentaSelectScalar = {
    id?: boolean
    juegoId?: boolean
    ventaId?: boolean
  }

  export type JuegoXVentaOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "juegoId" | "ventaId", ExtArgs["result"]["juegoXVenta"]>
  export type JuegoXVentaInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    juego?: boolean | JuegoDefaultArgs<ExtArgs>
    venta?: boolean | VentaDefaultArgs<ExtArgs>
  }
  export type JuegoXVentaIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    juego?: boolean | JuegoDefaultArgs<ExtArgs>
    venta?: boolean | VentaDefaultArgs<ExtArgs>
  }
  export type JuegoXVentaIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    juego?: boolean | JuegoDefaultArgs<ExtArgs>
    venta?: boolean | VentaDefaultArgs<ExtArgs>
  }

  export type $JuegoXVentaPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "JuegoXVenta"
    objects: {
      juego: Prisma.$JuegoPayload<ExtArgs>
      venta: Prisma.$VentaPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      juegoId: number
      ventaId: number
    }, ExtArgs["result"]["juegoXVenta"]>
    composites: {}
  }

  type JuegoXVentaGetPayload<S extends boolean | null | undefined | JuegoXVentaDefaultArgs> = $Result.GetResult<Prisma.$JuegoXVentaPayload, S>

  type JuegoXVentaCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<JuegoXVentaFindManyArgs, 'select' | 'include' | 'distinct' | 'omit' | 'relationLoadStrategy'> & {
      select?: JuegoXVentaCountAggregateInputType | true
    }

  export interface JuegoXVentaDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['JuegoXVenta'], meta: { name: 'JuegoXVenta' } }
    /**
     * Find zero or one JuegoXVenta that matches the filter.
     * @param {JuegoXVentaFindUniqueArgs} args - Arguments to find a JuegoXVenta
     * @example
     * // Get one JuegoXVenta
     * const juegoXVenta = await prisma.juegoXVenta.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends JuegoXVentaFindUniqueArgs>(args: SelectSubset<T, JuegoXVentaFindUniqueArgs<ExtArgs>>): Prisma__JuegoXVentaClient<$Result.GetResult<Prisma.$JuegoXVentaPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one JuegoXVenta that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {JuegoXVentaFindUniqueOrThrowArgs} args - Arguments to find a JuegoXVenta
     * @example
     * // Get one JuegoXVenta
     * const juegoXVenta = await prisma.juegoXVenta.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends JuegoXVentaFindUniqueOrThrowArgs>(args: SelectSubset<T, JuegoXVentaFindUniqueOrThrowArgs<ExtArgs>>): Prisma__JuegoXVentaClient<$Result.GetResult<Prisma.$JuegoXVentaPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first JuegoXVenta that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JuegoXVentaFindFirstArgs} args - Arguments to find a JuegoXVenta
     * @example
     * // Get one JuegoXVenta
     * const juegoXVenta = await prisma.juegoXVenta.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends JuegoXVentaFindFirstArgs>(args?: SelectSubset<T, JuegoXVentaFindFirstArgs<ExtArgs>>): Prisma__JuegoXVentaClient<$Result.GetResult<Prisma.$JuegoXVentaPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first JuegoXVenta that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JuegoXVentaFindFirstOrThrowArgs} args - Arguments to find a JuegoXVenta
     * @example
     * // Get one JuegoXVenta
     * const juegoXVenta = await prisma.juegoXVenta.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends JuegoXVentaFindFirstOrThrowArgs>(args?: SelectSubset<T, JuegoXVentaFindFirstOrThrowArgs<ExtArgs>>): Prisma__JuegoXVentaClient<$Result.GetResult<Prisma.$JuegoXVentaPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more JuegoXVentas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JuegoXVentaFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all JuegoXVentas
     * const juegoXVentas = await prisma.juegoXVenta.findMany()
     * 
     * // Get first 10 JuegoXVentas
     * const juegoXVentas = await prisma.juegoXVenta.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const juegoXVentaWithIdOnly = await prisma.juegoXVenta.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends JuegoXVentaFindManyArgs>(args?: SelectSubset<T, JuegoXVentaFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JuegoXVentaPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a JuegoXVenta.
     * @param {JuegoXVentaCreateArgs} args - Arguments to create a JuegoXVenta.
     * @example
     * // Create one JuegoXVenta
     * const JuegoXVenta = await prisma.juegoXVenta.create({
     *   data: {
     *     // ... data to create a JuegoXVenta
     *   }
     * })
     * 
     */
    create<T extends JuegoXVentaCreateArgs>(args: SelectSubset<T, JuegoXVentaCreateArgs<ExtArgs>>): Prisma__JuegoXVentaClient<$Result.GetResult<Prisma.$JuegoXVentaPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many JuegoXVentas.
     * @param {JuegoXVentaCreateManyArgs} args - Arguments to create many JuegoXVentas.
     * @example
     * // Create many JuegoXVentas
     * const juegoXVenta = await prisma.juegoXVenta.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends JuegoXVentaCreateManyArgs>(args?: SelectSubset<T, JuegoXVentaCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many JuegoXVentas and returns the data saved in the database.
     * @param {JuegoXVentaCreateManyAndReturnArgs} args - Arguments to create many JuegoXVentas.
     * @example
     * // Create many JuegoXVentas
     * const juegoXVenta = await prisma.juegoXVenta.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many JuegoXVentas and only return the `id`
     * const juegoXVentaWithIdOnly = await prisma.juegoXVenta.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends JuegoXVentaCreateManyAndReturnArgs>(args?: SelectSubset<T, JuegoXVentaCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JuegoXVentaPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a JuegoXVenta.
     * @param {JuegoXVentaDeleteArgs} args - Arguments to delete one JuegoXVenta.
     * @example
     * // Delete one JuegoXVenta
     * const JuegoXVenta = await prisma.juegoXVenta.delete({
     *   where: {
     *     // ... filter to delete one JuegoXVenta
     *   }
     * })
     * 
     */
    delete<T extends JuegoXVentaDeleteArgs>(args: SelectSubset<T, JuegoXVentaDeleteArgs<ExtArgs>>): Prisma__JuegoXVentaClient<$Result.GetResult<Prisma.$JuegoXVentaPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one JuegoXVenta.
     * @param {JuegoXVentaUpdateArgs} args - Arguments to update one JuegoXVenta.
     * @example
     * // Update one JuegoXVenta
     * const juegoXVenta = await prisma.juegoXVenta.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends JuegoXVentaUpdateArgs>(args: SelectSubset<T, JuegoXVentaUpdateArgs<ExtArgs>>): Prisma__JuegoXVentaClient<$Result.GetResult<Prisma.$JuegoXVentaPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more JuegoXVentas.
     * @param {JuegoXVentaDeleteManyArgs} args - Arguments to filter JuegoXVentas to delete.
     * @example
     * // Delete a few JuegoXVentas
     * const { count } = await prisma.juegoXVenta.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends JuegoXVentaDeleteManyArgs>(args?: SelectSubset<T, JuegoXVentaDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more JuegoXVentas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JuegoXVentaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many JuegoXVentas
     * const juegoXVenta = await prisma.juegoXVenta.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends JuegoXVentaUpdateManyArgs>(args: SelectSubset<T, JuegoXVentaUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more JuegoXVentas and returns the data updated in the database.
     * @param {JuegoXVentaUpdateManyAndReturnArgs} args - Arguments to update many JuegoXVentas.
     * @example
     * // Update many JuegoXVentas
     * const juegoXVenta = await prisma.juegoXVenta.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more JuegoXVentas and only return the `id`
     * const juegoXVentaWithIdOnly = await prisma.juegoXVenta.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends JuegoXVentaUpdateManyAndReturnArgs>(args: SelectSubset<T, JuegoXVentaUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JuegoXVentaPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one JuegoXVenta.
     * @param {JuegoXVentaUpsertArgs} args - Arguments to update or create a JuegoXVenta.
     * @example
     * // Update or create a JuegoXVenta
     * const juegoXVenta = await prisma.juegoXVenta.upsert({
     *   create: {
     *     // ... data to create a JuegoXVenta
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the JuegoXVenta we want to update
     *   }
     * })
     */
    upsert<T extends JuegoXVentaUpsertArgs>(args: SelectSubset<T, JuegoXVentaUpsertArgs<ExtArgs>>): Prisma__JuegoXVentaClient<$Result.GetResult<Prisma.$JuegoXVentaPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of JuegoXVentas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JuegoXVentaCountArgs} args - Arguments to filter JuegoXVentas to count.
     * @example
     * // Count the number of JuegoXVentas
     * const count = await prisma.juegoXVenta.count({
     *   where: {
     *     // ... the filter for the JuegoXVentas we want to count
     *   }
     * })
    **/
    count<T extends JuegoXVentaCountArgs>(
      args?: Subset<T, JuegoXVentaCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], JuegoXVentaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a JuegoXVenta.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JuegoXVentaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends JuegoXVentaAggregateArgs>(args: Subset<T, JuegoXVentaAggregateArgs>): Prisma.PrismaPromise<GetJuegoXVentaAggregateType<T>>

    /**
     * Group by JuegoXVenta.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JuegoXVentaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends JuegoXVentaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: JuegoXVentaGroupByArgs['orderBy'] }
        : { orderBy?: JuegoXVentaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, JuegoXVentaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetJuegoXVentaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the JuegoXVenta model
   */
  readonly fields: JuegoXVentaFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for JuegoXVenta.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__JuegoXVentaClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    juego<T extends JuegoDefaultArgs<ExtArgs> = {}>(args?: Subset<T, JuegoDefaultArgs<ExtArgs>>): Prisma__JuegoClient<$Result.GetResult<Prisma.$JuegoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    venta<T extends VentaDefaultArgs<ExtArgs> = {}>(args?: Subset<T, VentaDefaultArgs<ExtArgs>>): Prisma__VentaClient<$Result.GetResult<Prisma.$VentaPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the JuegoXVenta model
   */
  interface JuegoXVentaFieldRefs {
    readonly id: FieldRef<"JuegoXVenta", 'Int'>
    readonly juegoId: FieldRef<"JuegoXVenta", 'Int'>
    readonly ventaId: FieldRef<"JuegoXVenta", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * JuegoXVenta findUnique
   */
  export type JuegoXVentaFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JuegoXVenta
     */
    select?: JuegoXVentaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JuegoXVenta
     */
    omit?: JuegoXVentaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JuegoXVentaInclude<ExtArgs> | null
    /**
     * Filter, which JuegoXVenta to fetch.
     */
    where: JuegoXVentaWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * JuegoXVenta findUniqueOrThrow
   */
  export type JuegoXVentaFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JuegoXVenta
     */
    select?: JuegoXVentaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JuegoXVenta
     */
    omit?: JuegoXVentaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JuegoXVentaInclude<ExtArgs> | null
    /**
     * Filter, which JuegoXVenta to fetch.
     */
    where: JuegoXVentaWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * JuegoXVenta findFirst
   */
  export type JuegoXVentaFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JuegoXVenta
     */
    select?: JuegoXVentaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JuegoXVenta
     */
    omit?: JuegoXVentaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JuegoXVentaInclude<ExtArgs> | null
    /**
     * Filter, which JuegoXVenta to fetch.
     */
    where?: JuegoXVentaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of JuegoXVentas to fetch.
     */
    orderBy?: JuegoXVentaOrderByWithRelationInput | JuegoXVentaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for JuegoXVentas.
     */
    cursor?: JuegoXVentaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` JuegoXVentas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` JuegoXVentas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of JuegoXVentas.
     */
    distinct?: JuegoXVentaScalarFieldEnum | JuegoXVentaScalarFieldEnum[]
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * JuegoXVenta findFirstOrThrow
   */
  export type JuegoXVentaFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JuegoXVenta
     */
    select?: JuegoXVentaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JuegoXVenta
     */
    omit?: JuegoXVentaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JuegoXVentaInclude<ExtArgs> | null
    /**
     * Filter, which JuegoXVenta to fetch.
     */
    where?: JuegoXVentaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of JuegoXVentas to fetch.
     */
    orderBy?: JuegoXVentaOrderByWithRelationInput | JuegoXVentaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for JuegoXVentas.
     */
    cursor?: JuegoXVentaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` JuegoXVentas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` JuegoXVentas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of JuegoXVentas.
     */
    distinct?: JuegoXVentaScalarFieldEnum | JuegoXVentaScalarFieldEnum[]
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * JuegoXVenta findMany
   */
  export type JuegoXVentaFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JuegoXVenta
     */
    select?: JuegoXVentaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JuegoXVenta
     */
    omit?: JuegoXVentaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JuegoXVentaInclude<ExtArgs> | null
    /**
     * Filter, which JuegoXVentas to fetch.
     */
    where?: JuegoXVentaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of JuegoXVentas to fetch.
     */
    orderBy?: JuegoXVentaOrderByWithRelationInput | JuegoXVentaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing JuegoXVentas.
     */
    cursor?: JuegoXVentaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` JuegoXVentas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` JuegoXVentas.
     */
    skip?: number
    distinct?: JuegoXVentaScalarFieldEnum | JuegoXVentaScalarFieldEnum[]
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * JuegoXVenta create
   */
  export type JuegoXVentaCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JuegoXVenta
     */
    select?: JuegoXVentaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JuegoXVenta
     */
    omit?: JuegoXVentaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JuegoXVentaInclude<ExtArgs> | null
    /**
     * The data needed to create a JuegoXVenta.
     */
    data: XOR<JuegoXVentaCreateInput, JuegoXVentaUncheckedCreateInput>
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * JuegoXVenta createMany
   */
  export type JuegoXVentaCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many JuegoXVentas.
     */
    data: JuegoXVentaCreateManyInput | JuegoXVentaCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * JuegoXVenta createManyAndReturn
   */
  export type JuegoXVentaCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JuegoXVenta
     */
    select?: JuegoXVentaSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the JuegoXVenta
     */
    omit?: JuegoXVentaOmit<ExtArgs> | null
    /**
     * The data used to create many JuegoXVentas.
     */
    data: JuegoXVentaCreateManyInput | JuegoXVentaCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JuegoXVentaIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * JuegoXVenta update
   */
  export type JuegoXVentaUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JuegoXVenta
     */
    select?: JuegoXVentaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JuegoXVenta
     */
    omit?: JuegoXVentaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JuegoXVentaInclude<ExtArgs> | null
    /**
     * The data needed to update a JuegoXVenta.
     */
    data: XOR<JuegoXVentaUpdateInput, JuegoXVentaUncheckedUpdateInput>
    /**
     * Choose, which JuegoXVenta to update.
     */
    where: JuegoXVentaWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * JuegoXVenta updateMany
   */
  export type JuegoXVentaUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update JuegoXVentas.
     */
    data: XOR<JuegoXVentaUpdateManyMutationInput, JuegoXVentaUncheckedUpdateManyInput>
    /**
     * Filter which JuegoXVentas to update
     */
    where?: JuegoXVentaWhereInput
    /**
     * Limit how many JuegoXVentas to update.
     */
    limit?: number
  }

  /**
   * JuegoXVenta updateManyAndReturn
   */
  export type JuegoXVentaUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JuegoXVenta
     */
    select?: JuegoXVentaSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the JuegoXVenta
     */
    omit?: JuegoXVentaOmit<ExtArgs> | null
    /**
     * The data used to update JuegoXVentas.
     */
    data: XOR<JuegoXVentaUpdateManyMutationInput, JuegoXVentaUncheckedUpdateManyInput>
    /**
     * Filter which JuegoXVentas to update
     */
    where?: JuegoXVentaWhereInput
    /**
     * Limit how many JuegoXVentas to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JuegoXVentaIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * JuegoXVenta upsert
   */
  export type JuegoXVentaUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JuegoXVenta
     */
    select?: JuegoXVentaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JuegoXVenta
     */
    omit?: JuegoXVentaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JuegoXVentaInclude<ExtArgs> | null
    /**
     * The filter to search for the JuegoXVenta to update in case it exists.
     */
    where: JuegoXVentaWhereUniqueInput
    /**
     * In case the JuegoXVenta found by the `where` argument doesn't exist, create a new JuegoXVenta with this data.
     */
    create: XOR<JuegoXVentaCreateInput, JuegoXVentaUncheckedCreateInput>
    /**
     * In case the JuegoXVenta was found with the provided `where` argument, update it with this data.
     */
    update: XOR<JuegoXVentaUpdateInput, JuegoXVentaUncheckedUpdateInput>
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * JuegoXVenta delete
   */
  export type JuegoXVentaDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JuegoXVenta
     */
    select?: JuegoXVentaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JuegoXVenta
     */
    omit?: JuegoXVentaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JuegoXVentaInclude<ExtArgs> | null
    /**
     * Filter which JuegoXVenta to delete.
     */
    where: JuegoXVentaWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * JuegoXVenta deleteMany
   */
  export type JuegoXVentaDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which JuegoXVentas to delete
     */
    where?: JuegoXVentaWhereInput
    /**
     * Limit how many JuegoXVentas to delete.
     */
    limit?: number
  }

  /**
   * JuegoXVenta without action
   */
  export type JuegoXVentaDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JuegoXVenta
     */
    select?: JuegoXVentaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JuegoXVenta
     */
    omit?: JuegoXVentaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JuegoXVentaInclude<ExtArgs> | null
  }


  /**
   * Model JuegoXUsuario
   */

  export type AggregateJuegoXUsuario = {
    _count: JuegoXUsuarioCountAggregateOutputType | null
    _avg: JuegoXUsuarioAvgAggregateOutputType | null
    _sum: JuegoXUsuarioSumAggregateOutputType | null
    _min: JuegoXUsuarioMinAggregateOutputType | null
    _max: JuegoXUsuarioMaxAggregateOutputType | null
  }

  export type JuegoXUsuarioAvgAggregateOutputType = {
    id: number | null
    juegoId: number | null
    usuarioId: number | null
  }

  export type JuegoXUsuarioSumAggregateOutputType = {
    id: number | null
    juegoId: number | null
    usuarioId: number | null
  }

  export type JuegoXUsuarioMinAggregateOutputType = {
    id: number | null
    juegoId: number | null
    usuarioId: number | null
  }

  export type JuegoXUsuarioMaxAggregateOutputType = {
    id: number | null
    juegoId: number | null
    usuarioId: number | null
  }

  export type JuegoXUsuarioCountAggregateOutputType = {
    id: number
    juegoId: number
    usuarioId: number
    _all: number
  }


  export type JuegoXUsuarioAvgAggregateInputType = {
    id?: true
    juegoId?: true
    usuarioId?: true
  }

  export type JuegoXUsuarioSumAggregateInputType = {
    id?: true
    juegoId?: true
    usuarioId?: true
  }

  export type JuegoXUsuarioMinAggregateInputType = {
    id?: true
    juegoId?: true
    usuarioId?: true
  }

  export type JuegoXUsuarioMaxAggregateInputType = {
    id?: true
    juegoId?: true
    usuarioId?: true
  }

  export type JuegoXUsuarioCountAggregateInputType = {
    id?: true
    juegoId?: true
    usuarioId?: true
    _all?: true
  }

  export type JuegoXUsuarioAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which JuegoXUsuario to aggregate.
     */
    where?: JuegoXUsuarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of JuegoXUsuarios to fetch.
     */
    orderBy?: JuegoXUsuarioOrderByWithRelationInput | JuegoXUsuarioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: JuegoXUsuarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` JuegoXUsuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` JuegoXUsuarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned JuegoXUsuarios
    **/
    _count?: true | JuegoXUsuarioCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: JuegoXUsuarioAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: JuegoXUsuarioSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: JuegoXUsuarioMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: JuegoXUsuarioMaxAggregateInputType
  }

  export type GetJuegoXUsuarioAggregateType<T extends JuegoXUsuarioAggregateArgs> = {
        [P in keyof T & keyof AggregateJuegoXUsuario]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateJuegoXUsuario[P]>
      : GetScalarType<T[P], AggregateJuegoXUsuario[P]>
  }




  export type JuegoXUsuarioGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: JuegoXUsuarioWhereInput
    orderBy?: JuegoXUsuarioOrderByWithAggregationInput | JuegoXUsuarioOrderByWithAggregationInput[]
    by: JuegoXUsuarioScalarFieldEnum[] | JuegoXUsuarioScalarFieldEnum
    having?: JuegoXUsuarioScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: JuegoXUsuarioCountAggregateInputType | true
    _avg?: JuegoXUsuarioAvgAggregateInputType
    _sum?: JuegoXUsuarioSumAggregateInputType
    _min?: JuegoXUsuarioMinAggregateInputType
    _max?: JuegoXUsuarioMaxAggregateInputType
  }

  export type JuegoXUsuarioGroupByOutputType = {
    id: number
    juegoId: number
    usuarioId: number
    _count: JuegoXUsuarioCountAggregateOutputType | null
    _avg: JuegoXUsuarioAvgAggregateOutputType | null
    _sum: JuegoXUsuarioSumAggregateOutputType | null
    _min: JuegoXUsuarioMinAggregateOutputType | null
    _max: JuegoXUsuarioMaxAggregateOutputType | null
  }

  type GetJuegoXUsuarioGroupByPayload<T extends JuegoXUsuarioGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<JuegoXUsuarioGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof JuegoXUsuarioGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], JuegoXUsuarioGroupByOutputType[P]>
            : GetScalarType<T[P], JuegoXUsuarioGroupByOutputType[P]>
        }
      >
    >


  export type JuegoXUsuarioSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    juegoId?: boolean
    usuarioId?: boolean
    juego?: boolean | JuegoDefaultArgs<ExtArgs>
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["juegoXUsuario"]>

  export type JuegoXUsuarioSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    juegoId?: boolean
    usuarioId?: boolean
    juego?: boolean | JuegoDefaultArgs<ExtArgs>
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["juegoXUsuario"]>

  export type JuegoXUsuarioSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    juegoId?: boolean
    usuarioId?: boolean
    juego?: boolean | JuegoDefaultArgs<ExtArgs>
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["juegoXUsuario"]>

  export type JuegoXUsuarioSelectScalar = {
    id?: boolean
    juegoId?: boolean
    usuarioId?: boolean
  }

  export type JuegoXUsuarioOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "juegoId" | "usuarioId", ExtArgs["result"]["juegoXUsuario"]>
  export type JuegoXUsuarioInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    juego?: boolean | JuegoDefaultArgs<ExtArgs>
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
  }
  export type JuegoXUsuarioIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    juego?: boolean | JuegoDefaultArgs<ExtArgs>
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
  }
  export type JuegoXUsuarioIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    juego?: boolean | JuegoDefaultArgs<ExtArgs>
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
  }

  export type $JuegoXUsuarioPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "JuegoXUsuario"
    objects: {
      juego: Prisma.$JuegoPayload<ExtArgs>
      usuario: Prisma.$UsuarioPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      juegoId: number
      usuarioId: number
    }, ExtArgs["result"]["juegoXUsuario"]>
    composites: {}
  }

  type JuegoXUsuarioGetPayload<S extends boolean | null | undefined | JuegoXUsuarioDefaultArgs> = $Result.GetResult<Prisma.$JuegoXUsuarioPayload, S>

  type JuegoXUsuarioCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<JuegoXUsuarioFindManyArgs, 'select' | 'include' | 'distinct' | 'omit' | 'relationLoadStrategy'> & {
      select?: JuegoXUsuarioCountAggregateInputType | true
    }

  export interface JuegoXUsuarioDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['JuegoXUsuario'], meta: { name: 'JuegoXUsuario' } }
    /**
     * Find zero or one JuegoXUsuario that matches the filter.
     * @param {JuegoXUsuarioFindUniqueArgs} args - Arguments to find a JuegoXUsuario
     * @example
     * // Get one JuegoXUsuario
     * const juegoXUsuario = await prisma.juegoXUsuario.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends JuegoXUsuarioFindUniqueArgs>(args: SelectSubset<T, JuegoXUsuarioFindUniqueArgs<ExtArgs>>): Prisma__JuegoXUsuarioClient<$Result.GetResult<Prisma.$JuegoXUsuarioPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one JuegoXUsuario that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {JuegoXUsuarioFindUniqueOrThrowArgs} args - Arguments to find a JuegoXUsuario
     * @example
     * // Get one JuegoXUsuario
     * const juegoXUsuario = await prisma.juegoXUsuario.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends JuegoXUsuarioFindUniqueOrThrowArgs>(args: SelectSubset<T, JuegoXUsuarioFindUniqueOrThrowArgs<ExtArgs>>): Prisma__JuegoXUsuarioClient<$Result.GetResult<Prisma.$JuegoXUsuarioPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first JuegoXUsuario that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JuegoXUsuarioFindFirstArgs} args - Arguments to find a JuegoXUsuario
     * @example
     * // Get one JuegoXUsuario
     * const juegoXUsuario = await prisma.juegoXUsuario.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends JuegoXUsuarioFindFirstArgs>(args?: SelectSubset<T, JuegoXUsuarioFindFirstArgs<ExtArgs>>): Prisma__JuegoXUsuarioClient<$Result.GetResult<Prisma.$JuegoXUsuarioPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first JuegoXUsuario that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JuegoXUsuarioFindFirstOrThrowArgs} args - Arguments to find a JuegoXUsuario
     * @example
     * // Get one JuegoXUsuario
     * const juegoXUsuario = await prisma.juegoXUsuario.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends JuegoXUsuarioFindFirstOrThrowArgs>(args?: SelectSubset<T, JuegoXUsuarioFindFirstOrThrowArgs<ExtArgs>>): Prisma__JuegoXUsuarioClient<$Result.GetResult<Prisma.$JuegoXUsuarioPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more JuegoXUsuarios that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JuegoXUsuarioFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all JuegoXUsuarios
     * const juegoXUsuarios = await prisma.juegoXUsuario.findMany()
     * 
     * // Get first 10 JuegoXUsuarios
     * const juegoXUsuarios = await prisma.juegoXUsuario.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const juegoXUsuarioWithIdOnly = await prisma.juegoXUsuario.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends JuegoXUsuarioFindManyArgs>(args?: SelectSubset<T, JuegoXUsuarioFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JuegoXUsuarioPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a JuegoXUsuario.
     * @param {JuegoXUsuarioCreateArgs} args - Arguments to create a JuegoXUsuario.
     * @example
     * // Create one JuegoXUsuario
     * const JuegoXUsuario = await prisma.juegoXUsuario.create({
     *   data: {
     *     // ... data to create a JuegoXUsuario
     *   }
     * })
     * 
     */
    create<T extends JuegoXUsuarioCreateArgs>(args: SelectSubset<T, JuegoXUsuarioCreateArgs<ExtArgs>>): Prisma__JuegoXUsuarioClient<$Result.GetResult<Prisma.$JuegoXUsuarioPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many JuegoXUsuarios.
     * @param {JuegoXUsuarioCreateManyArgs} args - Arguments to create many JuegoXUsuarios.
     * @example
     * // Create many JuegoXUsuarios
     * const juegoXUsuario = await prisma.juegoXUsuario.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends JuegoXUsuarioCreateManyArgs>(args?: SelectSubset<T, JuegoXUsuarioCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many JuegoXUsuarios and returns the data saved in the database.
     * @param {JuegoXUsuarioCreateManyAndReturnArgs} args - Arguments to create many JuegoXUsuarios.
     * @example
     * // Create many JuegoXUsuarios
     * const juegoXUsuario = await prisma.juegoXUsuario.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many JuegoXUsuarios and only return the `id`
     * const juegoXUsuarioWithIdOnly = await prisma.juegoXUsuario.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends JuegoXUsuarioCreateManyAndReturnArgs>(args?: SelectSubset<T, JuegoXUsuarioCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JuegoXUsuarioPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a JuegoXUsuario.
     * @param {JuegoXUsuarioDeleteArgs} args - Arguments to delete one JuegoXUsuario.
     * @example
     * // Delete one JuegoXUsuario
     * const JuegoXUsuario = await prisma.juegoXUsuario.delete({
     *   where: {
     *     // ... filter to delete one JuegoXUsuario
     *   }
     * })
     * 
     */
    delete<T extends JuegoXUsuarioDeleteArgs>(args: SelectSubset<T, JuegoXUsuarioDeleteArgs<ExtArgs>>): Prisma__JuegoXUsuarioClient<$Result.GetResult<Prisma.$JuegoXUsuarioPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one JuegoXUsuario.
     * @param {JuegoXUsuarioUpdateArgs} args - Arguments to update one JuegoXUsuario.
     * @example
     * // Update one JuegoXUsuario
     * const juegoXUsuario = await prisma.juegoXUsuario.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends JuegoXUsuarioUpdateArgs>(args: SelectSubset<T, JuegoXUsuarioUpdateArgs<ExtArgs>>): Prisma__JuegoXUsuarioClient<$Result.GetResult<Prisma.$JuegoXUsuarioPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more JuegoXUsuarios.
     * @param {JuegoXUsuarioDeleteManyArgs} args - Arguments to filter JuegoXUsuarios to delete.
     * @example
     * // Delete a few JuegoXUsuarios
     * const { count } = await prisma.juegoXUsuario.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends JuegoXUsuarioDeleteManyArgs>(args?: SelectSubset<T, JuegoXUsuarioDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more JuegoXUsuarios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JuegoXUsuarioUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many JuegoXUsuarios
     * const juegoXUsuario = await prisma.juegoXUsuario.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends JuegoXUsuarioUpdateManyArgs>(args: SelectSubset<T, JuegoXUsuarioUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more JuegoXUsuarios and returns the data updated in the database.
     * @param {JuegoXUsuarioUpdateManyAndReturnArgs} args - Arguments to update many JuegoXUsuarios.
     * @example
     * // Update many JuegoXUsuarios
     * const juegoXUsuario = await prisma.juegoXUsuario.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more JuegoXUsuarios and only return the `id`
     * const juegoXUsuarioWithIdOnly = await prisma.juegoXUsuario.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends JuegoXUsuarioUpdateManyAndReturnArgs>(args: SelectSubset<T, JuegoXUsuarioUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JuegoXUsuarioPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one JuegoXUsuario.
     * @param {JuegoXUsuarioUpsertArgs} args - Arguments to update or create a JuegoXUsuario.
     * @example
     * // Update or create a JuegoXUsuario
     * const juegoXUsuario = await prisma.juegoXUsuario.upsert({
     *   create: {
     *     // ... data to create a JuegoXUsuario
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the JuegoXUsuario we want to update
     *   }
     * })
     */
    upsert<T extends JuegoXUsuarioUpsertArgs>(args: SelectSubset<T, JuegoXUsuarioUpsertArgs<ExtArgs>>): Prisma__JuegoXUsuarioClient<$Result.GetResult<Prisma.$JuegoXUsuarioPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of JuegoXUsuarios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JuegoXUsuarioCountArgs} args - Arguments to filter JuegoXUsuarios to count.
     * @example
     * // Count the number of JuegoXUsuarios
     * const count = await prisma.juegoXUsuario.count({
     *   where: {
     *     // ... the filter for the JuegoXUsuarios we want to count
     *   }
     * })
    **/
    count<T extends JuegoXUsuarioCountArgs>(
      args?: Subset<T, JuegoXUsuarioCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], JuegoXUsuarioCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a JuegoXUsuario.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JuegoXUsuarioAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends JuegoXUsuarioAggregateArgs>(args: Subset<T, JuegoXUsuarioAggregateArgs>): Prisma.PrismaPromise<GetJuegoXUsuarioAggregateType<T>>

    /**
     * Group by JuegoXUsuario.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JuegoXUsuarioGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends JuegoXUsuarioGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: JuegoXUsuarioGroupByArgs['orderBy'] }
        : { orderBy?: JuegoXUsuarioGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, JuegoXUsuarioGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetJuegoXUsuarioGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the JuegoXUsuario model
   */
  readonly fields: JuegoXUsuarioFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for JuegoXUsuario.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__JuegoXUsuarioClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    juego<T extends JuegoDefaultArgs<ExtArgs> = {}>(args?: Subset<T, JuegoDefaultArgs<ExtArgs>>): Prisma__JuegoClient<$Result.GetResult<Prisma.$JuegoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    usuario<T extends UsuarioDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UsuarioDefaultArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the JuegoXUsuario model
   */
  interface JuegoXUsuarioFieldRefs {
    readonly id: FieldRef<"JuegoXUsuario", 'Int'>
    readonly juegoId: FieldRef<"JuegoXUsuario", 'Int'>
    readonly usuarioId: FieldRef<"JuegoXUsuario", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * JuegoXUsuario findUnique
   */
  export type JuegoXUsuarioFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JuegoXUsuario
     */
    select?: JuegoXUsuarioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JuegoXUsuario
     */
    omit?: JuegoXUsuarioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JuegoXUsuarioInclude<ExtArgs> | null
    /**
     * Filter, which JuegoXUsuario to fetch.
     */
    where: JuegoXUsuarioWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * JuegoXUsuario findUniqueOrThrow
   */
  export type JuegoXUsuarioFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JuegoXUsuario
     */
    select?: JuegoXUsuarioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JuegoXUsuario
     */
    omit?: JuegoXUsuarioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JuegoXUsuarioInclude<ExtArgs> | null
    /**
     * Filter, which JuegoXUsuario to fetch.
     */
    where: JuegoXUsuarioWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * JuegoXUsuario findFirst
   */
  export type JuegoXUsuarioFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JuegoXUsuario
     */
    select?: JuegoXUsuarioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JuegoXUsuario
     */
    omit?: JuegoXUsuarioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JuegoXUsuarioInclude<ExtArgs> | null
    /**
     * Filter, which JuegoXUsuario to fetch.
     */
    where?: JuegoXUsuarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of JuegoXUsuarios to fetch.
     */
    orderBy?: JuegoXUsuarioOrderByWithRelationInput | JuegoXUsuarioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for JuegoXUsuarios.
     */
    cursor?: JuegoXUsuarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` JuegoXUsuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` JuegoXUsuarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of JuegoXUsuarios.
     */
    distinct?: JuegoXUsuarioScalarFieldEnum | JuegoXUsuarioScalarFieldEnum[]
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * JuegoXUsuario findFirstOrThrow
   */
  export type JuegoXUsuarioFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JuegoXUsuario
     */
    select?: JuegoXUsuarioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JuegoXUsuario
     */
    omit?: JuegoXUsuarioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JuegoXUsuarioInclude<ExtArgs> | null
    /**
     * Filter, which JuegoXUsuario to fetch.
     */
    where?: JuegoXUsuarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of JuegoXUsuarios to fetch.
     */
    orderBy?: JuegoXUsuarioOrderByWithRelationInput | JuegoXUsuarioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for JuegoXUsuarios.
     */
    cursor?: JuegoXUsuarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` JuegoXUsuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` JuegoXUsuarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of JuegoXUsuarios.
     */
    distinct?: JuegoXUsuarioScalarFieldEnum | JuegoXUsuarioScalarFieldEnum[]
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * JuegoXUsuario findMany
   */
  export type JuegoXUsuarioFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JuegoXUsuario
     */
    select?: JuegoXUsuarioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JuegoXUsuario
     */
    omit?: JuegoXUsuarioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JuegoXUsuarioInclude<ExtArgs> | null
    /**
     * Filter, which JuegoXUsuarios to fetch.
     */
    where?: JuegoXUsuarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of JuegoXUsuarios to fetch.
     */
    orderBy?: JuegoXUsuarioOrderByWithRelationInput | JuegoXUsuarioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing JuegoXUsuarios.
     */
    cursor?: JuegoXUsuarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` JuegoXUsuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` JuegoXUsuarios.
     */
    skip?: number
    distinct?: JuegoXUsuarioScalarFieldEnum | JuegoXUsuarioScalarFieldEnum[]
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * JuegoXUsuario create
   */
  export type JuegoXUsuarioCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JuegoXUsuario
     */
    select?: JuegoXUsuarioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JuegoXUsuario
     */
    omit?: JuegoXUsuarioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JuegoXUsuarioInclude<ExtArgs> | null
    /**
     * The data needed to create a JuegoXUsuario.
     */
    data: XOR<JuegoXUsuarioCreateInput, JuegoXUsuarioUncheckedCreateInput>
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * JuegoXUsuario createMany
   */
  export type JuegoXUsuarioCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many JuegoXUsuarios.
     */
    data: JuegoXUsuarioCreateManyInput | JuegoXUsuarioCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * JuegoXUsuario createManyAndReturn
   */
  export type JuegoXUsuarioCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JuegoXUsuario
     */
    select?: JuegoXUsuarioSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the JuegoXUsuario
     */
    omit?: JuegoXUsuarioOmit<ExtArgs> | null
    /**
     * The data used to create many JuegoXUsuarios.
     */
    data: JuegoXUsuarioCreateManyInput | JuegoXUsuarioCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JuegoXUsuarioIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * JuegoXUsuario update
   */
  export type JuegoXUsuarioUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JuegoXUsuario
     */
    select?: JuegoXUsuarioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JuegoXUsuario
     */
    omit?: JuegoXUsuarioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JuegoXUsuarioInclude<ExtArgs> | null
    /**
     * The data needed to update a JuegoXUsuario.
     */
    data: XOR<JuegoXUsuarioUpdateInput, JuegoXUsuarioUncheckedUpdateInput>
    /**
     * Choose, which JuegoXUsuario to update.
     */
    where: JuegoXUsuarioWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * JuegoXUsuario updateMany
   */
  export type JuegoXUsuarioUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update JuegoXUsuarios.
     */
    data: XOR<JuegoXUsuarioUpdateManyMutationInput, JuegoXUsuarioUncheckedUpdateManyInput>
    /**
     * Filter which JuegoXUsuarios to update
     */
    where?: JuegoXUsuarioWhereInput
    /**
     * Limit how many JuegoXUsuarios to update.
     */
    limit?: number
  }

  /**
   * JuegoXUsuario updateManyAndReturn
   */
  export type JuegoXUsuarioUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JuegoXUsuario
     */
    select?: JuegoXUsuarioSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the JuegoXUsuario
     */
    omit?: JuegoXUsuarioOmit<ExtArgs> | null
    /**
     * The data used to update JuegoXUsuarios.
     */
    data: XOR<JuegoXUsuarioUpdateManyMutationInput, JuegoXUsuarioUncheckedUpdateManyInput>
    /**
     * Filter which JuegoXUsuarios to update
     */
    where?: JuegoXUsuarioWhereInput
    /**
     * Limit how many JuegoXUsuarios to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JuegoXUsuarioIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * JuegoXUsuario upsert
   */
  export type JuegoXUsuarioUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JuegoXUsuario
     */
    select?: JuegoXUsuarioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JuegoXUsuario
     */
    omit?: JuegoXUsuarioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JuegoXUsuarioInclude<ExtArgs> | null
    /**
     * The filter to search for the JuegoXUsuario to update in case it exists.
     */
    where: JuegoXUsuarioWhereUniqueInput
    /**
     * In case the JuegoXUsuario found by the `where` argument doesn't exist, create a new JuegoXUsuario with this data.
     */
    create: XOR<JuegoXUsuarioCreateInput, JuegoXUsuarioUncheckedCreateInput>
    /**
     * In case the JuegoXUsuario was found with the provided `where` argument, update it with this data.
     */
    update: XOR<JuegoXUsuarioUpdateInput, JuegoXUsuarioUncheckedUpdateInput>
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * JuegoXUsuario delete
   */
  export type JuegoXUsuarioDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JuegoXUsuario
     */
    select?: JuegoXUsuarioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JuegoXUsuario
     */
    omit?: JuegoXUsuarioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JuegoXUsuarioInclude<ExtArgs> | null
    /**
     * Filter which JuegoXUsuario to delete.
     */
    where: JuegoXUsuarioWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * JuegoXUsuario deleteMany
   */
  export type JuegoXUsuarioDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which JuegoXUsuarios to delete
     */
    where?: JuegoXUsuarioWhereInput
    /**
     * Limit how many JuegoXUsuarios to delete.
     */
    limit?: number
  }

  /**
   * JuegoXUsuario without action
   */
  export type JuegoXUsuarioDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JuegoXUsuario
     */
    select?: JuegoXUsuarioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JuegoXUsuario
     */
    omit?: JuegoXUsuarioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JuegoXUsuarioInclude<ExtArgs> | null
  }


  /**
   * Model Clave
   */

  export type AggregateClave = {
    _count: ClaveCountAggregateOutputType | null
    _avg: ClaveAvgAggregateOutputType | null
    _sum: ClaveSumAggregateOutputType | null
    _min: ClaveMinAggregateOutputType | null
    _max: ClaveMaxAggregateOutputType | null
  }

  export type ClaveAvgAggregateOutputType = {
    id: number | null
    juegoId: number | null
    ventaId: number | null
  }

  export type ClaveSumAggregateOutputType = {
    id: number | null
    juegoId: number | null
    ventaId: number | null
  }

  export type ClaveMinAggregateOutputType = {
    id: number | null
    texto: string | null
    usada: boolean | null
    juegoId: number | null
    ventaId: number | null
  }

  export type ClaveMaxAggregateOutputType = {
    id: number | null
    texto: string | null
    usada: boolean | null
    juegoId: number | null
    ventaId: number | null
  }

  export type ClaveCountAggregateOutputType = {
    id: number
    texto: number
    usada: number
    juegoId: number
    ventaId: number
    _all: number
  }


  export type ClaveAvgAggregateInputType = {
    id?: true
    juegoId?: true
    ventaId?: true
  }

  export type ClaveSumAggregateInputType = {
    id?: true
    juegoId?: true
    ventaId?: true
  }

  export type ClaveMinAggregateInputType = {
    id?: true
    texto?: true
    usada?: true
    juegoId?: true
    ventaId?: true
  }

  export type ClaveMaxAggregateInputType = {
    id?: true
    texto?: true
    usada?: true
    juegoId?: true
    ventaId?: true
  }

  export type ClaveCountAggregateInputType = {
    id?: true
    texto?: true
    usada?: true
    juegoId?: true
    ventaId?: true
    _all?: true
  }

  export type ClaveAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Clave to aggregate.
     */
    where?: ClaveWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Claves to fetch.
     */
    orderBy?: ClaveOrderByWithRelationInput | ClaveOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ClaveWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Claves from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Claves.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Claves
    **/
    _count?: true | ClaveCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ClaveAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ClaveSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ClaveMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ClaveMaxAggregateInputType
  }

  export type GetClaveAggregateType<T extends ClaveAggregateArgs> = {
        [P in keyof T & keyof AggregateClave]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateClave[P]>
      : GetScalarType<T[P], AggregateClave[P]>
  }




  export type ClaveGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ClaveWhereInput
    orderBy?: ClaveOrderByWithAggregationInput | ClaveOrderByWithAggregationInput[]
    by: ClaveScalarFieldEnum[] | ClaveScalarFieldEnum
    having?: ClaveScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ClaveCountAggregateInputType | true
    _avg?: ClaveAvgAggregateInputType
    _sum?: ClaveSumAggregateInputType
    _min?: ClaveMinAggregateInputType
    _max?: ClaveMaxAggregateInputType
  }

  export type ClaveGroupByOutputType = {
    id: number
    texto: string
    usada: boolean
    juegoId: number
    ventaId: number
    _count: ClaveCountAggregateOutputType | null
    _avg: ClaveAvgAggregateOutputType | null
    _sum: ClaveSumAggregateOutputType | null
    _min: ClaveMinAggregateOutputType | null
    _max: ClaveMaxAggregateOutputType | null
  }

  type GetClaveGroupByPayload<T extends ClaveGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ClaveGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ClaveGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ClaveGroupByOutputType[P]>
            : GetScalarType<T[P], ClaveGroupByOutputType[P]>
        }
      >
    >


  export type ClaveSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    texto?: boolean
    usada?: boolean
    juegoId?: boolean
    ventaId?: boolean
    juego?: boolean | JuegoDefaultArgs<ExtArgs>
    venta?: boolean | VentaDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["clave"]>

  export type ClaveSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    texto?: boolean
    usada?: boolean
    juegoId?: boolean
    ventaId?: boolean
    juego?: boolean | JuegoDefaultArgs<ExtArgs>
    venta?: boolean | VentaDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["clave"]>

  export type ClaveSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    texto?: boolean
    usada?: boolean
    juegoId?: boolean
    ventaId?: boolean
    juego?: boolean | JuegoDefaultArgs<ExtArgs>
    venta?: boolean | VentaDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["clave"]>

  export type ClaveSelectScalar = {
    id?: boolean
    texto?: boolean
    usada?: boolean
    juegoId?: boolean
    ventaId?: boolean
  }

  export type ClaveOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "texto" | "usada" | "juegoId" | "ventaId", ExtArgs["result"]["clave"]>
  export type ClaveInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    juego?: boolean | JuegoDefaultArgs<ExtArgs>
    venta?: boolean | VentaDefaultArgs<ExtArgs>
  }
  export type ClaveIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    juego?: boolean | JuegoDefaultArgs<ExtArgs>
    venta?: boolean | VentaDefaultArgs<ExtArgs>
  }
  export type ClaveIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    juego?: boolean | JuegoDefaultArgs<ExtArgs>
    venta?: boolean | VentaDefaultArgs<ExtArgs>
  }

  export type $ClavePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Clave"
    objects: {
      juego: Prisma.$JuegoPayload<ExtArgs>
      venta: Prisma.$VentaPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      texto: string
      usada: boolean
      juegoId: number
      ventaId: number
    }, ExtArgs["result"]["clave"]>
    composites: {}
  }

  type ClaveGetPayload<S extends boolean | null | undefined | ClaveDefaultArgs> = $Result.GetResult<Prisma.$ClavePayload, S>

  type ClaveCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ClaveFindManyArgs, 'select' | 'include' | 'distinct' | 'omit' | 'relationLoadStrategy'> & {
      select?: ClaveCountAggregateInputType | true
    }

  export interface ClaveDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Clave'], meta: { name: 'Clave' } }
    /**
     * Find zero or one Clave that matches the filter.
     * @param {ClaveFindUniqueArgs} args - Arguments to find a Clave
     * @example
     * // Get one Clave
     * const clave = await prisma.clave.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ClaveFindUniqueArgs>(args: SelectSubset<T, ClaveFindUniqueArgs<ExtArgs>>): Prisma__ClaveClient<$Result.GetResult<Prisma.$ClavePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Clave that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ClaveFindUniqueOrThrowArgs} args - Arguments to find a Clave
     * @example
     * // Get one Clave
     * const clave = await prisma.clave.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ClaveFindUniqueOrThrowArgs>(args: SelectSubset<T, ClaveFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ClaveClient<$Result.GetResult<Prisma.$ClavePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Clave that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClaveFindFirstArgs} args - Arguments to find a Clave
     * @example
     * // Get one Clave
     * const clave = await prisma.clave.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ClaveFindFirstArgs>(args?: SelectSubset<T, ClaveFindFirstArgs<ExtArgs>>): Prisma__ClaveClient<$Result.GetResult<Prisma.$ClavePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Clave that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClaveFindFirstOrThrowArgs} args - Arguments to find a Clave
     * @example
     * // Get one Clave
     * const clave = await prisma.clave.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ClaveFindFirstOrThrowArgs>(args?: SelectSubset<T, ClaveFindFirstOrThrowArgs<ExtArgs>>): Prisma__ClaveClient<$Result.GetResult<Prisma.$ClavePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Claves that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClaveFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Claves
     * const claves = await prisma.clave.findMany()
     * 
     * // Get first 10 Claves
     * const claves = await prisma.clave.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const claveWithIdOnly = await prisma.clave.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ClaveFindManyArgs>(args?: SelectSubset<T, ClaveFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClavePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Clave.
     * @param {ClaveCreateArgs} args - Arguments to create a Clave.
     * @example
     * // Create one Clave
     * const Clave = await prisma.clave.create({
     *   data: {
     *     // ... data to create a Clave
     *   }
     * })
     * 
     */
    create<T extends ClaveCreateArgs>(args: SelectSubset<T, ClaveCreateArgs<ExtArgs>>): Prisma__ClaveClient<$Result.GetResult<Prisma.$ClavePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Claves.
     * @param {ClaveCreateManyArgs} args - Arguments to create many Claves.
     * @example
     * // Create many Claves
     * const clave = await prisma.clave.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ClaveCreateManyArgs>(args?: SelectSubset<T, ClaveCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Claves and returns the data saved in the database.
     * @param {ClaveCreateManyAndReturnArgs} args - Arguments to create many Claves.
     * @example
     * // Create many Claves
     * const clave = await prisma.clave.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Claves and only return the `id`
     * const claveWithIdOnly = await prisma.clave.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ClaveCreateManyAndReturnArgs>(args?: SelectSubset<T, ClaveCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClavePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Clave.
     * @param {ClaveDeleteArgs} args - Arguments to delete one Clave.
     * @example
     * // Delete one Clave
     * const Clave = await prisma.clave.delete({
     *   where: {
     *     // ... filter to delete one Clave
     *   }
     * })
     * 
     */
    delete<T extends ClaveDeleteArgs>(args: SelectSubset<T, ClaveDeleteArgs<ExtArgs>>): Prisma__ClaveClient<$Result.GetResult<Prisma.$ClavePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Clave.
     * @param {ClaveUpdateArgs} args - Arguments to update one Clave.
     * @example
     * // Update one Clave
     * const clave = await prisma.clave.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ClaveUpdateArgs>(args: SelectSubset<T, ClaveUpdateArgs<ExtArgs>>): Prisma__ClaveClient<$Result.GetResult<Prisma.$ClavePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Claves.
     * @param {ClaveDeleteManyArgs} args - Arguments to filter Claves to delete.
     * @example
     * // Delete a few Claves
     * const { count } = await prisma.clave.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ClaveDeleteManyArgs>(args?: SelectSubset<T, ClaveDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Claves.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClaveUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Claves
     * const clave = await prisma.clave.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ClaveUpdateManyArgs>(args: SelectSubset<T, ClaveUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Claves and returns the data updated in the database.
     * @param {ClaveUpdateManyAndReturnArgs} args - Arguments to update many Claves.
     * @example
     * // Update many Claves
     * const clave = await prisma.clave.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Claves and only return the `id`
     * const claveWithIdOnly = await prisma.clave.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ClaveUpdateManyAndReturnArgs>(args: SelectSubset<T, ClaveUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClavePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Clave.
     * @param {ClaveUpsertArgs} args - Arguments to update or create a Clave.
     * @example
     * // Update or create a Clave
     * const clave = await prisma.clave.upsert({
     *   create: {
     *     // ... data to create a Clave
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Clave we want to update
     *   }
     * })
     */
    upsert<T extends ClaveUpsertArgs>(args: SelectSubset<T, ClaveUpsertArgs<ExtArgs>>): Prisma__ClaveClient<$Result.GetResult<Prisma.$ClavePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Claves.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClaveCountArgs} args - Arguments to filter Claves to count.
     * @example
     * // Count the number of Claves
     * const count = await prisma.clave.count({
     *   where: {
     *     // ... the filter for the Claves we want to count
     *   }
     * })
    **/
    count<T extends ClaveCountArgs>(
      args?: Subset<T, ClaveCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ClaveCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Clave.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClaveAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ClaveAggregateArgs>(args: Subset<T, ClaveAggregateArgs>): Prisma.PrismaPromise<GetClaveAggregateType<T>>

    /**
     * Group by Clave.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClaveGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ClaveGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ClaveGroupByArgs['orderBy'] }
        : { orderBy?: ClaveGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ClaveGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetClaveGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Clave model
   */
  readonly fields: ClaveFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Clave.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ClaveClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    juego<T extends JuegoDefaultArgs<ExtArgs> = {}>(args?: Subset<T, JuegoDefaultArgs<ExtArgs>>): Prisma__JuegoClient<$Result.GetResult<Prisma.$JuegoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    venta<T extends VentaDefaultArgs<ExtArgs> = {}>(args?: Subset<T, VentaDefaultArgs<ExtArgs>>): Prisma__VentaClient<$Result.GetResult<Prisma.$VentaPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Clave model
   */
  interface ClaveFieldRefs {
    readonly id: FieldRef<"Clave", 'Int'>
    readonly texto: FieldRef<"Clave", 'String'>
    readonly usada: FieldRef<"Clave", 'Boolean'>
    readonly juegoId: FieldRef<"Clave", 'Int'>
    readonly ventaId: FieldRef<"Clave", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Clave findUnique
   */
  export type ClaveFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Clave
     */
    select?: ClaveSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Clave
     */
    omit?: ClaveOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClaveInclude<ExtArgs> | null
    /**
     * Filter, which Clave to fetch.
     */
    where: ClaveWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * Clave findUniqueOrThrow
   */
  export type ClaveFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Clave
     */
    select?: ClaveSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Clave
     */
    omit?: ClaveOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClaveInclude<ExtArgs> | null
    /**
     * Filter, which Clave to fetch.
     */
    where: ClaveWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * Clave findFirst
   */
  export type ClaveFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Clave
     */
    select?: ClaveSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Clave
     */
    omit?: ClaveOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClaveInclude<ExtArgs> | null
    /**
     * Filter, which Clave to fetch.
     */
    where?: ClaveWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Claves to fetch.
     */
    orderBy?: ClaveOrderByWithRelationInput | ClaveOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Claves.
     */
    cursor?: ClaveWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Claves from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Claves.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Claves.
     */
    distinct?: ClaveScalarFieldEnum | ClaveScalarFieldEnum[]
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * Clave findFirstOrThrow
   */
  export type ClaveFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Clave
     */
    select?: ClaveSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Clave
     */
    omit?: ClaveOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClaveInclude<ExtArgs> | null
    /**
     * Filter, which Clave to fetch.
     */
    where?: ClaveWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Claves to fetch.
     */
    orderBy?: ClaveOrderByWithRelationInput | ClaveOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Claves.
     */
    cursor?: ClaveWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Claves from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Claves.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Claves.
     */
    distinct?: ClaveScalarFieldEnum | ClaveScalarFieldEnum[]
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * Clave findMany
   */
  export type ClaveFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Clave
     */
    select?: ClaveSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Clave
     */
    omit?: ClaveOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClaveInclude<ExtArgs> | null
    /**
     * Filter, which Claves to fetch.
     */
    where?: ClaveWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Claves to fetch.
     */
    orderBy?: ClaveOrderByWithRelationInput | ClaveOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Claves.
     */
    cursor?: ClaveWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Claves from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Claves.
     */
    skip?: number
    distinct?: ClaveScalarFieldEnum | ClaveScalarFieldEnum[]
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * Clave create
   */
  export type ClaveCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Clave
     */
    select?: ClaveSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Clave
     */
    omit?: ClaveOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClaveInclude<ExtArgs> | null
    /**
     * The data needed to create a Clave.
     */
    data: XOR<ClaveCreateInput, ClaveUncheckedCreateInput>
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * Clave createMany
   */
  export type ClaveCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Claves.
     */
    data: ClaveCreateManyInput | ClaveCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Clave createManyAndReturn
   */
  export type ClaveCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Clave
     */
    select?: ClaveSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Clave
     */
    omit?: ClaveOmit<ExtArgs> | null
    /**
     * The data used to create many Claves.
     */
    data: ClaveCreateManyInput | ClaveCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClaveIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Clave update
   */
  export type ClaveUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Clave
     */
    select?: ClaveSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Clave
     */
    omit?: ClaveOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClaveInclude<ExtArgs> | null
    /**
     * The data needed to update a Clave.
     */
    data: XOR<ClaveUpdateInput, ClaveUncheckedUpdateInput>
    /**
     * Choose, which Clave to update.
     */
    where: ClaveWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * Clave updateMany
   */
  export type ClaveUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Claves.
     */
    data: XOR<ClaveUpdateManyMutationInput, ClaveUncheckedUpdateManyInput>
    /**
     * Filter which Claves to update
     */
    where?: ClaveWhereInput
    /**
     * Limit how many Claves to update.
     */
    limit?: number
  }

  /**
   * Clave updateManyAndReturn
   */
  export type ClaveUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Clave
     */
    select?: ClaveSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Clave
     */
    omit?: ClaveOmit<ExtArgs> | null
    /**
     * The data used to update Claves.
     */
    data: XOR<ClaveUpdateManyMutationInput, ClaveUncheckedUpdateManyInput>
    /**
     * Filter which Claves to update
     */
    where?: ClaveWhereInput
    /**
     * Limit how many Claves to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClaveIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Clave upsert
   */
  export type ClaveUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Clave
     */
    select?: ClaveSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Clave
     */
    omit?: ClaveOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClaveInclude<ExtArgs> | null
    /**
     * The filter to search for the Clave to update in case it exists.
     */
    where: ClaveWhereUniqueInput
    /**
     * In case the Clave found by the `where` argument doesn't exist, create a new Clave with this data.
     */
    create: XOR<ClaveCreateInput, ClaveUncheckedCreateInput>
    /**
     * In case the Clave was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ClaveUpdateInput, ClaveUncheckedUpdateInput>
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * Clave delete
   */
  export type ClaveDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Clave
     */
    select?: ClaveSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Clave
     */
    omit?: ClaveOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClaveInclude<ExtArgs> | null
    /**
     * Filter which Clave to delete.
     */
    where: ClaveWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * Clave deleteMany
   */
  export type ClaveDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Claves to delete
     */
    where?: ClaveWhereInput
    /**
     * Limit how many Claves to delete.
     */
    limit?: number
  }

  /**
   * Clave without action
   */
  export type ClaveDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Clave
     */
    select?: ClaveSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Clave
     */
    omit?: ClaveOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClaveInclude<ExtArgs> | null
  }


  /**
   * Model CategoriaXJuego
   */

  export type AggregateCategoriaXJuego = {
    _count: CategoriaXJuegoCountAggregateOutputType | null
    _avg: CategoriaXJuegoAvgAggregateOutputType | null
    _sum: CategoriaXJuegoSumAggregateOutputType | null
    _min: CategoriaXJuegoMinAggregateOutputType | null
    _max: CategoriaXJuegoMaxAggregateOutputType | null
  }

  export type CategoriaXJuegoAvgAggregateOutputType = {
    id: number | null
    juegoId: number | null
    categoriaId: number | null
  }

  export type CategoriaXJuegoSumAggregateOutputType = {
    id: number | null
    juegoId: number | null
    categoriaId: number | null
  }

  export type CategoriaXJuegoMinAggregateOutputType = {
    id: number | null
    juegoId: number | null
    categoriaId: number | null
  }

  export type CategoriaXJuegoMaxAggregateOutputType = {
    id: number | null
    juegoId: number | null
    categoriaId: number | null
  }

  export type CategoriaXJuegoCountAggregateOutputType = {
    id: number
    juegoId: number
    categoriaId: number
    _all: number
  }


  export type CategoriaXJuegoAvgAggregateInputType = {
    id?: true
    juegoId?: true
    categoriaId?: true
  }

  export type CategoriaXJuegoSumAggregateInputType = {
    id?: true
    juegoId?: true
    categoriaId?: true
  }

  export type CategoriaXJuegoMinAggregateInputType = {
    id?: true
    juegoId?: true
    categoriaId?: true
  }

  export type CategoriaXJuegoMaxAggregateInputType = {
    id?: true
    juegoId?: true
    categoriaId?: true
  }

  export type CategoriaXJuegoCountAggregateInputType = {
    id?: true
    juegoId?: true
    categoriaId?: true
    _all?: true
  }

  export type CategoriaXJuegoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CategoriaXJuego to aggregate.
     */
    where?: CategoriaXJuegoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CategoriaXJuegos to fetch.
     */
    orderBy?: CategoriaXJuegoOrderByWithRelationInput | CategoriaXJuegoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CategoriaXJuegoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CategoriaXJuegos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CategoriaXJuegos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CategoriaXJuegos
    **/
    _count?: true | CategoriaXJuegoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CategoriaXJuegoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CategoriaXJuegoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CategoriaXJuegoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CategoriaXJuegoMaxAggregateInputType
  }

  export type GetCategoriaXJuegoAggregateType<T extends CategoriaXJuegoAggregateArgs> = {
        [P in keyof T & keyof AggregateCategoriaXJuego]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCategoriaXJuego[P]>
      : GetScalarType<T[P], AggregateCategoriaXJuego[P]>
  }




  export type CategoriaXJuegoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CategoriaXJuegoWhereInput
    orderBy?: CategoriaXJuegoOrderByWithAggregationInput | CategoriaXJuegoOrderByWithAggregationInput[]
    by: CategoriaXJuegoScalarFieldEnum[] | CategoriaXJuegoScalarFieldEnum
    having?: CategoriaXJuegoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CategoriaXJuegoCountAggregateInputType | true
    _avg?: CategoriaXJuegoAvgAggregateInputType
    _sum?: CategoriaXJuegoSumAggregateInputType
    _min?: CategoriaXJuegoMinAggregateInputType
    _max?: CategoriaXJuegoMaxAggregateInputType
  }

  export type CategoriaXJuegoGroupByOutputType = {
    id: number
    juegoId: number
    categoriaId: number
    _count: CategoriaXJuegoCountAggregateOutputType | null
    _avg: CategoriaXJuegoAvgAggregateOutputType | null
    _sum: CategoriaXJuegoSumAggregateOutputType | null
    _min: CategoriaXJuegoMinAggregateOutputType | null
    _max: CategoriaXJuegoMaxAggregateOutputType | null
  }

  type GetCategoriaXJuegoGroupByPayload<T extends CategoriaXJuegoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CategoriaXJuegoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CategoriaXJuegoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CategoriaXJuegoGroupByOutputType[P]>
            : GetScalarType<T[P], CategoriaXJuegoGroupByOutputType[P]>
        }
      >
    >


  export type CategoriaXJuegoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    juegoId?: boolean
    categoriaId?: boolean
    juego?: boolean | JuegoDefaultArgs<ExtArgs>
    categoria?: boolean | CategoriaDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["categoriaXJuego"]>

  export type CategoriaXJuegoSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    juegoId?: boolean
    categoriaId?: boolean
    juego?: boolean | JuegoDefaultArgs<ExtArgs>
    categoria?: boolean | CategoriaDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["categoriaXJuego"]>

  export type CategoriaXJuegoSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    juegoId?: boolean
    categoriaId?: boolean
    juego?: boolean | JuegoDefaultArgs<ExtArgs>
    categoria?: boolean | CategoriaDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["categoriaXJuego"]>

  export type CategoriaXJuegoSelectScalar = {
    id?: boolean
    juegoId?: boolean
    categoriaId?: boolean
  }

  export type CategoriaXJuegoOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "juegoId" | "categoriaId", ExtArgs["result"]["categoriaXJuego"]>
  export type CategoriaXJuegoInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    juego?: boolean | JuegoDefaultArgs<ExtArgs>
    categoria?: boolean | CategoriaDefaultArgs<ExtArgs>
  }
  export type CategoriaXJuegoIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    juego?: boolean | JuegoDefaultArgs<ExtArgs>
    categoria?: boolean | CategoriaDefaultArgs<ExtArgs>
  }
  export type CategoriaXJuegoIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    juego?: boolean | JuegoDefaultArgs<ExtArgs>
    categoria?: boolean | CategoriaDefaultArgs<ExtArgs>
  }

  export type $CategoriaXJuegoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CategoriaXJuego"
    objects: {
      juego: Prisma.$JuegoPayload<ExtArgs>
      categoria: Prisma.$CategoriaPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      juegoId: number
      categoriaId: number
    }, ExtArgs["result"]["categoriaXJuego"]>
    composites: {}
  }

  type CategoriaXJuegoGetPayload<S extends boolean | null | undefined | CategoriaXJuegoDefaultArgs> = $Result.GetResult<Prisma.$CategoriaXJuegoPayload, S>

  type CategoriaXJuegoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CategoriaXJuegoFindManyArgs, 'select' | 'include' | 'distinct' | 'omit' | 'relationLoadStrategy'> & {
      select?: CategoriaXJuegoCountAggregateInputType | true
    }

  export interface CategoriaXJuegoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CategoriaXJuego'], meta: { name: 'CategoriaXJuego' } }
    /**
     * Find zero or one CategoriaXJuego that matches the filter.
     * @param {CategoriaXJuegoFindUniqueArgs} args - Arguments to find a CategoriaXJuego
     * @example
     * // Get one CategoriaXJuego
     * const categoriaXJuego = await prisma.categoriaXJuego.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CategoriaXJuegoFindUniqueArgs>(args: SelectSubset<T, CategoriaXJuegoFindUniqueArgs<ExtArgs>>): Prisma__CategoriaXJuegoClient<$Result.GetResult<Prisma.$CategoriaXJuegoPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one CategoriaXJuego that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CategoriaXJuegoFindUniqueOrThrowArgs} args - Arguments to find a CategoriaXJuego
     * @example
     * // Get one CategoriaXJuego
     * const categoriaXJuego = await prisma.categoriaXJuego.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CategoriaXJuegoFindUniqueOrThrowArgs>(args: SelectSubset<T, CategoriaXJuegoFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CategoriaXJuegoClient<$Result.GetResult<Prisma.$CategoriaXJuegoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CategoriaXJuego that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoriaXJuegoFindFirstArgs} args - Arguments to find a CategoriaXJuego
     * @example
     * // Get one CategoriaXJuego
     * const categoriaXJuego = await prisma.categoriaXJuego.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CategoriaXJuegoFindFirstArgs>(args?: SelectSubset<T, CategoriaXJuegoFindFirstArgs<ExtArgs>>): Prisma__CategoriaXJuegoClient<$Result.GetResult<Prisma.$CategoriaXJuegoPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CategoriaXJuego that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoriaXJuegoFindFirstOrThrowArgs} args - Arguments to find a CategoriaXJuego
     * @example
     * // Get one CategoriaXJuego
     * const categoriaXJuego = await prisma.categoriaXJuego.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CategoriaXJuegoFindFirstOrThrowArgs>(args?: SelectSubset<T, CategoriaXJuegoFindFirstOrThrowArgs<ExtArgs>>): Prisma__CategoriaXJuegoClient<$Result.GetResult<Prisma.$CategoriaXJuegoPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more CategoriaXJuegos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoriaXJuegoFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CategoriaXJuegos
     * const categoriaXJuegos = await prisma.categoriaXJuego.findMany()
     * 
     * // Get first 10 CategoriaXJuegos
     * const categoriaXJuegos = await prisma.categoriaXJuego.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const categoriaXJuegoWithIdOnly = await prisma.categoriaXJuego.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CategoriaXJuegoFindManyArgs>(args?: SelectSubset<T, CategoriaXJuegoFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CategoriaXJuegoPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a CategoriaXJuego.
     * @param {CategoriaXJuegoCreateArgs} args - Arguments to create a CategoriaXJuego.
     * @example
     * // Create one CategoriaXJuego
     * const CategoriaXJuego = await prisma.categoriaXJuego.create({
     *   data: {
     *     // ... data to create a CategoriaXJuego
     *   }
     * })
     * 
     */
    create<T extends CategoriaXJuegoCreateArgs>(args: SelectSubset<T, CategoriaXJuegoCreateArgs<ExtArgs>>): Prisma__CategoriaXJuegoClient<$Result.GetResult<Prisma.$CategoriaXJuegoPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many CategoriaXJuegos.
     * @param {CategoriaXJuegoCreateManyArgs} args - Arguments to create many CategoriaXJuegos.
     * @example
     * // Create many CategoriaXJuegos
     * const categoriaXJuego = await prisma.categoriaXJuego.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CategoriaXJuegoCreateManyArgs>(args?: SelectSubset<T, CategoriaXJuegoCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many CategoriaXJuegos and returns the data saved in the database.
     * @param {CategoriaXJuegoCreateManyAndReturnArgs} args - Arguments to create many CategoriaXJuegos.
     * @example
     * // Create many CategoriaXJuegos
     * const categoriaXJuego = await prisma.categoriaXJuego.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many CategoriaXJuegos and only return the `id`
     * const categoriaXJuegoWithIdOnly = await prisma.categoriaXJuego.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CategoriaXJuegoCreateManyAndReturnArgs>(args?: SelectSubset<T, CategoriaXJuegoCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CategoriaXJuegoPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a CategoriaXJuego.
     * @param {CategoriaXJuegoDeleteArgs} args - Arguments to delete one CategoriaXJuego.
     * @example
     * // Delete one CategoriaXJuego
     * const CategoriaXJuego = await prisma.categoriaXJuego.delete({
     *   where: {
     *     // ... filter to delete one CategoriaXJuego
     *   }
     * })
     * 
     */
    delete<T extends CategoriaXJuegoDeleteArgs>(args: SelectSubset<T, CategoriaXJuegoDeleteArgs<ExtArgs>>): Prisma__CategoriaXJuegoClient<$Result.GetResult<Prisma.$CategoriaXJuegoPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one CategoriaXJuego.
     * @param {CategoriaXJuegoUpdateArgs} args - Arguments to update one CategoriaXJuego.
     * @example
     * // Update one CategoriaXJuego
     * const categoriaXJuego = await prisma.categoriaXJuego.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CategoriaXJuegoUpdateArgs>(args: SelectSubset<T, CategoriaXJuegoUpdateArgs<ExtArgs>>): Prisma__CategoriaXJuegoClient<$Result.GetResult<Prisma.$CategoriaXJuegoPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more CategoriaXJuegos.
     * @param {CategoriaXJuegoDeleteManyArgs} args - Arguments to filter CategoriaXJuegos to delete.
     * @example
     * // Delete a few CategoriaXJuegos
     * const { count } = await prisma.categoriaXJuego.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CategoriaXJuegoDeleteManyArgs>(args?: SelectSubset<T, CategoriaXJuegoDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CategoriaXJuegos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoriaXJuegoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CategoriaXJuegos
     * const categoriaXJuego = await prisma.categoriaXJuego.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CategoriaXJuegoUpdateManyArgs>(args: SelectSubset<T, CategoriaXJuegoUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CategoriaXJuegos and returns the data updated in the database.
     * @param {CategoriaXJuegoUpdateManyAndReturnArgs} args - Arguments to update many CategoriaXJuegos.
     * @example
     * // Update many CategoriaXJuegos
     * const categoriaXJuego = await prisma.categoriaXJuego.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more CategoriaXJuegos and only return the `id`
     * const categoriaXJuegoWithIdOnly = await prisma.categoriaXJuego.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CategoriaXJuegoUpdateManyAndReturnArgs>(args: SelectSubset<T, CategoriaXJuegoUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CategoriaXJuegoPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one CategoriaXJuego.
     * @param {CategoriaXJuegoUpsertArgs} args - Arguments to update or create a CategoriaXJuego.
     * @example
     * // Update or create a CategoriaXJuego
     * const categoriaXJuego = await prisma.categoriaXJuego.upsert({
     *   create: {
     *     // ... data to create a CategoriaXJuego
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CategoriaXJuego we want to update
     *   }
     * })
     */
    upsert<T extends CategoriaXJuegoUpsertArgs>(args: SelectSubset<T, CategoriaXJuegoUpsertArgs<ExtArgs>>): Prisma__CategoriaXJuegoClient<$Result.GetResult<Prisma.$CategoriaXJuegoPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of CategoriaXJuegos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoriaXJuegoCountArgs} args - Arguments to filter CategoriaXJuegos to count.
     * @example
     * // Count the number of CategoriaXJuegos
     * const count = await prisma.categoriaXJuego.count({
     *   where: {
     *     // ... the filter for the CategoriaXJuegos we want to count
     *   }
     * })
    **/
    count<T extends CategoriaXJuegoCountArgs>(
      args?: Subset<T, CategoriaXJuegoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CategoriaXJuegoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CategoriaXJuego.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoriaXJuegoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CategoriaXJuegoAggregateArgs>(args: Subset<T, CategoriaXJuegoAggregateArgs>): Prisma.PrismaPromise<GetCategoriaXJuegoAggregateType<T>>

    /**
     * Group by CategoriaXJuego.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoriaXJuegoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CategoriaXJuegoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CategoriaXJuegoGroupByArgs['orderBy'] }
        : { orderBy?: CategoriaXJuegoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CategoriaXJuegoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCategoriaXJuegoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CategoriaXJuego model
   */
  readonly fields: CategoriaXJuegoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CategoriaXJuego.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CategoriaXJuegoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    juego<T extends JuegoDefaultArgs<ExtArgs> = {}>(args?: Subset<T, JuegoDefaultArgs<ExtArgs>>): Prisma__JuegoClient<$Result.GetResult<Prisma.$JuegoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    categoria<T extends CategoriaDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CategoriaDefaultArgs<ExtArgs>>): Prisma__CategoriaClient<$Result.GetResult<Prisma.$CategoriaPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CategoriaXJuego model
   */
  interface CategoriaXJuegoFieldRefs {
    readonly id: FieldRef<"CategoriaXJuego", 'Int'>
    readonly juegoId: FieldRef<"CategoriaXJuego", 'Int'>
    readonly categoriaId: FieldRef<"CategoriaXJuego", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * CategoriaXJuego findUnique
   */
  export type CategoriaXJuegoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CategoriaXJuego
     */
    select?: CategoriaXJuegoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CategoriaXJuego
     */
    omit?: CategoriaXJuegoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoriaXJuegoInclude<ExtArgs> | null
    /**
     * Filter, which CategoriaXJuego to fetch.
     */
    where: CategoriaXJuegoWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * CategoriaXJuego findUniqueOrThrow
   */
  export type CategoriaXJuegoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CategoriaXJuego
     */
    select?: CategoriaXJuegoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CategoriaXJuego
     */
    omit?: CategoriaXJuegoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoriaXJuegoInclude<ExtArgs> | null
    /**
     * Filter, which CategoriaXJuego to fetch.
     */
    where: CategoriaXJuegoWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * CategoriaXJuego findFirst
   */
  export type CategoriaXJuegoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CategoriaXJuego
     */
    select?: CategoriaXJuegoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CategoriaXJuego
     */
    omit?: CategoriaXJuegoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoriaXJuegoInclude<ExtArgs> | null
    /**
     * Filter, which CategoriaXJuego to fetch.
     */
    where?: CategoriaXJuegoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CategoriaXJuegos to fetch.
     */
    orderBy?: CategoriaXJuegoOrderByWithRelationInput | CategoriaXJuegoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CategoriaXJuegos.
     */
    cursor?: CategoriaXJuegoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CategoriaXJuegos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CategoriaXJuegos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CategoriaXJuegos.
     */
    distinct?: CategoriaXJuegoScalarFieldEnum | CategoriaXJuegoScalarFieldEnum[]
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * CategoriaXJuego findFirstOrThrow
   */
  export type CategoriaXJuegoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CategoriaXJuego
     */
    select?: CategoriaXJuegoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CategoriaXJuego
     */
    omit?: CategoriaXJuegoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoriaXJuegoInclude<ExtArgs> | null
    /**
     * Filter, which CategoriaXJuego to fetch.
     */
    where?: CategoriaXJuegoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CategoriaXJuegos to fetch.
     */
    orderBy?: CategoriaXJuegoOrderByWithRelationInput | CategoriaXJuegoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CategoriaXJuegos.
     */
    cursor?: CategoriaXJuegoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CategoriaXJuegos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CategoriaXJuegos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CategoriaXJuegos.
     */
    distinct?: CategoriaXJuegoScalarFieldEnum | CategoriaXJuegoScalarFieldEnum[]
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * CategoriaXJuego findMany
   */
  export type CategoriaXJuegoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CategoriaXJuego
     */
    select?: CategoriaXJuegoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CategoriaXJuego
     */
    omit?: CategoriaXJuegoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoriaXJuegoInclude<ExtArgs> | null
    /**
     * Filter, which CategoriaXJuegos to fetch.
     */
    where?: CategoriaXJuegoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CategoriaXJuegos to fetch.
     */
    orderBy?: CategoriaXJuegoOrderByWithRelationInput | CategoriaXJuegoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CategoriaXJuegos.
     */
    cursor?: CategoriaXJuegoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CategoriaXJuegos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CategoriaXJuegos.
     */
    skip?: number
    distinct?: CategoriaXJuegoScalarFieldEnum | CategoriaXJuegoScalarFieldEnum[]
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * CategoriaXJuego create
   */
  export type CategoriaXJuegoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CategoriaXJuego
     */
    select?: CategoriaXJuegoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CategoriaXJuego
     */
    omit?: CategoriaXJuegoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoriaXJuegoInclude<ExtArgs> | null
    /**
     * The data needed to create a CategoriaXJuego.
     */
    data: XOR<CategoriaXJuegoCreateInput, CategoriaXJuegoUncheckedCreateInput>
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * CategoriaXJuego createMany
   */
  export type CategoriaXJuegoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CategoriaXJuegos.
     */
    data: CategoriaXJuegoCreateManyInput | CategoriaXJuegoCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CategoriaXJuego createManyAndReturn
   */
  export type CategoriaXJuegoCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CategoriaXJuego
     */
    select?: CategoriaXJuegoSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CategoriaXJuego
     */
    omit?: CategoriaXJuegoOmit<ExtArgs> | null
    /**
     * The data used to create many CategoriaXJuegos.
     */
    data: CategoriaXJuegoCreateManyInput | CategoriaXJuegoCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoriaXJuegoIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * CategoriaXJuego update
   */
  export type CategoriaXJuegoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CategoriaXJuego
     */
    select?: CategoriaXJuegoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CategoriaXJuego
     */
    omit?: CategoriaXJuegoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoriaXJuegoInclude<ExtArgs> | null
    /**
     * The data needed to update a CategoriaXJuego.
     */
    data: XOR<CategoriaXJuegoUpdateInput, CategoriaXJuegoUncheckedUpdateInput>
    /**
     * Choose, which CategoriaXJuego to update.
     */
    where: CategoriaXJuegoWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * CategoriaXJuego updateMany
   */
  export type CategoriaXJuegoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CategoriaXJuegos.
     */
    data: XOR<CategoriaXJuegoUpdateManyMutationInput, CategoriaXJuegoUncheckedUpdateManyInput>
    /**
     * Filter which CategoriaXJuegos to update
     */
    where?: CategoriaXJuegoWhereInput
    /**
     * Limit how many CategoriaXJuegos to update.
     */
    limit?: number
  }

  /**
   * CategoriaXJuego updateManyAndReturn
   */
  export type CategoriaXJuegoUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CategoriaXJuego
     */
    select?: CategoriaXJuegoSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CategoriaXJuego
     */
    omit?: CategoriaXJuegoOmit<ExtArgs> | null
    /**
     * The data used to update CategoriaXJuegos.
     */
    data: XOR<CategoriaXJuegoUpdateManyMutationInput, CategoriaXJuegoUncheckedUpdateManyInput>
    /**
     * Filter which CategoriaXJuegos to update
     */
    where?: CategoriaXJuegoWhereInput
    /**
     * Limit how many CategoriaXJuegos to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoriaXJuegoIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * CategoriaXJuego upsert
   */
  export type CategoriaXJuegoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CategoriaXJuego
     */
    select?: CategoriaXJuegoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CategoriaXJuego
     */
    omit?: CategoriaXJuegoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoriaXJuegoInclude<ExtArgs> | null
    /**
     * The filter to search for the CategoriaXJuego to update in case it exists.
     */
    where: CategoriaXJuegoWhereUniqueInput
    /**
     * In case the CategoriaXJuego found by the `where` argument doesn't exist, create a new CategoriaXJuego with this data.
     */
    create: XOR<CategoriaXJuegoCreateInput, CategoriaXJuegoUncheckedCreateInput>
    /**
     * In case the CategoriaXJuego was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CategoriaXJuegoUpdateInput, CategoriaXJuegoUncheckedUpdateInput>
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * CategoriaXJuego delete
   */
  export type CategoriaXJuegoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CategoriaXJuego
     */
    select?: CategoriaXJuegoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CategoriaXJuego
     */
    omit?: CategoriaXJuegoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoriaXJuegoInclude<ExtArgs> | null
    /**
     * Filter which CategoriaXJuego to delete.
     */
    where: CategoriaXJuegoWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * CategoriaXJuego deleteMany
   */
  export type CategoriaXJuegoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CategoriaXJuegos to delete
     */
    where?: CategoriaXJuegoWhereInput
    /**
     * Limit how many CategoriaXJuegos to delete.
     */
    limit?: number
  }

  /**
   * CategoriaXJuego without action
   */
  export type CategoriaXJuegoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CategoriaXJuego
     */
    select?: CategoriaXJuegoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CategoriaXJuego
     */
    omit?: CategoriaXJuegoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoriaXJuegoInclude<ExtArgs> | null
  }


  /**
   * Model PlataformaXJuego
   */

  export type AggregatePlataformaXJuego = {
    _count: PlataformaXJuegoCountAggregateOutputType | null
    _avg: PlataformaXJuegoAvgAggregateOutputType | null
    _sum: PlataformaXJuegoSumAggregateOutputType | null
    _min: PlataformaXJuegoMinAggregateOutputType | null
    _max: PlataformaXJuegoMaxAggregateOutputType | null
  }

  export type PlataformaXJuegoAvgAggregateOutputType = {
    id: number | null
    juegoId: number | null
    plataformaId: number | null
  }

  export type PlataformaXJuegoSumAggregateOutputType = {
    id: number | null
    juegoId: number | null
    plataformaId: number | null
  }

  export type PlataformaXJuegoMinAggregateOutputType = {
    id: number | null
    juegoId: number | null
    plataformaId: number | null
  }

  export type PlataformaXJuegoMaxAggregateOutputType = {
    id: number | null
    juegoId: number | null
    plataformaId: number | null
  }

  export type PlataformaXJuegoCountAggregateOutputType = {
    id: number
    juegoId: number
    plataformaId: number
    _all: number
  }


  export type PlataformaXJuegoAvgAggregateInputType = {
    id?: true
    juegoId?: true
    plataformaId?: true
  }

  export type PlataformaXJuegoSumAggregateInputType = {
    id?: true
    juegoId?: true
    plataformaId?: true
  }

  export type PlataformaXJuegoMinAggregateInputType = {
    id?: true
    juegoId?: true
    plataformaId?: true
  }

  export type PlataformaXJuegoMaxAggregateInputType = {
    id?: true
    juegoId?: true
    plataformaId?: true
  }

  export type PlataformaXJuegoCountAggregateInputType = {
    id?: true
    juegoId?: true
    plataformaId?: true
    _all?: true
  }

  export type PlataformaXJuegoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PlataformaXJuego to aggregate.
     */
    where?: PlataformaXJuegoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PlataformaXJuegos to fetch.
     */
    orderBy?: PlataformaXJuegoOrderByWithRelationInput | PlataformaXJuegoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PlataformaXJuegoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PlataformaXJuegos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PlataformaXJuegos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PlataformaXJuegos
    **/
    _count?: true | PlataformaXJuegoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PlataformaXJuegoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PlataformaXJuegoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PlataformaXJuegoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PlataformaXJuegoMaxAggregateInputType
  }

  export type GetPlataformaXJuegoAggregateType<T extends PlataformaXJuegoAggregateArgs> = {
        [P in keyof T & keyof AggregatePlataformaXJuego]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePlataformaXJuego[P]>
      : GetScalarType<T[P], AggregatePlataformaXJuego[P]>
  }




  export type PlataformaXJuegoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PlataformaXJuegoWhereInput
    orderBy?: PlataformaXJuegoOrderByWithAggregationInput | PlataformaXJuegoOrderByWithAggregationInput[]
    by: PlataformaXJuegoScalarFieldEnum[] | PlataformaXJuegoScalarFieldEnum
    having?: PlataformaXJuegoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PlataformaXJuegoCountAggregateInputType | true
    _avg?: PlataformaXJuegoAvgAggregateInputType
    _sum?: PlataformaXJuegoSumAggregateInputType
    _min?: PlataformaXJuegoMinAggregateInputType
    _max?: PlataformaXJuegoMaxAggregateInputType
  }

  export type PlataformaXJuegoGroupByOutputType = {
    id: number
    juegoId: number
    plataformaId: number
    _count: PlataformaXJuegoCountAggregateOutputType | null
    _avg: PlataformaXJuegoAvgAggregateOutputType | null
    _sum: PlataformaXJuegoSumAggregateOutputType | null
    _min: PlataformaXJuegoMinAggregateOutputType | null
    _max: PlataformaXJuegoMaxAggregateOutputType | null
  }

  type GetPlataformaXJuegoGroupByPayload<T extends PlataformaXJuegoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PlataformaXJuegoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PlataformaXJuegoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PlataformaXJuegoGroupByOutputType[P]>
            : GetScalarType<T[P], PlataformaXJuegoGroupByOutputType[P]>
        }
      >
    >


  export type PlataformaXJuegoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    juegoId?: boolean
    plataformaId?: boolean
    juego?: boolean | JuegoDefaultArgs<ExtArgs>
    plataforma?: boolean | PlataformaDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["plataformaXJuego"]>

  export type PlataformaXJuegoSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    juegoId?: boolean
    plataformaId?: boolean
    juego?: boolean | JuegoDefaultArgs<ExtArgs>
    plataforma?: boolean | PlataformaDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["plataformaXJuego"]>

  export type PlataformaXJuegoSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    juegoId?: boolean
    plataformaId?: boolean
    juego?: boolean | JuegoDefaultArgs<ExtArgs>
    plataforma?: boolean | PlataformaDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["plataformaXJuego"]>

  export type PlataformaXJuegoSelectScalar = {
    id?: boolean
    juegoId?: boolean
    plataformaId?: boolean
  }

  export type PlataformaXJuegoOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "juegoId" | "plataformaId", ExtArgs["result"]["plataformaXJuego"]>
  export type PlataformaXJuegoInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    juego?: boolean | JuegoDefaultArgs<ExtArgs>
    plataforma?: boolean | PlataformaDefaultArgs<ExtArgs>
  }
  export type PlataformaXJuegoIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    juego?: boolean | JuegoDefaultArgs<ExtArgs>
    plataforma?: boolean | PlataformaDefaultArgs<ExtArgs>
  }
  export type PlataformaXJuegoIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    juego?: boolean | JuegoDefaultArgs<ExtArgs>
    plataforma?: boolean | PlataformaDefaultArgs<ExtArgs>
  }

  export type $PlataformaXJuegoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PlataformaXJuego"
    objects: {
      juego: Prisma.$JuegoPayload<ExtArgs>
      plataforma: Prisma.$PlataformaPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      juegoId: number
      plataformaId: number
    }, ExtArgs["result"]["plataformaXJuego"]>
    composites: {}
  }

  type PlataformaXJuegoGetPayload<S extends boolean | null | undefined | PlataformaXJuegoDefaultArgs> = $Result.GetResult<Prisma.$PlataformaXJuegoPayload, S>

  type PlataformaXJuegoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PlataformaXJuegoFindManyArgs, 'select' | 'include' | 'distinct' | 'omit' | 'relationLoadStrategy'> & {
      select?: PlataformaXJuegoCountAggregateInputType | true
    }

  export interface PlataformaXJuegoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PlataformaXJuego'], meta: { name: 'PlataformaXJuego' } }
    /**
     * Find zero or one PlataformaXJuego that matches the filter.
     * @param {PlataformaXJuegoFindUniqueArgs} args - Arguments to find a PlataformaXJuego
     * @example
     * // Get one PlataformaXJuego
     * const plataformaXJuego = await prisma.plataformaXJuego.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PlataformaXJuegoFindUniqueArgs>(args: SelectSubset<T, PlataformaXJuegoFindUniqueArgs<ExtArgs>>): Prisma__PlataformaXJuegoClient<$Result.GetResult<Prisma.$PlataformaXJuegoPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one PlataformaXJuego that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PlataformaXJuegoFindUniqueOrThrowArgs} args - Arguments to find a PlataformaXJuego
     * @example
     * // Get one PlataformaXJuego
     * const plataformaXJuego = await prisma.plataformaXJuego.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PlataformaXJuegoFindUniqueOrThrowArgs>(args: SelectSubset<T, PlataformaXJuegoFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PlataformaXJuegoClient<$Result.GetResult<Prisma.$PlataformaXJuegoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PlataformaXJuego that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlataformaXJuegoFindFirstArgs} args - Arguments to find a PlataformaXJuego
     * @example
     * // Get one PlataformaXJuego
     * const plataformaXJuego = await prisma.plataformaXJuego.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PlataformaXJuegoFindFirstArgs>(args?: SelectSubset<T, PlataformaXJuegoFindFirstArgs<ExtArgs>>): Prisma__PlataformaXJuegoClient<$Result.GetResult<Prisma.$PlataformaXJuegoPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PlataformaXJuego that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlataformaXJuegoFindFirstOrThrowArgs} args - Arguments to find a PlataformaXJuego
     * @example
     * // Get one PlataformaXJuego
     * const plataformaXJuego = await prisma.plataformaXJuego.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PlataformaXJuegoFindFirstOrThrowArgs>(args?: SelectSubset<T, PlataformaXJuegoFindFirstOrThrowArgs<ExtArgs>>): Prisma__PlataformaXJuegoClient<$Result.GetResult<Prisma.$PlataformaXJuegoPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more PlataformaXJuegos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlataformaXJuegoFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PlataformaXJuegos
     * const plataformaXJuegos = await prisma.plataformaXJuego.findMany()
     * 
     * // Get first 10 PlataformaXJuegos
     * const plataformaXJuegos = await prisma.plataformaXJuego.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const plataformaXJuegoWithIdOnly = await prisma.plataformaXJuego.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PlataformaXJuegoFindManyArgs>(args?: SelectSubset<T, PlataformaXJuegoFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlataformaXJuegoPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a PlataformaXJuego.
     * @param {PlataformaXJuegoCreateArgs} args - Arguments to create a PlataformaXJuego.
     * @example
     * // Create one PlataformaXJuego
     * const PlataformaXJuego = await prisma.plataformaXJuego.create({
     *   data: {
     *     // ... data to create a PlataformaXJuego
     *   }
     * })
     * 
     */
    create<T extends PlataformaXJuegoCreateArgs>(args: SelectSubset<T, PlataformaXJuegoCreateArgs<ExtArgs>>): Prisma__PlataformaXJuegoClient<$Result.GetResult<Prisma.$PlataformaXJuegoPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many PlataformaXJuegos.
     * @param {PlataformaXJuegoCreateManyArgs} args - Arguments to create many PlataformaXJuegos.
     * @example
     * // Create many PlataformaXJuegos
     * const plataformaXJuego = await prisma.plataformaXJuego.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PlataformaXJuegoCreateManyArgs>(args?: SelectSubset<T, PlataformaXJuegoCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PlataformaXJuegos and returns the data saved in the database.
     * @param {PlataformaXJuegoCreateManyAndReturnArgs} args - Arguments to create many PlataformaXJuegos.
     * @example
     * // Create many PlataformaXJuegos
     * const plataformaXJuego = await prisma.plataformaXJuego.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PlataformaXJuegos and only return the `id`
     * const plataformaXJuegoWithIdOnly = await prisma.plataformaXJuego.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PlataformaXJuegoCreateManyAndReturnArgs>(args?: SelectSubset<T, PlataformaXJuegoCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlataformaXJuegoPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a PlataformaXJuego.
     * @param {PlataformaXJuegoDeleteArgs} args - Arguments to delete one PlataformaXJuego.
     * @example
     * // Delete one PlataformaXJuego
     * const PlataformaXJuego = await prisma.plataformaXJuego.delete({
     *   where: {
     *     // ... filter to delete one PlataformaXJuego
     *   }
     * })
     * 
     */
    delete<T extends PlataformaXJuegoDeleteArgs>(args: SelectSubset<T, PlataformaXJuegoDeleteArgs<ExtArgs>>): Prisma__PlataformaXJuegoClient<$Result.GetResult<Prisma.$PlataformaXJuegoPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one PlataformaXJuego.
     * @param {PlataformaXJuegoUpdateArgs} args - Arguments to update one PlataformaXJuego.
     * @example
     * // Update one PlataformaXJuego
     * const plataformaXJuego = await prisma.plataformaXJuego.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PlataformaXJuegoUpdateArgs>(args: SelectSubset<T, PlataformaXJuegoUpdateArgs<ExtArgs>>): Prisma__PlataformaXJuegoClient<$Result.GetResult<Prisma.$PlataformaXJuegoPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more PlataformaXJuegos.
     * @param {PlataformaXJuegoDeleteManyArgs} args - Arguments to filter PlataformaXJuegos to delete.
     * @example
     * // Delete a few PlataformaXJuegos
     * const { count } = await prisma.plataformaXJuego.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PlataformaXJuegoDeleteManyArgs>(args?: SelectSubset<T, PlataformaXJuegoDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PlataformaXJuegos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlataformaXJuegoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PlataformaXJuegos
     * const plataformaXJuego = await prisma.plataformaXJuego.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PlataformaXJuegoUpdateManyArgs>(args: SelectSubset<T, PlataformaXJuegoUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PlataformaXJuegos and returns the data updated in the database.
     * @param {PlataformaXJuegoUpdateManyAndReturnArgs} args - Arguments to update many PlataformaXJuegos.
     * @example
     * // Update many PlataformaXJuegos
     * const plataformaXJuego = await prisma.plataformaXJuego.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more PlataformaXJuegos and only return the `id`
     * const plataformaXJuegoWithIdOnly = await prisma.plataformaXJuego.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PlataformaXJuegoUpdateManyAndReturnArgs>(args: SelectSubset<T, PlataformaXJuegoUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlataformaXJuegoPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one PlataformaXJuego.
     * @param {PlataformaXJuegoUpsertArgs} args - Arguments to update or create a PlataformaXJuego.
     * @example
     * // Update or create a PlataformaXJuego
     * const plataformaXJuego = await prisma.plataformaXJuego.upsert({
     *   create: {
     *     // ... data to create a PlataformaXJuego
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PlataformaXJuego we want to update
     *   }
     * })
     */
    upsert<T extends PlataformaXJuegoUpsertArgs>(args: SelectSubset<T, PlataformaXJuegoUpsertArgs<ExtArgs>>): Prisma__PlataformaXJuegoClient<$Result.GetResult<Prisma.$PlataformaXJuegoPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of PlataformaXJuegos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlataformaXJuegoCountArgs} args - Arguments to filter PlataformaXJuegos to count.
     * @example
     * // Count the number of PlataformaXJuegos
     * const count = await prisma.plataformaXJuego.count({
     *   where: {
     *     // ... the filter for the PlataformaXJuegos we want to count
     *   }
     * })
    **/
    count<T extends PlataformaXJuegoCountArgs>(
      args?: Subset<T, PlataformaXJuegoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PlataformaXJuegoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PlataformaXJuego.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlataformaXJuegoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PlataformaXJuegoAggregateArgs>(args: Subset<T, PlataformaXJuegoAggregateArgs>): Prisma.PrismaPromise<GetPlataformaXJuegoAggregateType<T>>

    /**
     * Group by PlataformaXJuego.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlataformaXJuegoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PlataformaXJuegoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PlataformaXJuegoGroupByArgs['orderBy'] }
        : { orderBy?: PlataformaXJuegoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PlataformaXJuegoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPlataformaXJuegoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PlataformaXJuego model
   */
  readonly fields: PlataformaXJuegoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PlataformaXJuego.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PlataformaXJuegoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    juego<T extends JuegoDefaultArgs<ExtArgs> = {}>(args?: Subset<T, JuegoDefaultArgs<ExtArgs>>): Prisma__JuegoClient<$Result.GetResult<Prisma.$JuegoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    plataforma<T extends PlataformaDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PlataformaDefaultArgs<ExtArgs>>): Prisma__PlataformaClient<$Result.GetResult<Prisma.$PlataformaPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PlataformaXJuego model
   */
  interface PlataformaXJuegoFieldRefs {
    readonly id: FieldRef<"PlataformaXJuego", 'Int'>
    readonly juegoId: FieldRef<"PlataformaXJuego", 'Int'>
    readonly plataformaId: FieldRef<"PlataformaXJuego", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * PlataformaXJuego findUnique
   */
  export type PlataformaXJuegoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlataformaXJuego
     */
    select?: PlataformaXJuegoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlataformaXJuego
     */
    omit?: PlataformaXJuegoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlataformaXJuegoInclude<ExtArgs> | null
    /**
     * Filter, which PlataformaXJuego to fetch.
     */
    where: PlataformaXJuegoWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * PlataformaXJuego findUniqueOrThrow
   */
  export type PlataformaXJuegoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlataformaXJuego
     */
    select?: PlataformaXJuegoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlataformaXJuego
     */
    omit?: PlataformaXJuegoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlataformaXJuegoInclude<ExtArgs> | null
    /**
     * Filter, which PlataformaXJuego to fetch.
     */
    where: PlataformaXJuegoWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * PlataformaXJuego findFirst
   */
  export type PlataformaXJuegoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlataformaXJuego
     */
    select?: PlataformaXJuegoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlataformaXJuego
     */
    omit?: PlataformaXJuegoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlataformaXJuegoInclude<ExtArgs> | null
    /**
     * Filter, which PlataformaXJuego to fetch.
     */
    where?: PlataformaXJuegoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PlataformaXJuegos to fetch.
     */
    orderBy?: PlataformaXJuegoOrderByWithRelationInput | PlataformaXJuegoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PlataformaXJuegos.
     */
    cursor?: PlataformaXJuegoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PlataformaXJuegos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PlataformaXJuegos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PlataformaXJuegos.
     */
    distinct?: PlataformaXJuegoScalarFieldEnum | PlataformaXJuegoScalarFieldEnum[]
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * PlataformaXJuego findFirstOrThrow
   */
  export type PlataformaXJuegoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlataformaXJuego
     */
    select?: PlataformaXJuegoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlataformaXJuego
     */
    omit?: PlataformaXJuegoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlataformaXJuegoInclude<ExtArgs> | null
    /**
     * Filter, which PlataformaXJuego to fetch.
     */
    where?: PlataformaXJuegoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PlataformaXJuegos to fetch.
     */
    orderBy?: PlataformaXJuegoOrderByWithRelationInput | PlataformaXJuegoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PlataformaXJuegos.
     */
    cursor?: PlataformaXJuegoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PlataformaXJuegos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PlataformaXJuegos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PlataformaXJuegos.
     */
    distinct?: PlataformaXJuegoScalarFieldEnum | PlataformaXJuegoScalarFieldEnum[]
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * PlataformaXJuego findMany
   */
  export type PlataformaXJuegoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlataformaXJuego
     */
    select?: PlataformaXJuegoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlataformaXJuego
     */
    omit?: PlataformaXJuegoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlataformaXJuegoInclude<ExtArgs> | null
    /**
     * Filter, which PlataformaXJuegos to fetch.
     */
    where?: PlataformaXJuegoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PlataformaXJuegos to fetch.
     */
    orderBy?: PlataformaXJuegoOrderByWithRelationInput | PlataformaXJuegoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PlataformaXJuegos.
     */
    cursor?: PlataformaXJuegoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PlataformaXJuegos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PlataformaXJuegos.
     */
    skip?: number
    distinct?: PlataformaXJuegoScalarFieldEnum | PlataformaXJuegoScalarFieldEnum[]
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * PlataformaXJuego create
   */
  export type PlataformaXJuegoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlataformaXJuego
     */
    select?: PlataformaXJuegoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlataformaXJuego
     */
    omit?: PlataformaXJuegoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlataformaXJuegoInclude<ExtArgs> | null
    /**
     * The data needed to create a PlataformaXJuego.
     */
    data: XOR<PlataformaXJuegoCreateInput, PlataformaXJuegoUncheckedCreateInput>
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * PlataformaXJuego createMany
   */
  export type PlataformaXJuegoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PlataformaXJuegos.
     */
    data: PlataformaXJuegoCreateManyInput | PlataformaXJuegoCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PlataformaXJuego createManyAndReturn
   */
  export type PlataformaXJuegoCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlataformaXJuego
     */
    select?: PlataformaXJuegoSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PlataformaXJuego
     */
    omit?: PlataformaXJuegoOmit<ExtArgs> | null
    /**
     * The data used to create many PlataformaXJuegos.
     */
    data: PlataformaXJuegoCreateManyInput | PlataformaXJuegoCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlataformaXJuegoIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * PlataformaXJuego update
   */
  export type PlataformaXJuegoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlataformaXJuego
     */
    select?: PlataformaXJuegoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlataformaXJuego
     */
    omit?: PlataformaXJuegoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlataformaXJuegoInclude<ExtArgs> | null
    /**
     * The data needed to update a PlataformaXJuego.
     */
    data: XOR<PlataformaXJuegoUpdateInput, PlataformaXJuegoUncheckedUpdateInput>
    /**
     * Choose, which PlataformaXJuego to update.
     */
    where: PlataformaXJuegoWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * PlataformaXJuego updateMany
   */
  export type PlataformaXJuegoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PlataformaXJuegos.
     */
    data: XOR<PlataformaXJuegoUpdateManyMutationInput, PlataformaXJuegoUncheckedUpdateManyInput>
    /**
     * Filter which PlataformaXJuegos to update
     */
    where?: PlataformaXJuegoWhereInput
    /**
     * Limit how many PlataformaXJuegos to update.
     */
    limit?: number
  }

  /**
   * PlataformaXJuego updateManyAndReturn
   */
  export type PlataformaXJuegoUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlataformaXJuego
     */
    select?: PlataformaXJuegoSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PlataformaXJuego
     */
    omit?: PlataformaXJuegoOmit<ExtArgs> | null
    /**
     * The data used to update PlataformaXJuegos.
     */
    data: XOR<PlataformaXJuegoUpdateManyMutationInput, PlataformaXJuegoUncheckedUpdateManyInput>
    /**
     * Filter which PlataformaXJuegos to update
     */
    where?: PlataformaXJuegoWhereInput
    /**
     * Limit how many PlataformaXJuegos to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlataformaXJuegoIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * PlataformaXJuego upsert
   */
  export type PlataformaXJuegoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlataformaXJuego
     */
    select?: PlataformaXJuegoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlataformaXJuego
     */
    omit?: PlataformaXJuegoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlataformaXJuegoInclude<ExtArgs> | null
    /**
     * The filter to search for the PlataformaXJuego to update in case it exists.
     */
    where: PlataformaXJuegoWhereUniqueInput
    /**
     * In case the PlataformaXJuego found by the `where` argument doesn't exist, create a new PlataformaXJuego with this data.
     */
    create: XOR<PlataformaXJuegoCreateInput, PlataformaXJuegoUncheckedCreateInput>
    /**
     * In case the PlataformaXJuego was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PlataformaXJuegoUpdateInput, PlataformaXJuegoUncheckedUpdateInput>
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * PlataformaXJuego delete
   */
  export type PlataformaXJuegoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlataformaXJuego
     */
    select?: PlataformaXJuegoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlataformaXJuego
     */
    omit?: PlataformaXJuegoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlataformaXJuegoInclude<ExtArgs> | null
    /**
     * Filter which PlataformaXJuego to delete.
     */
    where: PlataformaXJuegoWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * PlataformaXJuego deleteMany
   */
  export type PlataformaXJuegoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PlataformaXJuegos to delete
     */
    where?: PlataformaXJuegoWhereInput
    /**
     * Limit how many PlataformaXJuegos to delete.
     */
    limit?: number
  }

  /**
   * PlataformaXJuego without action
   */
  export type PlataformaXJuegoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlataformaXJuego
     */
    select?: PlataformaXJuegoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlataformaXJuego
     */
    omit?: PlataformaXJuegoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlataformaXJuegoInclude<ExtArgs> | null
  }


  /**
   * Model CatNoticia
   */

  export type AggregateCatNoticia = {
    _count: CatNoticiaCountAggregateOutputType | null
    _avg: CatNoticiaAvgAggregateOutputType | null
    _sum: CatNoticiaSumAggregateOutputType | null
    _min: CatNoticiaMinAggregateOutputType | null
    _max: CatNoticiaMaxAggregateOutputType | null
  }

  export type CatNoticiaAvgAggregateOutputType = {
    id: number | null
  }

  export type CatNoticiaSumAggregateOutputType = {
    id: number | null
  }

  export type CatNoticiaMinAggregateOutputType = {
    id: number | null
    nombre: string | null
  }

  export type CatNoticiaMaxAggregateOutputType = {
    id: number | null
    nombre: string | null
  }

  export type CatNoticiaCountAggregateOutputType = {
    id: number
    nombre: number
    _all: number
  }


  export type CatNoticiaAvgAggregateInputType = {
    id?: true
  }

  export type CatNoticiaSumAggregateInputType = {
    id?: true
  }

  export type CatNoticiaMinAggregateInputType = {
    id?: true
    nombre?: true
  }

  export type CatNoticiaMaxAggregateInputType = {
    id?: true
    nombre?: true
  }

  export type CatNoticiaCountAggregateInputType = {
    id?: true
    nombre?: true
    _all?: true
  }

  export type CatNoticiaAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CatNoticia to aggregate.
     */
    where?: CatNoticiaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CatNoticias to fetch.
     */
    orderBy?: CatNoticiaOrderByWithRelationInput | CatNoticiaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CatNoticiaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CatNoticias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CatNoticias.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CatNoticias
    **/
    _count?: true | CatNoticiaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CatNoticiaAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CatNoticiaSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CatNoticiaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CatNoticiaMaxAggregateInputType
  }

  export type GetCatNoticiaAggregateType<T extends CatNoticiaAggregateArgs> = {
        [P in keyof T & keyof AggregateCatNoticia]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCatNoticia[P]>
      : GetScalarType<T[P], AggregateCatNoticia[P]>
  }




  export type CatNoticiaGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CatNoticiaWhereInput
    orderBy?: CatNoticiaOrderByWithAggregationInput | CatNoticiaOrderByWithAggregationInput[]
    by: CatNoticiaScalarFieldEnum[] | CatNoticiaScalarFieldEnum
    having?: CatNoticiaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CatNoticiaCountAggregateInputType | true
    _avg?: CatNoticiaAvgAggregateInputType
    _sum?: CatNoticiaSumAggregateInputType
    _min?: CatNoticiaMinAggregateInputType
    _max?: CatNoticiaMaxAggregateInputType
  }

  export type CatNoticiaGroupByOutputType = {
    id: number
    nombre: string
    _count: CatNoticiaCountAggregateOutputType | null
    _avg: CatNoticiaAvgAggregateOutputType | null
    _sum: CatNoticiaSumAggregateOutputType | null
    _min: CatNoticiaMinAggregateOutputType | null
    _max: CatNoticiaMaxAggregateOutputType | null
  }

  type GetCatNoticiaGroupByPayload<T extends CatNoticiaGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CatNoticiaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CatNoticiaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CatNoticiaGroupByOutputType[P]>
            : GetScalarType<T[P], CatNoticiaGroupByOutputType[P]>
        }
      >
    >


  export type CatNoticiaSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nombre?: boolean
    noticias?: boolean | CatNoticia$noticiasArgs<ExtArgs>
    _count?: boolean | CatNoticiaCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["catNoticia"]>

  export type CatNoticiaSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nombre?: boolean
  }, ExtArgs["result"]["catNoticia"]>

  export type CatNoticiaSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nombre?: boolean
  }, ExtArgs["result"]["catNoticia"]>

  export type CatNoticiaSelectScalar = {
    id?: boolean
    nombre?: boolean
  }

  export type CatNoticiaOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "nombre", ExtArgs["result"]["catNoticia"]>
  export type CatNoticiaInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    noticias?: boolean | CatNoticia$noticiasArgs<ExtArgs>
    _count?: boolean | CatNoticiaCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type CatNoticiaIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type CatNoticiaIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $CatNoticiaPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CatNoticia"
    objects: {
      noticias: Prisma.$CatNoticiaXNoticiaPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      nombre: string
    }, ExtArgs["result"]["catNoticia"]>
    composites: {}
  }

  type CatNoticiaGetPayload<S extends boolean | null | undefined | CatNoticiaDefaultArgs> = $Result.GetResult<Prisma.$CatNoticiaPayload, S>

  type CatNoticiaCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CatNoticiaFindManyArgs, 'select' | 'include' | 'distinct' | 'omit' | 'relationLoadStrategy'> & {
      select?: CatNoticiaCountAggregateInputType | true
    }

  export interface CatNoticiaDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CatNoticia'], meta: { name: 'CatNoticia' } }
    /**
     * Find zero or one CatNoticia that matches the filter.
     * @param {CatNoticiaFindUniqueArgs} args - Arguments to find a CatNoticia
     * @example
     * // Get one CatNoticia
     * const catNoticia = await prisma.catNoticia.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CatNoticiaFindUniqueArgs>(args: SelectSubset<T, CatNoticiaFindUniqueArgs<ExtArgs>>): Prisma__CatNoticiaClient<$Result.GetResult<Prisma.$CatNoticiaPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one CatNoticia that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CatNoticiaFindUniqueOrThrowArgs} args - Arguments to find a CatNoticia
     * @example
     * // Get one CatNoticia
     * const catNoticia = await prisma.catNoticia.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CatNoticiaFindUniqueOrThrowArgs>(args: SelectSubset<T, CatNoticiaFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CatNoticiaClient<$Result.GetResult<Prisma.$CatNoticiaPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CatNoticia that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CatNoticiaFindFirstArgs} args - Arguments to find a CatNoticia
     * @example
     * // Get one CatNoticia
     * const catNoticia = await prisma.catNoticia.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CatNoticiaFindFirstArgs>(args?: SelectSubset<T, CatNoticiaFindFirstArgs<ExtArgs>>): Prisma__CatNoticiaClient<$Result.GetResult<Prisma.$CatNoticiaPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CatNoticia that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CatNoticiaFindFirstOrThrowArgs} args - Arguments to find a CatNoticia
     * @example
     * // Get one CatNoticia
     * const catNoticia = await prisma.catNoticia.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CatNoticiaFindFirstOrThrowArgs>(args?: SelectSubset<T, CatNoticiaFindFirstOrThrowArgs<ExtArgs>>): Prisma__CatNoticiaClient<$Result.GetResult<Prisma.$CatNoticiaPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more CatNoticias that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CatNoticiaFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CatNoticias
     * const catNoticias = await prisma.catNoticia.findMany()
     * 
     * // Get first 10 CatNoticias
     * const catNoticias = await prisma.catNoticia.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const catNoticiaWithIdOnly = await prisma.catNoticia.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CatNoticiaFindManyArgs>(args?: SelectSubset<T, CatNoticiaFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CatNoticiaPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a CatNoticia.
     * @param {CatNoticiaCreateArgs} args - Arguments to create a CatNoticia.
     * @example
     * // Create one CatNoticia
     * const CatNoticia = await prisma.catNoticia.create({
     *   data: {
     *     // ... data to create a CatNoticia
     *   }
     * })
     * 
     */
    create<T extends CatNoticiaCreateArgs>(args: SelectSubset<T, CatNoticiaCreateArgs<ExtArgs>>): Prisma__CatNoticiaClient<$Result.GetResult<Prisma.$CatNoticiaPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many CatNoticias.
     * @param {CatNoticiaCreateManyArgs} args - Arguments to create many CatNoticias.
     * @example
     * // Create many CatNoticias
     * const catNoticia = await prisma.catNoticia.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CatNoticiaCreateManyArgs>(args?: SelectSubset<T, CatNoticiaCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many CatNoticias and returns the data saved in the database.
     * @param {CatNoticiaCreateManyAndReturnArgs} args - Arguments to create many CatNoticias.
     * @example
     * // Create many CatNoticias
     * const catNoticia = await prisma.catNoticia.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many CatNoticias and only return the `id`
     * const catNoticiaWithIdOnly = await prisma.catNoticia.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CatNoticiaCreateManyAndReturnArgs>(args?: SelectSubset<T, CatNoticiaCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CatNoticiaPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a CatNoticia.
     * @param {CatNoticiaDeleteArgs} args - Arguments to delete one CatNoticia.
     * @example
     * // Delete one CatNoticia
     * const CatNoticia = await prisma.catNoticia.delete({
     *   where: {
     *     // ... filter to delete one CatNoticia
     *   }
     * })
     * 
     */
    delete<T extends CatNoticiaDeleteArgs>(args: SelectSubset<T, CatNoticiaDeleteArgs<ExtArgs>>): Prisma__CatNoticiaClient<$Result.GetResult<Prisma.$CatNoticiaPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one CatNoticia.
     * @param {CatNoticiaUpdateArgs} args - Arguments to update one CatNoticia.
     * @example
     * // Update one CatNoticia
     * const catNoticia = await prisma.catNoticia.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CatNoticiaUpdateArgs>(args: SelectSubset<T, CatNoticiaUpdateArgs<ExtArgs>>): Prisma__CatNoticiaClient<$Result.GetResult<Prisma.$CatNoticiaPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more CatNoticias.
     * @param {CatNoticiaDeleteManyArgs} args - Arguments to filter CatNoticias to delete.
     * @example
     * // Delete a few CatNoticias
     * const { count } = await prisma.catNoticia.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CatNoticiaDeleteManyArgs>(args?: SelectSubset<T, CatNoticiaDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CatNoticias.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CatNoticiaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CatNoticias
     * const catNoticia = await prisma.catNoticia.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CatNoticiaUpdateManyArgs>(args: SelectSubset<T, CatNoticiaUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CatNoticias and returns the data updated in the database.
     * @param {CatNoticiaUpdateManyAndReturnArgs} args - Arguments to update many CatNoticias.
     * @example
     * // Update many CatNoticias
     * const catNoticia = await prisma.catNoticia.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more CatNoticias and only return the `id`
     * const catNoticiaWithIdOnly = await prisma.catNoticia.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CatNoticiaUpdateManyAndReturnArgs>(args: SelectSubset<T, CatNoticiaUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CatNoticiaPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one CatNoticia.
     * @param {CatNoticiaUpsertArgs} args - Arguments to update or create a CatNoticia.
     * @example
     * // Update or create a CatNoticia
     * const catNoticia = await prisma.catNoticia.upsert({
     *   create: {
     *     // ... data to create a CatNoticia
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CatNoticia we want to update
     *   }
     * })
     */
    upsert<T extends CatNoticiaUpsertArgs>(args: SelectSubset<T, CatNoticiaUpsertArgs<ExtArgs>>): Prisma__CatNoticiaClient<$Result.GetResult<Prisma.$CatNoticiaPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of CatNoticias.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CatNoticiaCountArgs} args - Arguments to filter CatNoticias to count.
     * @example
     * // Count the number of CatNoticias
     * const count = await prisma.catNoticia.count({
     *   where: {
     *     // ... the filter for the CatNoticias we want to count
     *   }
     * })
    **/
    count<T extends CatNoticiaCountArgs>(
      args?: Subset<T, CatNoticiaCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CatNoticiaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CatNoticia.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CatNoticiaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CatNoticiaAggregateArgs>(args: Subset<T, CatNoticiaAggregateArgs>): Prisma.PrismaPromise<GetCatNoticiaAggregateType<T>>

    /**
     * Group by CatNoticia.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CatNoticiaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CatNoticiaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CatNoticiaGroupByArgs['orderBy'] }
        : { orderBy?: CatNoticiaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CatNoticiaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCatNoticiaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CatNoticia model
   */
  readonly fields: CatNoticiaFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CatNoticia.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CatNoticiaClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    noticias<T extends CatNoticia$noticiasArgs<ExtArgs> = {}>(args?: Subset<T, CatNoticia$noticiasArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CatNoticiaXNoticiaPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CatNoticia model
   */
  interface CatNoticiaFieldRefs {
    readonly id: FieldRef<"CatNoticia", 'Int'>
    readonly nombre: FieldRef<"CatNoticia", 'String'>
  }
    

  // Custom InputTypes
  /**
   * CatNoticia findUnique
   */
  export type CatNoticiaFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CatNoticia
     */
    select?: CatNoticiaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CatNoticia
     */
    omit?: CatNoticiaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CatNoticiaInclude<ExtArgs> | null
    /**
     * Filter, which CatNoticia to fetch.
     */
    where: CatNoticiaWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * CatNoticia findUniqueOrThrow
   */
  export type CatNoticiaFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CatNoticia
     */
    select?: CatNoticiaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CatNoticia
     */
    omit?: CatNoticiaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CatNoticiaInclude<ExtArgs> | null
    /**
     * Filter, which CatNoticia to fetch.
     */
    where: CatNoticiaWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * CatNoticia findFirst
   */
  export type CatNoticiaFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CatNoticia
     */
    select?: CatNoticiaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CatNoticia
     */
    omit?: CatNoticiaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CatNoticiaInclude<ExtArgs> | null
    /**
     * Filter, which CatNoticia to fetch.
     */
    where?: CatNoticiaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CatNoticias to fetch.
     */
    orderBy?: CatNoticiaOrderByWithRelationInput | CatNoticiaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CatNoticias.
     */
    cursor?: CatNoticiaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CatNoticias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CatNoticias.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CatNoticias.
     */
    distinct?: CatNoticiaScalarFieldEnum | CatNoticiaScalarFieldEnum[]
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * CatNoticia findFirstOrThrow
   */
  export type CatNoticiaFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CatNoticia
     */
    select?: CatNoticiaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CatNoticia
     */
    omit?: CatNoticiaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CatNoticiaInclude<ExtArgs> | null
    /**
     * Filter, which CatNoticia to fetch.
     */
    where?: CatNoticiaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CatNoticias to fetch.
     */
    orderBy?: CatNoticiaOrderByWithRelationInput | CatNoticiaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CatNoticias.
     */
    cursor?: CatNoticiaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CatNoticias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CatNoticias.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CatNoticias.
     */
    distinct?: CatNoticiaScalarFieldEnum | CatNoticiaScalarFieldEnum[]
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * CatNoticia findMany
   */
  export type CatNoticiaFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CatNoticia
     */
    select?: CatNoticiaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CatNoticia
     */
    omit?: CatNoticiaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CatNoticiaInclude<ExtArgs> | null
    /**
     * Filter, which CatNoticias to fetch.
     */
    where?: CatNoticiaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CatNoticias to fetch.
     */
    orderBy?: CatNoticiaOrderByWithRelationInput | CatNoticiaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CatNoticias.
     */
    cursor?: CatNoticiaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CatNoticias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CatNoticias.
     */
    skip?: number
    distinct?: CatNoticiaScalarFieldEnum | CatNoticiaScalarFieldEnum[]
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * CatNoticia create
   */
  export type CatNoticiaCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CatNoticia
     */
    select?: CatNoticiaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CatNoticia
     */
    omit?: CatNoticiaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CatNoticiaInclude<ExtArgs> | null
    /**
     * The data needed to create a CatNoticia.
     */
    data: XOR<CatNoticiaCreateInput, CatNoticiaUncheckedCreateInput>
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * CatNoticia createMany
   */
  export type CatNoticiaCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CatNoticias.
     */
    data: CatNoticiaCreateManyInput | CatNoticiaCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CatNoticia createManyAndReturn
   */
  export type CatNoticiaCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CatNoticia
     */
    select?: CatNoticiaSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CatNoticia
     */
    omit?: CatNoticiaOmit<ExtArgs> | null
    /**
     * The data used to create many CatNoticias.
     */
    data: CatNoticiaCreateManyInput | CatNoticiaCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CatNoticia update
   */
  export type CatNoticiaUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CatNoticia
     */
    select?: CatNoticiaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CatNoticia
     */
    omit?: CatNoticiaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CatNoticiaInclude<ExtArgs> | null
    /**
     * The data needed to update a CatNoticia.
     */
    data: XOR<CatNoticiaUpdateInput, CatNoticiaUncheckedUpdateInput>
    /**
     * Choose, which CatNoticia to update.
     */
    where: CatNoticiaWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * CatNoticia updateMany
   */
  export type CatNoticiaUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CatNoticias.
     */
    data: XOR<CatNoticiaUpdateManyMutationInput, CatNoticiaUncheckedUpdateManyInput>
    /**
     * Filter which CatNoticias to update
     */
    where?: CatNoticiaWhereInput
    /**
     * Limit how many CatNoticias to update.
     */
    limit?: number
  }

  /**
   * CatNoticia updateManyAndReturn
   */
  export type CatNoticiaUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CatNoticia
     */
    select?: CatNoticiaSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CatNoticia
     */
    omit?: CatNoticiaOmit<ExtArgs> | null
    /**
     * The data used to update CatNoticias.
     */
    data: XOR<CatNoticiaUpdateManyMutationInput, CatNoticiaUncheckedUpdateManyInput>
    /**
     * Filter which CatNoticias to update
     */
    where?: CatNoticiaWhereInput
    /**
     * Limit how many CatNoticias to update.
     */
    limit?: number
  }

  /**
   * CatNoticia upsert
   */
  export type CatNoticiaUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CatNoticia
     */
    select?: CatNoticiaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CatNoticia
     */
    omit?: CatNoticiaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CatNoticiaInclude<ExtArgs> | null
    /**
     * The filter to search for the CatNoticia to update in case it exists.
     */
    where: CatNoticiaWhereUniqueInput
    /**
     * In case the CatNoticia found by the `where` argument doesn't exist, create a new CatNoticia with this data.
     */
    create: XOR<CatNoticiaCreateInput, CatNoticiaUncheckedCreateInput>
    /**
     * In case the CatNoticia was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CatNoticiaUpdateInput, CatNoticiaUncheckedUpdateInput>
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * CatNoticia delete
   */
  export type CatNoticiaDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CatNoticia
     */
    select?: CatNoticiaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CatNoticia
     */
    omit?: CatNoticiaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CatNoticiaInclude<ExtArgs> | null
    /**
     * Filter which CatNoticia to delete.
     */
    where: CatNoticiaWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * CatNoticia deleteMany
   */
  export type CatNoticiaDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CatNoticias to delete
     */
    where?: CatNoticiaWhereInput
    /**
     * Limit how many CatNoticias to delete.
     */
    limit?: number
  }

  /**
   * CatNoticia.noticias
   */
  export type CatNoticia$noticiasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CatNoticiaXNoticia
     */
    select?: CatNoticiaXNoticiaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CatNoticiaXNoticia
     */
    omit?: CatNoticiaXNoticiaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CatNoticiaXNoticiaInclude<ExtArgs> | null
    where?: CatNoticiaXNoticiaWhereInput
    orderBy?: CatNoticiaXNoticiaOrderByWithRelationInput | CatNoticiaXNoticiaOrderByWithRelationInput[]
    cursor?: CatNoticiaXNoticiaWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CatNoticiaXNoticiaScalarFieldEnum | CatNoticiaXNoticiaScalarFieldEnum[]
  }

  /**
   * CatNoticia without action
   */
  export type CatNoticiaDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CatNoticia
     */
    select?: CatNoticiaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CatNoticia
     */
    omit?: CatNoticiaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CatNoticiaInclude<ExtArgs> | null
  }


  /**
   * Model CatNoticiaXNoticia
   */

  export type AggregateCatNoticiaXNoticia = {
    _count: CatNoticiaXNoticiaCountAggregateOutputType | null
    _avg: CatNoticiaXNoticiaAvgAggregateOutputType | null
    _sum: CatNoticiaXNoticiaSumAggregateOutputType | null
    _min: CatNoticiaXNoticiaMinAggregateOutputType | null
    _max: CatNoticiaXNoticiaMaxAggregateOutputType | null
  }

  export type CatNoticiaXNoticiaAvgAggregateOutputType = {
    id: number | null
    noticiaId: number | null
    catNoticiaId: number | null
  }

  export type CatNoticiaXNoticiaSumAggregateOutputType = {
    id: number | null
    noticiaId: number | null
    catNoticiaId: number | null
  }

  export type CatNoticiaXNoticiaMinAggregateOutputType = {
    id: number | null
    noticiaId: number | null
    catNoticiaId: number | null
  }

  export type CatNoticiaXNoticiaMaxAggregateOutputType = {
    id: number | null
    noticiaId: number | null
    catNoticiaId: number | null
  }

  export type CatNoticiaXNoticiaCountAggregateOutputType = {
    id: number
    noticiaId: number
    catNoticiaId: number
    _all: number
  }


  export type CatNoticiaXNoticiaAvgAggregateInputType = {
    id?: true
    noticiaId?: true
    catNoticiaId?: true
  }

  export type CatNoticiaXNoticiaSumAggregateInputType = {
    id?: true
    noticiaId?: true
    catNoticiaId?: true
  }

  export type CatNoticiaXNoticiaMinAggregateInputType = {
    id?: true
    noticiaId?: true
    catNoticiaId?: true
  }

  export type CatNoticiaXNoticiaMaxAggregateInputType = {
    id?: true
    noticiaId?: true
    catNoticiaId?: true
  }

  export type CatNoticiaXNoticiaCountAggregateInputType = {
    id?: true
    noticiaId?: true
    catNoticiaId?: true
    _all?: true
  }

  export type CatNoticiaXNoticiaAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CatNoticiaXNoticia to aggregate.
     */
    where?: CatNoticiaXNoticiaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CatNoticiaXNoticias to fetch.
     */
    orderBy?: CatNoticiaXNoticiaOrderByWithRelationInput | CatNoticiaXNoticiaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CatNoticiaXNoticiaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CatNoticiaXNoticias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CatNoticiaXNoticias.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CatNoticiaXNoticias
    **/
    _count?: true | CatNoticiaXNoticiaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CatNoticiaXNoticiaAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CatNoticiaXNoticiaSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CatNoticiaXNoticiaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CatNoticiaXNoticiaMaxAggregateInputType
  }

  export type GetCatNoticiaXNoticiaAggregateType<T extends CatNoticiaXNoticiaAggregateArgs> = {
        [P in keyof T & keyof AggregateCatNoticiaXNoticia]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCatNoticiaXNoticia[P]>
      : GetScalarType<T[P], AggregateCatNoticiaXNoticia[P]>
  }




  export type CatNoticiaXNoticiaGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CatNoticiaXNoticiaWhereInput
    orderBy?: CatNoticiaXNoticiaOrderByWithAggregationInput | CatNoticiaXNoticiaOrderByWithAggregationInput[]
    by: CatNoticiaXNoticiaScalarFieldEnum[] | CatNoticiaXNoticiaScalarFieldEnum
    having?: CatNoticiaXNoticiaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CatNoticiaXNoticiaCountAggregateInputType | true
    _avg?: CatNoticiaXNoticiaAvgAggregateInputType
    _sum?: CatNoticiaXNoticiaSumAggregateInputType
    _min?: CatNoticiaXNoticiaMinAggregateInputType
    _max?: CatNoticiaXNoticiaMaxAggregateInputType
  }

  export type CatNoticiaXNoticiaGroupByOutputType = {
    id: number
    noticiaId: number
    catNoticiaId: number
    _count: CatNoticiaXNoticiaCountAggregateOutputType | null
    _avg: CatNoticiaXNoticiaAvgAggregateOutputType | null
    _sum: CatNoticiaXNoticiaSumAggregateOutputType | null
    _min: CatNoticiaXNoticiaMinAggregateOutputType | null
    _max: CatNoticiaXNoticiaMaxAggregateOutputType | null
  }

  type GetCatNoticiaXNoticiaGroupByPayload<T extends CatNoticiaXNoticiaGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CatNoticiaXNoticiaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CatNoticiaXNoticiaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CatNoticiaXNoticiaGroupByOutputType[P]>
            : GetScalarType<T[P], CatNoticiaXNoticiaGroupByOutputType[P]>
        }
      >
    >


  export type CatNoticiaXNoticiaSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    noticiaId?: boolean
    catNoticiaId?: boolean
    noticia?: boolean | NoticiaDefaultArgs<ExtArgs>
    catNoticia?: boolean | CatNoticiaDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["catNoticiaXNoticia"]>

  export type CatNoticiaXNoticiaSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    noticiaId?: boolean
    catNoticiaId?: boolean
    noticia?: boolean | NoticiaDefaultArgs<ExtArgs>
    catNoticia?: boolean | CatNoticiaDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["catNoticiaXNoticia"]>

  export type CatNoticiaXNoticiaSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    noticiaId?: boolean
    catNoticiaId?: boolean
    noticia?: boolean | NoticiaDefaultArgs<ExtArgs>
    catNoticia?: boolean | CatNoticiaDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["catNoticiaXNoticia"]>

  export type CatNoticiaXNoticiaSelectScalar = {
    id?: boolean
    noticiaId?: boolean
    catNoticiaId?: boolean
  }

  export type CatNoticiaXNoticiaOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "noticiaId" | "catNoticiaId", ExtArgs["result"]["catNoticiaXNoticia"]>
  export type CatNoticiaXNoticiaInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    noticia?: boolean | NoticiaDefaultArgs<ExtArgs>
    catNoticia?: boolean | CatNoticiaDefaultArgs<ExtArgs>
  }
  export type CatNoticiaXNoticiaIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    noticia?: boolean | NoticiaDefaultArgs<ExtArgs>
    catNoticia?: boolean | CatNoticiaDefaultArgs<ExtArgs>
  }
  export type CatNoticiaXNoticiaIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    noticia?: boolean | NoticiaDefaultArgs<ExtArgs>
    catNoticia?: boolean | CatNoticiaDefaultArgs<ExtArgs>
  }

  export type $CatNoticiaXNoticiaPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CatNoticiaXNoticia"
    objects: {
      noticia: Prisma.$NoticiaPayload<ExtArgs>
      catNoticia: Prisma.$CatNoticiaPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      noticiaId: number
      catNoticiaId: number
    }, ExtArgs["result"]["catNoticiaXNoticia"]>
    composites: {}
  }

  type CatNoticiaXNoticiaGetPayload<S extends boolean | null | undefined | CatNoticiaXNoticiaDefaultArgs> = $Result.GetResult<Prisma.$CatNoticiaXNoticiaPayload, S>

  type CatNoticiaXNoticiaCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CatNoticiaXNoticiaFindManyArgs, 'select' | 'include' | 'distinct' | 'omit' | 'relationLoadStrategy'> & {
      select?: CatNoticiaXNoticiaCountAggregateInputType | true
    }

  export interface CatNoticiaXNoticiaDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CatNoticiaXNoticia'], meta: { name: 'CatNoticiaXNoticia' } }
    /**
     * Find zero or one CatNoticiaXNoticia that matches the filter.
     * @param {CatNoticiaXNoticiaFindUniqueArgs} args - Arguments to find a CatNoticiaXNoticia
     * @example
     * // Get one CatNoticiaXNoticia
     * const catNoticiaXNoticia = await prisma.catNoticiaXNoticia.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CatNoticiaXNoticiaFindUniqueArgs>(args: SelectSubset<T, CatNoticiaXNoticiaFindUniqueArgs<ExtArgs>>): Prisma__CatNoticiaXNoticiaClient<$Result.GetResult<Prisma.$CatNoticiaXNoticiaPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one CatNoticiaXNoticia that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CatNoticiaXNoticiaFindUniqueOrThrowArgs} args - Arguments to find a CatNoticiaXNoticia
     * @example
     * // Get one CatNoticiaXNoticia
     * const catNoticiaXNoticia = await prisma.catNoticiaXNoticia.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CatNoticiaXNoticiaFindUniqueOrThrowArgs>(args: SelectSubset<T, CatNoticiaXNoticiaFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CatNoticiaXNoticiaClient<$Result.GetResult<Prisma.$CatNoticiaXNoticiaPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CatNoticiaXNoticia that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CatNoticiaXNoticiaFindFirstArgs} args - Arguments to find a CatNoticiaXNoticia
     * @example
     * // Get one CatNoticiaXNoticia
     * const catNoticiaXNoticia = await prisma.catNoticiaXNoticia.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CatNoticiaXNoticiaFindFirstArgs>(args?: SelectSubset<T, CatNoticiaXNoticiaFindFirstArgs<ExtArgs>>): Prisma__CatNoticiaXNoticiaClient<$Result.GetResult<Prisma.$CatNoticiaXNoticiaPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CatNoticiaXNoticia that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CatNoticiaXNoticiaFindFirstOrThrowArgs} args - Arguments to find a CatNoticiaXNoticia
     * @example
     * // Get one CatNoticiaXNoticia
     * const catNoticiaXNoticia = await prisma.catNoticiaXNoticia.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CatNoticiaXNoticiaFindFirstOrThrowArgs>(args?: SelectSubset<T, CatNoticiaXNoticiaFindFirstOrThrowArgs<ExtArgs>>): Prisma__CatNoticiaXNoticiaClient<$Result.GetResult<Prisma.$CatNoticiaXNoticiaPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more CatNoticiaXNoticias that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CatNoticiaXNoticiaFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CatNoticiaXNoticias
     * const catNoticiaXNoticias = await prisma.catNoticiaXNoticia.findMany()
     * 
     * // Get first 10 CatNoticiaXNoticias
     * const catNoticiaXNoticias = await prisma.catNoticiaXNoticia.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const catNoticiaXNoticiaWithIdOnly = await prisma.catNoticiaXNoticia.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CatNoticiaXNoticiaFindManyArgs>(args?: SelectSubset<T, CatNoticiaXNoticiaFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CatNoticiaXNoticiaPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a CatNoticiaXNoticia.
     * @param {CatNoticiaXNoticiaCreateArgs} args - Arguments to create a CatNoticiaXNoticia.
     * @example
     * // Create one CatNoticiaXNoticia
     * const CatNoticiaXNoticia = await prisma.catNoticiaXNoticia.create({
     *   data: {
     *     // ... data to create a CatNoticiaXNoticia
     *   }
     * })
     * 
     */
    create<T extends CatNoticiaXNoticiaCreateArgs>(args: SelectSubset<T, CatNoticiaXNoticiaCreateArgs<ExtArgs>>): Prisma__CatNoticiaXNoticiaClient<$Result.GetResult<Prisma.$CatNoticiaXNoticiaPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many CatNoticiaXNoticias.
     * @param {CatNoticiaXNoticiaCreateManyArgs} args - Arguments to create many CatNoticiaXNoticias.
     * @example
     * // Create many CatNoticiaXNoticias
     * const catNoticiaXNoticia = await prisma.catNoticiaXNoticia.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CatNoticiaXNoticiaCreateManyArgs>(args?: SelectSubset<T, CatNoticiaXNoticiaCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many CatNoticiaXNoticias and returns the data saved in the database.
     * @param {CatNoticiaXNoticiaCreateManyAndReturnArgs} args - Arguments to create many CatNoticiaXNoticias.
     * @example
     * // Create many CatNoticiaXNoticias
     * const catNoticiaXNoticia = await prisma.catNoticiaXNoticia.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many CatNoticiaXNoticias and only return the `id`
     * const catNoticiaXNoticiaWithIdOnly = await prisma.catNoticiaXNoticia.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CatNoticiaXNoticiaCreateManyAndReturnArgs>(args?: SelectSubset<T, CatNoticiaXNoticiaCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CatNoticiaXNoticiaPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a CatNoticiaXNoticia.
     * @param {CatNoticiaXNoticiaDeleteArgs} args - Arguments to delete one CatNoticiaXNoticia.
     * @example
     * // Delete one CatNoticiaXNoticia
     * const CatNoticiaXNoticia = await prisma.catNoticiaXNoticia.delete({
     *   where: {
     *     // ... filter to delete one CatNoticiaXNoticia
     *   }
     * })
     * 
     */
    delete<T extends CatNoticiaXNoticiaDeleteArgs>(args: SelectSubset<T, CatNoticiaXNoticiaDeleteArgs<ExtArgs>>): Prisma__CatNoticiaXNoticiaClient<$Result.GetResult<Prisma.$CatNoticiaXNoticiaPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one CatNoticiaXNoticia.
     * @param {CatNoticiaXNoticiaUpdateArgs} args - Arguments to update one CatNoticiaXNoticia.
     * @example
     * // Update one CatNoticiaXNoticia
     * const catNoticiaXNoticia = await prisma.catNoticiaXNoticia.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CatNoticiaXNoticiaUpdateArgs>(args: SelectSubset<T, CatNoticiaXNoticiaUpdateArgs<ExtArgs>>): Prisma__CatNoticiaXNoticiaClient<$Result.GetResult<Prisma.$CatNoticiaXNoticiaPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more CatNoticiaXNoticias.
     * @param {CatNoticiaXNoticiaDeleteManyArgs} args - Arguments to filter CatNoticiaXNoticias to delete.
     * @example
     * // Delete a few CatNoticiaXNoticias
     * const { count } = await prisma.catNoticiaXNoticia.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CatNoticiaXNoticiaDeleteManyArgs>(args?: SelectSubset<T, CatNoticiaXNoticiaDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CatNoticiaXNoticias.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CatNoticiaXNoticiaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CatNoticiaXNoticias
     * const catNoticiaXNoticia = await prisma.catNoticiaXNoticia.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CatNoticiaXNoticiaUpdateManyArgs>(args: SelectSubset<T, CatNoticiaXNoticiaUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CatNoticiaXNoticias and returns the data updated in the database.
     * @param {CatNoticiaXNoticiaUpdateManyAndReturnArgs} args - Arguments to update many CatNoticiaXNoticias.
     * @example
     * // Update many CatNoticiaXNoticias
     * const catNoticiaXNoticia = await prisma.catNoticiaXNoticia.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more CatNoticiaXNoticias and only return the `id`
     * const catNoticiaXNoticiaWithIdOnly = await prisma.catNoticiaXNoticia.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CatNoticiaXNoticiaUpdateManyAndReturnArgs>(args: SelectSubset<T, CatNoticiaXNoticiaUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CatNoticiaXNoticiaPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one CatNoticiaXNoticia.
     * @param {CatNoticiaXNoticiaUpsertArgs} args - Arguments to update or create a CatNoticiaXNoticia.
     * @example
     * // Update or create a CatNoticiaXNoticia
     * const catNoticiaXNoticia = await prisma.catNoticiaXNoticia.upsert({
     *   create: {
     *     // ... data to create a CatNoticiaXNoticia
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CatNoticiaXNoticia we want to update
     *   }
     * })
     */
    upsert<T extends CatNoticiaXNoticiaUpsertArgs>(args: SelectSubset<T, CatNoticiaXNoticiaUpsertArgs<ExtArgs>>): Prisma__CatNoticiaXNoticiaClient<$Result.GetResult<Prisma.$CatNoticiaXNoticiaPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of CatNoticiaXNoticias.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CatNoticiaXNoticiaCountArgs} args - Arguments to filter CatNoticiaXNoticias to count.
     * @example
     * // Count the number of CatNoticiaXNoticias
     * const count = await prisma.catNoticiaXNoticia.count({
     *   where: {
     *     // ... the filter for the CatNoticiaXNoticias we want to count
     *   }
     * })
    **/
    count<T extends CatNoticiaXNoticiaCountArgs>(
      args?: Subset<T, CatNoticiaXNoticiaCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CatNoticiaXNoticiaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CatNoticiaXNoticia.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CatNoticiaXNoticiaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CatNoticiaXNoticiaAggregateArgs>(args: Subset<T, CatNoticiaXNoticiaAggregateArgs>): Prisma.PrismaPromise<GetCatNoticiaXNoticiaAggregateType<T>>

    /**
     * Group by CatNoticiaXNoticia.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CatNoticiaXNoticiaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CatNoticiaXNoticiaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CatNoticiaXNoticiaGroupByArgs['orderBy'] }
        : { orderBy?: CatNoticiaXNoticiaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CatNoticiaXNoticiaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCatNoticiaXNoticiaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CatNoticiaXNoticia model
   */
  readonly fields: CatNoticiaXNoticiaFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CatNoticiaXNoticia.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CatNoticiaXNoticiaClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    noticia<T extends NoticiaDefaultArgs<ExtArgs> = {}>(args?: Subset<T, NoticiaDefaultArgs<ExtArgs>>): Prisma__NoticiaClient<$Result.GetResult<Prisma.$NoticiaPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    catNoticia<T extends CatNoticiaDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CatNoticiaDefaultArgs<ExtArgs>>): Prisma__CatNoticiaClient<$Result.GetResult<Prisma.$CatNoticiaPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CatNoticiaXNoticia model
   */
  interface CatNoticiaXNoticiaFieldRefs {
    readonly id: FieldRef<"CatNoticiaXNoticia", 'Int'>
    readonly noticiaId: FieldRef<"CatNoticiaXNoticia", 'Int'>
    readonly catNoticiaId: FieldRef<"CatNoticiaXNoticia", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * CatNoticiaXNoticia findUnique
   */
  export type CatNoticiaXNoticiaFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CatNoticiaXNoticia
     */
    select?: CatNoticiaXNoticiaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CatNoticiaXNoticia
     */
    omit?: CatNoticiaXNoticiaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CatNoticiaXNoticiaInclude<ExtArgs> | null
    /**
     * Filter, which CatNoticiaXNoticia to fetch.
     */
    where: CatNoticiaXNoticiaWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * CatNoticiaXNoticia findUniqueOrThrow
   */
  export type CatNoticiaXNoticiaFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CatNoticiaXNoticia
     */
    select?: CatNoticiaXNoticiaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CatNoticiaXNoticia
     */
    omit?: CatNoticiaXNoticiaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CatNoticiaXNoticiaInclude<ExtArgs> | null
    /**
     * Filter, which CatNoticiaXNoticia to fetch.
     */
    where: CatNoticiaXNoticiaWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * CatNoticiaXNoticia findFirst
   */
  export type CatNoticiaXNoticiaFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CatNoticiaXNoticia
     */
    select?: CatNoticiaXNoticiaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CatNoticiaXNoticia
     */
    omit?: CatNoticiaXNoticiaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CatNoticiaXNoticiaInclude<ExtArgs> | null
    /**
     * Filter, which CatNoticiaXNoticia to fetch.
     */
    where?: CatNoticiaXNoticiaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CatNoticiaXNoticias to fetch.
     */
    orderBy?: CatNoticiaXNoticiaOrderByWithRelationInput | CatNoticiaXNoticiaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CatNoticiaXNoticias.
     */
    cursor?: CatNoticiaXNoticiaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CatNoticiaXNoticias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CatNoticiaXNoticias.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CatNoticiaXNoticias.
     */
    distinct?: CatNoticiaXNoticiaScalarFieldEnum | CatNoticiaXNoticiaScalarFieldEnum[]
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * CatNoticiaXNoticia findFirstOrThrow
   */
  export type CatNoticiaXNoticiaFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CatNoticiaXNoticia
     */
    select?: CatNoticiaXNoticiaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CatNoticiaXNoticia
     */
    omit?: CatNoticiaXNoticiaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CatNoticiaXNoticiaInclude<ExtArgs> | null
    /**
     * Filter, which CatNoticiaXNoticia to fetch.
     */
    where?: CatNoticiaXNoticiaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CatNoticiaXNoticias to fetch.
     */
    orderBy?: CatNoticiaXNoticiaOrderByWithRelationInput | CatNoticiaXNoticiaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CatNoticiaXNoticias.
     */
    cursor?: CatNoticiaXNoticiaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CatNoticiaXNoticias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CatNoticiaXNoticias.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CatNoticiaXNoticias.
     */
    distinct?: CatNoticiaXNoticiaScalarFieldEnum | CatNoticiaXNoticiaScalarFieldEnum[]
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * CatNoticiaXNoticia findMany
   */
  export type CatNoticiaXNoticiaFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CatNoticiaXNoticia
     */
    select?: CatNoticiaXNoticiaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CatNoticiaXNoticia
     */
    omit?: CatNoticiaXNoticiaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CatNoticiaXNoticiaInclude<ExtArgs> | null
    /**
     * Filter, which CatNoticiaXNoticias to fetch.
     */
    where?: CatNoticiaXNoticiaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CatNoticiaXNoticias to fetch.
     */
    orderBy?: CatNoticiaXNoticiaOrderByWithRelationInput | CatNoticiaXNoticiaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CatNoticiaXNoticias.
     */
    cursor?: CatNoticiaXNoticiaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CatNoticiaXNoticias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CatNoticiaXNoticias.
     */
    skip?: number
    distinct?: CatNoticiaXNoticiaScalarFieldEnum | CatNoticiaXNoticiaScalarFieldEnum[]
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * CatNoticiaXNoticia create
   */
  export type CatNoticiaXNoticiaCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CatNoticiaXNoticia
     */
    select?: CatNoticiaXNoticiaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CatNoticiaXNoticia
     */
    omit?: CatNoticiaXNoticiaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CatNoticiaXNoticiaInclude<ExtArgs> | null
    /**
     * The data needed to create a CatNoticiaXNoticia.
     */
    data: XOR<CatNoticiaXNoticiaCreateInput, CatNoticiaXNoticiaUncheckedCreateInput>
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * CatNoticiaXNoticia createMany
   */
  export type CatNoticiaXNoticiaCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CatNoticiaXNoticias.
     */
    data: CatNoticiaXNoticiaCreateManyInput | CatNoticiaXNoticiaCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CatNoticiaXNoticia createManyAndReturn
   */
  export type CatNoticiaXNoticiaCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CatNoticiaXNoticia
     */
    select?: CatNoticiaXNoticiaSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CatNoticiaXNoticia
     */
    omit?: CatNoticiaXNoticiaOmit<ExtArgs> | null
    /**
     * The data used to create many CatNoticiaXNoticias.
     */
    data: CatNoticiaXNoticiaCreateManyInput | CatNoticiaXNoticiaCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CatNoticiaXNoticiaIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * CatNoticiaXNoticia update
   */
  export type CatNoticiaXNoticiaUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CatNoticiaXNoticia
     */
    select?: CatNoticiaXNoticiaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CatNoticiaXNoticia
     */
    omit?: CatNoticiaXNoticiaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CatNoticiaXNoticiaInclude<ExtArgs> | null
    /**
     * The data needed to update a CatNoticiaXNoticia.
     */
    data: XOR<CatNoticiaXNoticiaUpdateInput, CatNoticiaXNoticiaUncheckedUpdateInput>
    /**
     * Choose, which CatNoticiaXNoticia to update.
     */
    where: CatNoticiaXNoticiaWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * CatNoticiaXNoticia updateMany
   */
  export type CatNoticiaXNoticiaUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CatNoticiaXNoticias.
     */
    data: XOR<CatNoticiaXNoticiaUpdateManyMutationInput, CatNoticiaXNoticiaUncheckedUpdateManyInput>
    /**
     * Filter which CatNoticiaXNoticias to update
     */
    where?: CatNoticiaXNoticiaWhereInput
    /**
     * Limit how many CatNoticiaXNoticias to update.
     */
    limit?: number
  }

  /**
   * CatNoticiaXNoticia updateManyAndReturn
   */
  export type CatNoticiaXNoticiaUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CatNoticiaXNoticia
     */
    select?: CatNoticiaXNoticiaSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CatNoticiaXNoticia
     */
    omit?: CatNoticiaXNoticiaOmit<ExtArgs> | null
    /**
     * The data used to update CatNoticiaXNoticias.
     */
    data: XOR<CatNoticiaXNoticiaUpdateManyMutationInput, CatNoticiaXNoticiaUncheckedUpdateManyInput>
    /**
     * Filter which CatNoticiaXNoticias to update
     */
    where?: CatNoticiaXNoticiaWhereInput
    /**
     * Limit how many CatNoticiaXNoticias to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CatNoticiaXNoticiaIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * CatNoticiaXNoticia upsert
   */
  export type CatNoticiaXNoticiaUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CatNoticiaXNoticia
     */
    select?: CatNoticiaXNoticiaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CatNoticiaXNoticia
     */
    omit?: CatNoticiaXNoticiaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CatNoticiaXNoticiaInclude<ExtArgs> | null
    /**
     * The filter to search for the CatNoticiaXNoticia to update in case it exists.
     */
    where: CatNoticiaXNoticiaWhereUniqueInput
    /**
     * In case the CatNoticiaXNoticia found by the `where` argument doesn't exist, create a new CatNoticiaXNoticia with this data.
     */
    create: XOR<CatNoticiaXNoticiaCreateInput, CatNoticiaXNoticiaUncheckedCreateInput>
    /**
     * In case the CatNoticiaXNoticia was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CatNoticiaXNoticiaUpdateInput, CatNoticiaXNoticiaUncheckedUpdateInput>
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * CatNoticiaXNoticia delete
   */
  export type CatNoticiaXNoticiaDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CatNoticiaXNoticia
     */
    select?: CatNoticiaXNoticiaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CatNoticiaXNoticia
     */
    omit?: CatNoticiaXNoticiaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CatNoticiaXNoticiaInclude<ExtArgs> | null
    /**
     * Filter which CatNoticiaXNoticia to delete.
     */
    where: CatNoticiaXNoticiaWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * CatNoticiaXNoticia deleteMany
   */
  export type CatNoticiaXNoticiaDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CatNoticiaXNoticias to delete
     */
    where?: CatNoticiaXNoticiaWhereInput
    /**
     * Limit how many CatNoticiaXNoticias to delete.
     */
    limit?: number
  }

  /**
   * CatNoticiaXNoticia without action
   */
  export type CatNoticiaXNoticiaDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CatNoticiaXNoticia
     */
    select?: CatNoticiaXNoticiaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CatNoticiaXNoticia
     */
    omit?: CatNoticiaXNoticiaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CatNoticiaXNoticiaInclude<ExtArgs> | null
  }


  /**
   * Model Resena
   */

  export type AggregateResena = {
    _count: ResenaCountAggregateOutputType | null
    _avg: ResenaAvgAggregateOutputType | null
    _sum: ResenaSumAggregateOutputType | null
    _min: ResenaMinAggregateOutputType | null
    _max: ResenaMaxAggregateOutputType | null
  }

  export type ResenaAvgAggregateOutputType = {
    id: number | null
    usuarioId: number | null
    juegoId: number | null
    puntuacion: number | null
  }

  export type ResenaSumAggregateOutputType = {
    id: number | null
    usuarioId: number | null
    juegoId: number | null
    puntuacion: number | null
  }

  export type ResenaMinAggregateOutputType = {
    id: number | null
    usuarioId: number | null
    juegoId: number | null
    fechaCreacion: Date | null
    texto: string | null
    puntuacion: number | null
  }

  export type ResenaMaxAggregateOutputType = {
    id: number | null
    usuarioId: number | null
    juegoId: number | null
    fechaCreacion: Date | null
    texto: string | null
    puntuacion: number | null
  }

  export type ResenaCountAggregateOutputType = {
    id: number
    usuarioId: number
    juegoId: number
    fechaCreacion: number
    texto: number
    puntuacion: number
    _all: number
  }


  export type ResenaAvgAggregateInputType = {
    id?: true
    usuarioId?: true
    juegoId?: true
    puntuacion?: true
  }

  export type ResenaSumAggregateInputType = {
    id?: true
    usuarioId?: true
    juegoId?: true
    puntuacion?: true
  }

  export type ResenaMinAggregateInputType = {
    id?: true
    usuarioId?: true
    juegoId?: true
    fechaCreacion?: true
    texto?: true
    puntuacion?: true
  }

  export type ResenaMaxAggregateInputType = {
    id?: true
    usuarioId?: true
    juegoId?: true
    fechaCreacion?: true
    texto?: true
    puntuacion?: true
  }

  export type ResenaCountAggregateInputType = {
    id?: true
    usuarioId?: true
    juegoId?: true
    fechaCreacion?: true
    texto?: true
    puntuacion?: true
    _all?: true
  }

  export type ResenaAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Resena to aggregate.
     */
    where?: ResenaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Resenas to fetch.
     */
    orderBy?: ResenaOrderByWithRelationInput | ResenaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ResenaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Resenas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Resenas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Resenas
    **/
    _count?: true | ResenaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ResenaAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ResenaSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ResenaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ResenaMaxAggregateInputType
  }

  export type GetResenaAggregateType<T extends ResenaAggregateArgs> = {
        [P in keyof T & keyof AggregateResena]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateResena[P]>
      : GetScalarType<T[P], AggregateResena[P]>
  }




  export type ResenaGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ResenaWhereInput
    orderBy?: ResenaOrderByWithAggregationInput | ResenaOrderByWithAggregationInput[]
    by: ResenaScalarFieldEnum[] | ResenaScalarFieldEnum
    having?: ResenaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ResenaCountAggregateInputType | true
    _avg?: ResenaAvgAggregateInputType
    _sum?: ResenaSumAggregateInputType
    _min?: ResenaMinAggregateInputType
    _max?: ResenaMaxAggregateInputType
  }

  export type ResenaGroupByOutputType = {
    id: number
    usuarioId: number
    juegoId: number
    fechaCreacion: Date
    texto: string
    puntuacion: number
    _count: ResenaCountAggregateOutputType | null
    _avg: ResenaAvgAggregateOutputType | null
    _sum: ResenaSumAggregateOutputType | null
    _min: ResenaMinAggregateOutputType | null
    _max: ResenaMaxAggregateOutputType | null
  }

  type GetResenaGroupByPayload<T extends ResenaGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ResenaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ResenaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ResenaGroupByOutputType[P]>
            : GetScalarType<T[P], ResenaGroupByOutputType[P]>
        }
      >
    >


  export type ResenaSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    usuarioId?: boolean
    juegoId?: boolean
    fechaCreacion?: boolean
    texto?: boolean
    puntuacion?: boolean
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
    juego?: boolean | JuegoDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["resena"]>

  export type ResenaSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    usuarioId?: boolean
    juegoId?: boolean
    fechaCreacion?: boolean
    texto?: boolean
    puntuacion?: boolean
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
    juego?: boolean | JuegoDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["resena"]>

  export type ResenaSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    usuarioId?: boolean
    juegoId?: boolean
    fechaCreacion?: boolean
    texto?: boolean
    puntuacion?: boolean
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
    juego?: boolean | JuegoDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["resena"]>

  export type ResenaSelectScalar = {
    id?: boolean
    usuarioId?: boolean
    juegoId?: boolean
    fechaCreacion?: boolean
    texto?: boolean
    puntuacion?: boolean
  }

  export type ResenaOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "usuarioId" | "juegoId" | "fechaCreacion" | "texto" | "puntuacion", ExtArgs["result"]["resena"]>
  export type ResenaInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
    juego?: boolean | JuegoDefaultArgs<ExtArgs>
  }
  export type ResenaIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
    juego?: boolean | JuegoDefaultArgs<ExtArgs>
  }
  export type ResenaIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
    juego?: boolean | JuegoDefaultArgs<ExtArgs>
  }

  export type $ResenaPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Resena"
    objects: {
      usuario: Prisma.$UsuarioPayload<ExtArgs>
      juego: Prisma.$JuegoPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      usuarioId: number
      juegoId: number
      fechaCreacion: Date
      texto: string
      puntuacion: number
    }, ExtArgs["result"]["resena"]>
    composites: {}
  }

  type ResenaGetPayload<S extends boolean | null | undefined | ResenaDefaultArgs> = $Result.GetResult<Prisma.$ResenaPayload, S>

  type ResenaCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ResenaFindManyArgs, 'select' | 'include' | 'distinct' | 'omit' | 'relationLoadStrategy'> & {
      select?: ResenaCountAggregateInputType | true
    }

  export interface ResenaDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Resena'], meta: { name: 'Resena' } }
    /**
     * Find zero or one Resena that matches the filter.
     * @param {ResenaFindUniqueArgs} args - Arguments to find a Resena
     * @example
     * // Get one Resena
     * const resena = await prisma.resena.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ResenaFindUniqueArgs>(args: SelectSubset<T, ResenaFindUniqueArgs<ExtArgs>>): Prisma__ResenaClient<$Result.GetResult<Prisma.$ResenaPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Resena that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ResenaFindUniqueOrThrowArgs} args - Arguments to find a Resena
     * @example
     * // Get one Resena
     * const resena = await prisma.resena.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ResenaFindUniqueOrThrowArgs>(args: SelectSubset<T, ResenaFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ResenaClient<$Result.GetResult<Prisma.$ResenaPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Resena that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResenaFindFirstArgs} args - Arguments to find a Resena
     * @example
     * // Get one Resena
     * const resena = await prisma.resena.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ResenaFindFirstArgs>(args?: SelectSubset<T, ResenaFindFirstArgs<ExtArgs>>): Prisma__ResenaClient<$Result.GetResult<Prisma.$ResenaPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Resena that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResenaFindFirstOrThrowArgs} args - Arguments to find a Resena
     * @example
     * // Get one Resena
     * const resena = await prisma.resena.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ResenaFindFirstOrThrowArgs>(args?: SelectSubset<T, ResenaFindFirstOrThrowArgs<ExtArgs>>): Prisma__ResenaClient<$Result.GetResult<Prisma.$ResenaPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Resenas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResenaFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Resenas
     * const resenas = await prisma.resena.findMany()
     * 
     * // Get first 10 Resenas
     * const resenas = await prisma.resena.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const resenaWithIdOnly = await prisma.resena.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ResenaFindManyArgs>(args?: SelectSubset<T, ResenaFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ResenaPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Resena.
     * @param {ResenaCreateArgs} args - Arguments to create a Resena.
     * @example
     * // Create one Resena
     * const Resena = await prisma.resena.create({
     *   data: {
     *     // ... data to create a Resena
     *   }
     * })
     * 
     */
    create<T extends ResenaCreateArgs>(args: SelectSubset<T, ResenaCreateArgs<ExtArgs>>): Prisma__ResenaClient<$Result.GetResult<Prisma.$ResenaPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Resenas.
     * @param {ResenaCreateManyArgs} args - Arguments to create many Resenas.
     * @example
     * // Create many Resenas
     * const resena = await prisma.resena.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ResenaCreateManyArgs>(args?: SelectSubset<T, ResenaCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Resenas and returns the data saved in the database.
     * @param {ResenaCreateManyAndReturnArgs} args - Arguments to create many Resenas.
     * @example
     * // Create many Resenas
     * const resena = await prisma.resena.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Resenas and only return the `id`
     * const resenaWithIdOnly = await prisma.resena.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ResenaCreateManyAndReturnArgs>(args?: SelectSubset<T, ResenaCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ResenaPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Resena.
     * @param {ResenaDeleteArgs} args - Arguments to delete one Resena.
     * @example
     * // Delete one Resena
     * const Resena = await prisma.resena.delete({
     *   where: {
     *     // ... filter to delete one Resena
     *   }
     * })
     * 
     */
    delete<T extends ResenaDeleteArgs>(args: SelectSubset<T, ResenaDeleteArgs<ExtArgs>>): Prisma__ResenaClient<$Result.GetResult<Prisma.$ResenaPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Resena.
     * @param {ResenaUpdateArgs} args - Arguments to update one Resena.
     * @example
     * // Update one Resena
     * const resena = await prisma.resena.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ResenaUpdateArgs>(args: SelectSubset<T, ResenaUpdateArgs<ExtArgs>>): Prisma__ResenaClient<$Result.GetResult<Prisma.$ResenaPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Resenas.
     * @param {ResenaDeleteManyArgs} args - Arguments to filter Resenas to delete.
     * @example
     * // Delete a few Resenas
     * const { count } = await prisma.resena.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ResenaDeleteManyArgs>(args?: SelectSubset<T, ResenaDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Resenas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResenaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Resenas
     * const resena = await prisma.resena.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ResenaUpdateManyArgs>(args: SelectSubset<T, ResenaUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Resenas and returns the data updated in the database.
     * @param {ResenaUpdateManyAndReturnArgs} args - Arguments to update many Resenas.
     * @example
     * // Update many Resenas
     * const resena = await prisma.resena.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Resenas and only return the `id`
     * const resenaWithIdOnly = await prisma.resena.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ResenaUpdateManyAndReturnArgs>(args: SelectSubset<T, ResenaUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ResenaPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Resena.
     * @param {ResenaUpsertArgs} args - Arguments to update or create a Resena.
     * @example
     * // Update or create a Resena
     * const resena = await prisma.resena.upsert({
     *   create: {
     *     // ... data to create a Resena
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Resena we want to update
     *   }
     * })
     */
    upsert<T extends ResenaUpsertArgs>(args: SelectSubset<T, ResenaUpsertArgs<ExtArgs>>): Prisma__ResenaClient<$Result.GetResult<Prisma.$ResenaPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Resenas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResenaCountArgs} args - Arguments to filter Resenas to count.
     * @example
     * // Count the number of Resenas
     * const count = await prisma.resena.count({
     *   where: {
     *     // ... the filter for the Resenas we want to count
     *   }
     * })
    **/
    count<T extends ResenaCountArgs>(
      args?: Subset<T, ResenaCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ResenaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Resena.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResenaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ResenaAggregateArgs>(args: Subset<T, ResenaAggregateArgs>): Prisma.PrismaPromise<GetResenaAggregateType<T>>

    /**
     * Group by Resena.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResenaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ResenaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ResenaGroupByArgs['orderBy'] }
        : { orderBy?: ResenaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ResenaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetResenaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Resena model
   */
  readonly fields: ResenaFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Resena.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ResenaClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    usuario<T extends UsuarioDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UsuarioDefaultArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    juego<T extends JuegoDefaultArgs<ExtArgs> = {}>(args?: Subset<T, JuegoDefaultArgs<ExtArgs>>): Prisma__JuegoClient<$Result.GetResult<Prisma.$JuegoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Resena model
   */
  interface ResenaFieldRefs {
    readonly id: FieldRef<"Resena", 'Int'>
    readonly usuarioId: FieldRef<"Resena", 'Int'>
    readonly juegoId: FieldRef<"Resena", 'Int'>
    readonly fechaCreacion: FieldRef<"Resena", 'DateTime'>
    readonly texto: FieldRef<"Resena", 'String'>
    readonly puntuacion: FieldRef<"Resena", 'Float'>
  }
    

  // Custom InputTypes
  /**
   * Resena findUnique
   */
  export type ResenaFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Resena
     */
    select?: ResenaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Resena
     */
    omit?: ResenaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResenaInclude<ExtArgs> | null
    /**
     * Filter, which Resena to fetch.
     */
    where: ResenaWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * Resena findUniqueOrThrow
   */
  export type ResenaFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Resena
     */
    select?: ResenaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Resena
     */
    omit?: ResenaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResenaInclude<ExtArgs> | null
    /**
     * Filter, which Resena to fetch.
     */
    where: ResenaWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * Resena findFirst
   */
  export type ResenaFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Resena
     */
    select?: ResenaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Resena
     */
    omit?: ResenaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResenaInclude<ExtArgs> | null
    /**
     * Filter, which Resena to fetch.
     */
    where?: ResenaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Resenas to fetch.
     */
    orderBy?: ResenaOrderByWithRelationInput | ResenaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Resenas.
     */
    cursor?: ResenaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Resenas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Resenas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Resenas.
     */
    distinct?: ResenaScalarFieldEnum | ResenaScalarFieldEnum[]
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * Resena findFirstOrThrow
   */
  export type ResenaFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Resena
     */
    select?: ResenaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Resena
     */
    omit?: ResenaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResenaInclude<ExtArgs> | null
    /**
     * Filter, which Resena to fetch.
     */
    where?: ResenaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Resenas to fetch.
     */
    orderBy?: ResenaOrderByWithRelationInput | ResenaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Resenas.
     */
    cursor?: ResenaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Resenas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Resenas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Resenas.
     */
    distinct?: ResenaScalarFieldEnum | ResenaScalarFieldEnum[]
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * Resena findMany
   */
  export type ResenaFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Resena
     */
    select?: ResenaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Resena
     */
    omit?: ResenaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResenaInclude<ExtArgs> | null
    /**
     * Filter, which Resenas to fetch.
     */
    where?: ResenaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Resenas to fetch.
     */
    orderBy?: ResenaOrderByWithRelationInput | ResenaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Resenas.
     */
    cursor?: ResenaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Resenas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Resenas.
     */
    skip?: number
    distinct?: ResenaScalarFieldEnum | ResenaScalarFieldEnum[]
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * Resena create
   */
  export type ResenaCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Resena
     */
    select?: ResenaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Resena
     */
    omit?: ResenaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResenaInclude<ExtArgs> | null
    /**
     * The data needed to create a Resena.
     */
    data: XOR<ResenaCreateInput, ResenaUncheckedCreateInput>
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * Resena createMany
   */
  export type ResenaCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Resenas.
     */
    data: ResenaCreateManyInput | ResenaCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Resena createManyAndReturn
   */
  export type ResenaCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Resena
     */
    select?: ResenaSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Resena
     */
    omit?: ResenaOmit<ExtArgs> | null
    /**
     * The data used to create many Resenas.
     */
    data: ResenaCreateManyInput | ResenaCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResenaIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Resena update
   */
  export type ResenaUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Resena
     */
    select?: ResenaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Resena
     */
    omit?: ResenaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResenaInclude<ExtArgs> | null
    /**
     * The data needed to update a Resena.
     */
    data: XOR<ResenaUpdateInput, ResenaUncheckedUpdateInput>
    /**
     * Choose, which Resena to update.
     */
    where: ResenaWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * Resena updateMany
   */
  export type ResenaUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Resenas.
     */
    data: XOR<ResenaUpdateManyMutationInput, ResenaUncheckedUpdateManyInput>
    /**
     * Filter which Resenas to update
     */
    where?: ResenaWhereInput
    /**
     * Limit how many Resenas to update.
     */
    limit?: number
  }

  /**
   * Resena updateManyAndReturn
   */
  export type ResenaUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Resena
     */
    select?: ResenaSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Resena
     */
    omit?: ResenaOmit<ExtArgs> | null
    /**
     * The data used to update Resenas.
     */
    data: XOR<ResenaUpdateManyMutationInput, ResenaUncheckedUpdateManyInput>
    /**
     * Filter which Resenas to update
     */
    where?: ResenaWhereInput
    /**
     * Limit how many Resenas to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResenaIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Resena upsert
   */
  export type ResenaUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Resena
     */
    select?: ResenaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Resena
     */
    omit?: ResenaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResenaInclude<ExtArgs> | null
    /**
     * The filter to search for the Resena to update in case it exists.
     */
    where: ResenaWhereUniqueInput
    /**
     * In case the Resena found by the `where` argument doesn't exist, create a new Resena with this data.
     */
    create: XOR<ResenaCreateInput, ResenaUncheckedCreateInput>
    /**
     * In case the Resena was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ResenaUpdateInput, ResenaUncheckedUpdateInput>
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * Resena delete
   */
  export type ResenaDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Resena
     */
    select?: ResenaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Resena
     */
    omit?: ResenaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResenaInclude<ExtArgs> | null
    /**
     * Filter which Resena to delete.
     */
    where: ResenaWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * Resena deleteMany
   */
  export type ResenaDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Resenas to delete
     */
    where?: ResenaWhereInput
    /**
     * Limit how many Resenas to delete.
     */
    limit?: number
  }

  /**
   * Resena without action
   */
  export type ResenaDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Resena
     */
    select?: ResenaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Resena
     */
    omit?: ResenaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResenaInclude<ExtArgs> | null
  }


  /**
   * Model Carrito
   */

  export type AggregateCarrito = {
    _count: CarritoCountAggregateOutputType | null
    _avg: CarritoAvgAggregateOutputType | null
    _sum: CarritoSumAggregateOutputType | null
    _min: CarritoMinAggregateOutputType | null
    _max: CarritoMaxAggregateOutputType | null
  }

  export type CarritoAvgAggregateOutputType = {
    id: number | null
    usuarioId: number | null
    juegoId: number | null
  }

  export type CarritoSumAggregateOutputType = {
    id: number | null
    usuarioId: number | null
    juegoId: number | null
  }

  export type CarritoMinAggregateOutputType = {
    id: number | null
    usuarioId: number | null
    juegoId: number | null
  }

  export type CarritoMaxAggregateOutputType = {
    id: number | null
    usuarioId: number | null
    juegoId: number | null
  }

  export type CarritoCountAggregateOutputType = {
    id: number
    usuarioId: number
    juegoId: number
    _all: number
  }


  export type CarritoAvgAggregateInputType = {
    id?: true
    usuarioId?: true
    juegoId?: true
  }

  export type CarritoSumAggregateInputType = {
    id?: true
    usuarioId?: true
    juegoId?: true
  }

  export type CarritoMinAggregateInputType = {
    id?: true
    usuarioId?: true
    juegoId?: true
  }

  export type CarritoMaxAggregateInputType = {
    id?: true
    usuarioId?: true
    juegoId?: true
  }

  export type CarritoCountAggregateInputType = {
    id?: true
    usuarioId?: true
    juegoId?: true
    _all?: true
  }

  export type CarritoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Carrito to aggregate.
     */
    where?: CarritoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Carritos to fetch.
     */
    orderBy?: CarritoOrderByWithRelationInput | CarritoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CarritoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Carritos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Carritos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Carritos
    **/
    _count?: true | CarritoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CarritoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CarritoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CarritoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CarritoMaxAggregateInputType
  }

  export type GetCarritoAggregateType<T extends CarritoAggregateArgs> = {
        [P in keyof T & keyof AggregateCarrito]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCarrito[P]>
      : GetScalarType<T[P], AggregateCarrito[P]>
  }




  export type CarritoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CarritoWhereInput
    orderBy?: CarritoOrderByWithAggregationInput | CarritoOrderByWithAggregationInput[]
    by: CarritoScalarFieldEnum[] | CarritoScalarFieldEnum
    having?: CarritoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CarritoCountAggregateInputType | true
    _avg?: CarritoAvgAggregateInputType
    _sum?: CarritoSumAggregateInputType
    _min?: CarritoMinAggregateInputType
    _max?: CarritoMaxAggregateInputType
  }

  export type CarritoGroupByOutputType = {
    id: number
    usuarioId: number
    juegoId: number
    _count: CarritoCountAggregateOutputType | null
    _avg: CarritoAvgAggregateOutputType | null
    _sum: CarritoSumAggregateOutputType | null
    _min: CarritoMinAggregateOutputType | null
    _max: CarritoMaxAggregateOutputType | null
  }

  type GetCarritoGroupByPayload<T extends CarritoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CarritoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CarritoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CarritoGroupByOutputType[P]>
            : GetScalarType<T[P], CarritoGroupByOutputType[P]>
        }
      >
    >


  export type CarritoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    usuarioId?: boolean
    juegoId?: boolean
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
    juego?: boolean | JuegoDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["carrito"]>

  export type CarritoSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    usuarioId?: boolean
    juegoId?: boolean
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
    juego?: boolean | JuegoDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["carrito"]>

  export type CarritoSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    usuarioId?: boolean
    juegoId?: boolean
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
    juego?: boolean | JuegoDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["carrito"]>

  export type CarritoSelectScalar = {
    id?: boolean
    usuarioId?: boolean
    juegoId?: boolean
  }

  export type CarritoOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "usuarioId" | "juegoId", ExtArgs["result"]["carrito"]>
  export type CarritoInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
    juego?: boolean | JuegoDefaultArgs<ExtArgs>
  }
  export type CarritoIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
    juego?: boolean | JuegoDefaultArgs<ExtArgs>
  }
  export type CarritoIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
    juego?: boolean | JuegoDefaultArgs<ExtArgs>
  }

  export type $CarritoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Carrito"
    objects: {
      usuario: Prisma.$UsuarioPayload<ExtArgs>
      juego: Prisma.$JuegoPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      usuarioId: number
      juegoId: number
    }, ExtArgs["result"]["carrito"]>
    composites: {}
  }

  type CarritoGetPayload<S extends boolean | null | undefined | CarritoDefaultArgs> = $Result.GetResult<Prisma.$CarritoPayload, S>

  type CarritoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CarritoFindManyArgs, 'select' | 'include' | 'distinct' | 'omit' | 'relationLoadStrategy'> & {
      select?: CarritoCountAggregateInputType | true
    }

  export interface CarritoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Carrito'], meta: { name: 'Carrito' } }
    /**
     * Find zero or one Carrito that matches the filter.
     * @param {CarritoFindUniqueArgs} args - Arguments to find a Carrito
     * @example
     * // Get one Carrito
     * const carrito = await prisma.carrito.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CarritoFindUniqueArgs>(args: SelectSubset<T, CarritoFindUniqueArgs<ExtArgs>>): Prisma__CarritoClient<$Result.GetResult<Prisma.$CarritoPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Carrito that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CarritoFindUniqueOrThrowArgs} args - Arguments to find a Carrito
     * @example
     * // Get one Carrito
     * const carrito = await prisma.carrito.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CarritoFindUniqueOrThrowArgs>(args: SelectSubset<T, CarritoFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CarritoClient<$Result.GetResult<Prisma.$CarritoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Carrito that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CarritoFindFirstArgs} args - Arguments to find a Carrito
     * @example
     * // Get one Carrito
     * const carrito = await prisma.carrito.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CarritoFindFirstArgs>(args?: SelectSubset<T, CarritoFindFirstArgs<ExtArgs>>): Prisma__CarritoClient<$Result.GetResult<Prisma.$CarritoPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Carrito that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CarritoFindFirstOrThrowArgs} args - Arguments to find a Carrito
     * @example
     * // Get one Carrito
     * const carrito = await prisma.carrito.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CarritoFindFirstOrThrowArgs>(args?: SelectSubset<T, CarritoFindFirstOrThrowArgs<ExtArgs>>): Prisma__CarritoClient<$Result.GetResult<Prisma.$CarritoPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Carritos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CarritoFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Carritos
     * const carritos = await prisma.carrito.findMany()
     * 
     * // Get first 10 Carritos
     * const carritos = await prisma.carrito.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const carritoWithIdOnly = await prisma.carrito.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CarritoFindManyArgs>(args?: SelectSubset<T, CarritoFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CarritoPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Carrito.
     * @param {CarritoCreateArgs} args - Arguments to create a Carrito.
     * @example
     * // Create one Carrito
     * const Carrito = await prisma.carrito.create({
     *   data: {
     *     // ... data to create a Carrito
     *   }
     * })
     * 
     */
    create<T extends CarritoCreateArgs>(args: SelectSubset<T, CarritoCreateArgs<ExtArgs>>): Prisma__CarritoClient<$Result.GetResult<Prisma.$CarritoPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Carritos.
     * @param {CarritoCreateManyArgs} args - Arguments to create many Carritos.
     * @example
     * // Create many Carritos
     * const carrito = await prisma.carrito.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CarritoCreateManyArgs>(args?: SelectSubset<T, CarritoCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Carritos and returns the data saved in the database.
     * @param {CarritoCreateManyAndReturnArgs} args - Arguments to create many Carritos.
     * @example
     * // Create many Carritos
     * const carrito = await prisma.carrito.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Carritos and only return the `id`
     * const carritoWithIdOnly = await prisma.carrito.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CarritoCreateManyAndReturnArgs>(args?: SelectSubset<T, CarritoCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CarritoPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Carrito.
     * @param {CarritoDeleteArgs} args - Arguments to delete one Carrito.
     * @example
     * // Delete one Carrito
     * const Carrito = await prisma.carrito.delete({
     *   where: {
     *     // ... filter to delete one Carrito
     *   }
     * })
     * 
     */
    delete<T extends CarritoDeleteArgs>(args: SelectSubset<T, CarritoDeleteArgs<ExtArgs>>): Prisma__CarritoClient<$Result.GetResult<Prisma.$CarritoPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Carrito.
     * @param {CarritoUpdateArgs} args - Arguments to update one Carrito.
     * @example
     * // Update one Carrito
     * const carrito = await prisma.carrito.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CarritoUpdateArgs>(args: SelectSubset<T, CarritoUpdateArgs<ExtArgs>>): Prisma__CarritoClient<$Result.GetResult<Prisma.$CarritoPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Carritos.
     * @param {CarritoDeleteManyArgs} args - Arguments to filter Carritos to delete.
     * @example
     * // Delete a few Carritos
     * const { count } = await prisma.carrito.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CarritoDeleteManyArgs>(args?: SelectSubset<T, CarritoDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Carritos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CarritoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Carritos
     * const carrito = await prisma.carrito.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CarritoUpdateManyArgs>(args: SelectSubset<T, CarritoUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Carritos and returns the data updated in the database.
     * @param {CarritoUpdateManyAndReturnArgs} args - Arguments to update many Carritos.
     * @example
     * // Update many Carritos
     * const carrito = await prisma.carrito.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Carritos and only return the `id`
     * const carritoWithIdOnly = await prisma.carrito.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CarritoUpdateManyAndReturnArgs>(args: SelectSubset<T, CarritoUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CarritoPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Carrito.
     * @param {CarritoUpsertArgs} args - Arguments to update or create a Carrito.
     * @example
     * // Update or create a Carrito
     * const carrito = await prisma.carrito.upsert({
     *   create: {
     *     // ... data to create a Carrito
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Carrito we want to update
     *   }
     * })
     */
    upsert<T extends CarritoUpsertArgs>(args: SelectSubset<T, CarritoUpsertArgs<ExtArgs>>): Prisma__CarritoClient<$Result.GetResult<Prisma.$CarritoPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Carritos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CarritoCountArgs} args - Arguments to filter Carritos to count.
     * @example
     * // Count the number of Carritos
     * const count = await prisma.carrito.count({
     *   where: {
     *     // ... the filter for the Carritos we want to count
     *   }
     * })
    **/
    count<T extends CarritoCountArgs>(
      args?: Subset<T, CarritoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CarritoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Carrito.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CarritoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CarritoAggregateArgs>(args: Subset<T, CarritoAggregateArgs>): Prisma.PrismaPromise<GetCarritoAggregateType<T>>

    /**
     * Group by Carrito.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CarritoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CarritoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CarritoGroupByArgs['orderBy'] }
        : { orderBy?: CarritoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CarritoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCarritoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Carrito model
   */
  readonly fields: CarritoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Carrito.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CarritoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    usuario<T extends UsuarioDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UsuarioDefaultArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    juego<T extends JuegoDefaultArgs<ExtArgs> = {}>(args?: Subset<T, JuegoDefaultArgs<ExtArgs>>): Prisma__JuegoClient<$Result.GetResult<Prisma.$JuegoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Carrito model
   */
  interface CarritoFieldRefs {
    readonly id: FieldRef<"Carrito", 'Int'>
    readonly usuarioId: FieldRef<"Carrito", 'Int'>
    readonly juegoId: FieldRef<"Carrito", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Carrito findUnique
   */
  export type CarritoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Carrito
     */
    select?: CarritoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Carrito
     */
    omit?: CarritoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CarritoInclude<ExtArgs> | null
    /**
     * Filter, which Carrito to fetch.
     */
    where: CarritoWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * Carrito findUniqueOrThrow
   */
  export type CarritoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Carrito
     */
    select?: CarritoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Carrito
     */
    omit?: CarritoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CarritoInclude<ExtArgs> | null
    /**
     * Filter, which Carrito to fetch.
     */
    where: CarritoWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * Carrito findFirst
   */
  export type CarritoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Carrito
     */
    select?: CarritoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Carrito
     */
    omit?: CarritoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CarritoInclude<ExtArgs> | null
    /**
     * Filter, which Carrito to fetch.
     */
    where?: CarritoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Carritos to fetch.
     */
    orderBy?: CarritoOrderByWithRelationInput | CarritoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Carritos.
     */
    cursor?: CarritoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Carritos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Carritos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Carritos.
     */
    distinct?: CarritoScalarFieldEnum | CarritoScalarFieldEnum[]
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * Carrito findFirstOrThrow
   */
  export type CarritoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Carrito
     */
    select?: CarritoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Carrito
     */
    omit?: CarritoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CarritoInclude<ExtArgs> | null
    /**
     * Filter, which Carrito to fetch.
     */
    where?: CarritoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Carritos to fetch.
     */
    orderBy?: CarritoOrderByWithRelationInput | CarritoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Carritos.
     */
    cursor?: CarritoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Carritos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Carritos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Carritos.
     */
    distinct?: CarritoScalarFieldEnum | CarritoScalarFieldEnum[]
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * Carrito findMany
   */
  export type CarritoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Carrito
     */
    select?: CarritoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Carrito
     */
    omit?: CarritoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CarritoInclude<ExtArgs> | null
    /**
     * Filter, which Carritos to fetch.
     */
    where?: CarritoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Carritos to fetch.
     */
    orderBy?: CarritoOrderByWithRelationInput | CarritoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Carritos.
     */
    cursor?: CarritoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Carritos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Carritos.
     */
    skip?: number
    distinct?: CarritoScalarFieldEnum | CarritoScalarFieldEnum[]
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * Carrito create
   */
  export type CarritoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Carrito
     */
    select?: CarritoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Carrito
     */
    omit?: CarritoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CarritoInclude<ExtArgs> | null
    /**
     * The data needed to create a Carrito.
     */
    data: XOR<CarritoCreateInput, CarritoUncheckedCreateInput>
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * Carrito createMany
   */
  export type CarritoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Carritos.
     */
    data: CarritoCreateManyInput | CarritoCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Carrito createManyAndReturn
   */
  export type CarritoCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Carrito
     */
    select?: CarritoSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Carrito
     */
    omit?: CarritoOmit<ExtArgs> | null
    /**
     * The data used to create many Carritos.
     */
    data: CarritoCreateManyInput | CarritoCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CarritoIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Carrito update
   */
  export type CarritoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Carrito
     */
    select?: CarritoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Carrito
     */
    omit?: CarritoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CarritoInclude<ExtArgs> | null
    /**
     * The data needed to update a Carrito.
     */
    data: XOR<CarritoUpdateInput, CarritoUncheckedUpdateInput>
    /**
     * Choose, which Carrito to update.
     */
    where: CarritoWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * Carrito updateMany
   */
  export type CarritoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Carritos.
     */
    data: XOR<CarritoUpdateManyMutationInput, CarritoUncheckedUpdateManyInput>
    /**
     * Filter which Carritos to update
     */
    where?: CarritoWhereInput
    /**
     * Limit how many Carritos to update.
     */
    limit?: number
  }

  /**
   * Carrito updateManyAndReturn
   */
  export type CarritoUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Carrito
     */
    select?: CarritoSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Carrito
     */
    omit?: CarritoOmit<ExtArgs> | null
    /**
     * The data used to update Carritos.
     */
    data: XOR<CarritoUpdateManyMutationInput, CarritoUncheckedUpdateManyInput>
    /**
     * Filter which Carritos to update
     */
    where?: CarritoWhereInput
    /**
     * Limit how many Carritos to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CarritoIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Carrito upsert
   */
  export type CarritoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Carrito
     */
    select?: CarritoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Carrito
     */
    omit?: CarritoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CarritoInclude<ExtArgs> | null
    /**
     * The filter to search for the Carrito to update in case it exists.
     */
    where: CarritoWhereUniqueInput
    /**
     * In case the Carrito found by the `where` argument doesn't exist, create a new Carrito with this data.
     */
    create: XOR<CarritoCreateInput, CarritoUncheckedCreateInput>
    /**
     * In case the Carrito was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CarritoUpdateInput, CarritoUncheckedUpdateInput>
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * Carrito delete
   */
  export type CarritoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Carrito
     */
    select?: CarritoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Carrito
     */
    omit?: CarritoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CarritoInclude<ExtArgs> | null
    /**
     * Filter which Carrito to delete.
     */
    where: CarritoWhereUniqueInput
    relationLoadStrategy?: RelationLoadStrategy
  }

  /**
   * Carrito deleteMany
   */
  export type CarritoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Carritos to delete
     */
    where?: CarritoWhereInput
    /**
     * Limit how many Carritos to delete.
     */
    limit?: number
  }

  /**
   * Carrito without action
   */
  export type CarritoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Carrito
     */
    select?: CarritoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Carrito
     */
    omit?: CarritoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CarritoInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UsuarioScalarFieldEnum: {
    id: 'id',
    correo: 'correo',
    contrasena: 'contrasena',
    rol: 'rol',
    nombre: 'nombre',
    apellido: 'apellido'
  };

  export type UsuarioScalarFieldEnum = (typeof UsuarioScalarFieldEnum)[keyof typeof UsuarioScalarFieldEnum]


  export const RelationLoadStrategy: {
    query: 'query',
    join: 'join'
  };

  export type RelationLoadStrategy = (typeof RelationLoadStrategy)[keyof typeof RelationLoadStrategy]


  export const JuegoScalarFieldEnum: {
    id: 'id',
    titulo: 'titulo',
    descripcion: 'descripcion',
    precio: 'precio',
    porcentajeOferta: 'porcentajeOferta',
    trailerUrl: 'trailerUrl',
    rating: 'rating',
    fechaLanzamiento: 'fechaLanzamiento',
    fechaSubida: 'fechaSubida',
    slug: 'slug',
    reviewJuego: 'reviewJuego'
  };

  export type JuegoScalarFieldEnum = (typeof JuegoScalarFieldEnum)[keyof typeof JuegoScalarFieldEnum]


  export const NoticiaScalarFieldEnum: {
    id: 'id',
    titulo: 'titulo',
    slug: 'slug',
    tiempoLectura: 'tiempoLectura',
    fechaPub: 'fechaPub',
    texto: 'texto',
    resumen: 'resumen',
    fotoId: 'fotoId'
  };

  export type NoticiaScalarFieldEnum = (typeof NoticiaScalarFieldEnum)[keyof typeof NoticiaScalarFieldEnum]


  export const FotoScalarFieldEnum: {
    id: 'id',
    url: 'url',
    juegoId: 'juegoId'
  };

  export type FotoScalarFieldEnum = (typeof FotoScalarFieldEnum)[keyof typeof FotoScalarFieldEnum]


  export const CategoriaScalarFieldEnum: {
    id: 'id',
    nombre: 'nombre'
  };

  export type CategoriaScalarFieldEnum = (typeof CategoriaScalarFieldEnum)[keyof typeof CategoriaScalarFieldEnum]


  export const PlataformaScalarFieldEnum: {
    id: 'id',
    nombre: 'nombre',
    color: 'color'
  };

  export type PlataformaScalarFieldEnum = (typeof PlataformaScalarFieldEnum)[keyof typeof PlataformaScalarFieldEnum]


  export const VentaScalarFieldEnum: {
    id: 'id',
    total: 'total',
    fechaVenta: 'fechaVenta',
    usuarioId: 'usuarioId'
  };

  export type VentaScalarFieldEnum = (typeof VentaScalarFieldEnum)[keyof typeof VentaScalarFieldEnum]


  export const JuegoXVentaScalarFieldEnum: {
    id: 'id',
    juegoId: 'juegoId',
    ventaId: 'ventaId'
  };

  export type JuegoXVentaScalarFieldEnum = (typeof JuegoXVentaScalarFieldEnum)[keyof typeof JuegoXVentaScalarFieldEnum]


  export const JuegoXUsuarioScalarFieldEnum: {
    id: 'id',
    juegoId: 'juegoId',
    usuarioId: 'usuarioId'
  };

  export type JuegoXUsuarioScalarFieldEnum = (typeof JuegoXUsuarioScalarFieldEnum)[keyof typeof JuegoXUsuarioScalarFieldEnum]


  export const ClaveScalarFieldEnum: {
    id: 'id',
    texto: 'texto',
    usada: 'usada',
    juegoId: 'juegoId',
    ventaId: 'ventaId'
  };

  export type ClaveScalarFieldEnum = (typeof ClaveScalarFieldEnum)[keyof typeof ClaveScalarFieldEnum]


  export const CategoriaXJuegoScalarFieldEnum: {
    id: 'id',
    juegoId: 'juegoId',
    categoriaId: 'categoriaId'
  };

  export type CategoriaXJuegoScalarFieldEnum = (typeof CategoriaXJuegoScalarFieldEnum)[keyof typeof CategoriaXJuegoScalarFieldEnum]


  export const PlataformaXJuegoScalarFieldEnum: {
    id: 'id',
    juegoId: 'juegoId',
    plataformaId: 'plataformaId'
  };

  export type PlataformaXJuegoScalarFieldEnum = (typeof PlataformaXJuegoScalarFieldEnum)[keyof typeof PlataformaXJuegoScalarFieldEnum]


  export const CatNoticiaScalarFieldEnum: {
    id: 'id',
    nombre: 'nombre'
  };

  export type CatNoticiaScalarFieldEnum = (typeof CatNoticiaScalarFieldEnum)[keyof typeof CatNoticiaScalarFieldEnum]


  export const CatNoticiaXNoticiaScalarFieldEnum: {
    id: 'id',
    noticiaId: 'noticiaId',
    catNoticiaId: 'catNoticiaId'
  };

  export type CatNoticiaXNoticiaScalarFieldEnum = (typeof CatNoticiaXNoticiaScalarFieldEnum)[keyof typeof CatNoticiaXNoticiaScalarFieldEnum]


  export const ResenaScalarFieldEnum: {
    id: 'id',
    usuarioId: 'usuarioId',
    juegoId: 'juegoId',
    fechaCreacion: 'fechaCreacion',
    texto: 'texto',
    puntuacion: 'puntuacion'
  };

  export type ResenaScalarFieldEnum = (typeof ResenaScalarFieldEnum)[keyof typeof ResenaScalarFieldEnum]


  export const CarritoScalarFieldEnum: {
    id: 'id',
    usuarioId: 'usuarioId',
    juegoId: 'juegoId'
  };

  export type CarritoScalarFieldEnum = (typeof CarritoScalarFieldEnum)[keyof typeof CarritoScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Rol'
   */
  export type EnumRolFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Rol'>
    


  /**
   * Reference to a field of type 'Rol[]'
   */
  export type ListEnumRolFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Rol[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    
  /**
   * Deep Input Types
   */


  export type UsuarioWhereInput = {
    AND?: UsuarioWhereInput | UsuarioWhereInput[]
    OR?: UsuarioWhereInput[]
    NOT?: UsuarioWhereInput | UsuarioWhereInput[]
    id?: IntFilter<"Usuario"> | number
    correo?: StringFilter<"Usuario"> | string
    contrasena?: StringFilter<"Usuario"> | string
    rol?: EnumRolFilter<"Usuario"> | $Enums.Rol
    nombre?: StringFilter<"Usuario"> | string
    apellido?: StringFilter<"Usuario"> | string
    ventas?: VentaListRelationFilter
    juegos?: JuegoXUsuarioListRelationFilter
    resenas?: ResenaListRelationFilter
    carrito?: CarritoListRelationFilter
  }

  export type UsuarioOrderByWithRelationInput = {
    id?: SortOrder
    correo?: SortOrder
    contrasena?: SortOrder
    rol?: SortOrder
    nombre?: SortOrder
    apellido?: SortOrder
    ventas?: VentaOrderByRelationAggregateInput
    juegos?: JuegoXUsuarioOrderByRelationAggregateInput
    resenas?: ResenaOrderByRelationAggregateInput
    carrito?: CarritoOrderByRelationAggregateInput
  }

  export type UsuarioWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    correo?: string
    AND?: UsuarioWhereInput | UsuarioWhereInput[]
    OR?: UsuarioWhereInput[]
    NOT?: UsuarioWhereInput | UsuarioWhereInput[]
    contrasena?: StringFilter<"Usuario"> | string
    rol?: EnumRolFilter<"Usuario"> | $Enums.Rol
    nombre?: StringFilter<"Usuario"> | string
    apellido?: StringFilter<"Usuario"> | string
    ventas?: VentaListRelationFilter
    juegos?: JuegoXUsuarioListRelationFilter
    resenas?: ResenaListRelationFilter
    carrito?: CarritoListRelationFilter
  }, "id" | "correo">

  export type UsuarioOrderByWithAggregationInput = {
    id?: SortOrder
    correo?: SortOrder
    contrasena?: SortOrder
    rol?: SortOrder
    nombre?: SortOrder
    apellido?: SortOrder
    _count?: UsuarioCountOrderByAggregateInput
    _avg?: UsuarioAvgOrderByAggregateInput
    _max?: UsuarioMaxOrderByAggregateInput
    _min?: UsuarioMinOrderByAggregateInput
    _sum?: UsuarioSumOrderByAggregateInput
  }

  export type UsuarioScalarWhereWithAggregatesInput = {
    AND?: UsuarioScalarWhereWithAggregatesInput | UsuarioScalarWhereWithAggregatesInput[]
    OR?: UsuarioScalarWhereWithAggregatesInput[]
    NOT?: UsuarioScalarWhereWithAggregatesInput | UsuarioScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Usuario"> | number
    correo?: StringWithAggregatesFilter<"Usuario"> | string
    contrasena?: StringWithAggregatesFilter<"Usuario"> | string
    rol?: EnumRolWithAggregatesFilter<"Usuario"> | $Enums.Rol
    nombre?: StringWithAggregatesFilter<"Usuario"> | string
    apellido?: StringWithAggregatesFilter<"Usuario"> | string
  }

  export type JuegoWhereInput = {
    AND?: JuegoWhereInput | JuegoWhereInput[]
    OR?: JuegoWhereInput[]
    NOT?: JuegoWhereInput | JuegoWhereInput[]
    id?: IntFilter<"Juego"> | number
    titulo?: StringFilter<"Juego"> | string
    descripcion?: StringFilter<"Juego"> | string
    precio?: FloatFilter<"Juego"> | number
    porcentajeOferta?: FloatNullableFilter<"Juego"> | number | null
    trailerUrl?: StringNullableFilter<"Juego"> | string | null
    rating?: FloatNullableFilter<"Juego"> | number | null
    fechaLanzamiento?: DateTimeFilter<"Juego"> | Date | string
    fechaSubida?: DateTimeFilter<"Juego"> | Date | string
    slug?: StringFilter<"Juego"> | string
    reviewJuego?: StringNullableFilter<"Juego"> | string | null
    fotos?: FotoListRelationFilter
    categorias?: CategoriaXJuegoListRelationFilter
    plataformas?: PlataformaXJuegoListRelationFilter
    claves?: ClaveListRelationFilter
    ventas?: JuegoXVentaListRelationFilter
    usuarios?: JuegoXUsuarioListRelationFilter
    resenas?: ResenaListRelationFilter
    enCarritos?: CarritoListRelationFilter
  }

  export type JuegoOrderByWithRelationInput = {
    id?: SortOrder
    titulo?: SortOrder
    descripcion?: SortOrder
    precio?: SortOrder
    porcentajeOferta?: SortOrderInput | SortOrder
    trailerUrl?: SortOrderInput | SortOrder
    rating?: SortOrderInput | SortOrder
    fechaLanzamiento?: SortOrder
    fechaSubida?: SortOrder
    slug?: SortOrder
    reviewJuego?: SortOrderInput | SortOrder
    fotos?: FotoOrderByRelationAggregateInput
    categorias?: CategoriaXJuegoOrderByRelationAggregateInput
    plataformas?: PlataformaXJuegoOrderByRelationAggregateInput
    claves?: ClaveOrderByRelationAggregateInput
    ventas?: JuegoXVentaOrderByRelationAggregateInput
    usuarios?: JuegoXUsuarioOrderByRelationAggregateInput
    resenas?: ResenaOrderByRelationAggregateInput
    enCarritos?: CarritoOrderByRelationAggregateInput
  }

  export type JuegoWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    titulo?: string
    slug?: string
    AND?: JuegoWhereInput | JuegoWhereInput[]
    OR?: JuegoWhereInput[]
    NOT?: JuegoWhereInput | JuegoWhereInput[]
    descripcion?: StringFilter<"Juego"> | string
    precio?: FloatFilter<"Juego"> | number
    porcentajeOferta?: FloatNullableFilter<"Juego"> | number | null
    trailerUrl?: StringNullableFilter<"Juego"> | string | null
    rating?: FloatNullableFilter<"Juego"> | number | null
    fechaLanzamiento?: DateTimeFilter<"Juego"> | Date | string
    fechaSubida?: DateTimeFilter<"Juego"> | Date | string
    reviewJuego?: StringNullableFilter<"Juego"> | string | null
    fotos?: FotoListRelationFilter
    categorias?: CategoriaXJuegoListRelationFilter
    plataformas?: PlataformaXJuegoListRelationFilter
    claves?: ClaveListRelationFilter
    ventas?: JuegoXVentaListRelationFilter
    usuarios?: JuegoXUsuarioListRelationFilter
    resenas?: ResenaListRelationFilter
    enCarritos?: CarritoListRelationFilter
  }, "id" | "titulo" | "slug">

  export type JuegoOrderByWithAggregationInput = {
    id?: SortOrder
    titulo?: SortOrder
    descripcion?: SortOrder
    precio?: SortOrder
    porcentajeOferta?: SortOrderInput | SortOrder
    trailerUrl?: SortOrderInput | SortOrder
    rating?: SortOrderInput | SortOrder
    fechaLanzamiento?: SortOrder
    fechaSubida?: SortOrder
    slug?: SortOrder
    reviewJuego?: SortOrderInput | SortOrder
    _count?: JuegoCountOrderByAggregateInput
    _avg?: JuegoAvgOrderByAggregateInput
    _max?: JuegoMaxOrderByAggregateInput
    _min?: JuegoMinOrderByAggregateInput
    _sum?: JuegoSumOrderByAggregateInput
  }

  export type JuegoScalarWhereWithAggregatesInput = {
    AND?: JuegoScalarWhereWithAggregatesInput | JuegoScalarWhereWithAggregatesInput[]
    OR?: JuegoScalarWhereWithAggregatesInput[]
    NOT?: JuegoScalarWhereWithAggregatesInput | JuegoScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Juego"> | number
    titulo?: StringWithAggregatesFilter<"Juego"> | string
    descripcion?: StringWithAggregatesFilter<"Juego"> | string
    precio?: FloatWithAggregatesFilter<"Juego"> | number
    porcentajeOferta?: FloatNullableWithAggregatesFilter<"Juego"> | number | null
    trailerUrl?: StringNullableWithAggregatesFilter<"Juego"> | string | null
    rating?: FloatNullableWithAggregatesFilter<"Juego"> | number | null
    fechaLanzamiento?: DateTimeWithAggregatesFilter<"Juego"> | Date | string
    fechaSubida?: DateTimeWithAggregatesFilter<"Juego"> | Date | string
    slug?: StringWithAggregatesFilter<"Juego"> | string
    reviewJuego?: StringNullableWithAggregatesFilter<"Juego"> | string | null
  }

  export type NoticiaWhereInput = {
    AND?: NoticiaWhereInput | NoticiaWhereInput[]
    OR?: NoticiaWhereInput[]
    NOT?: NoticiaWhereInput | NoticiaWhereInput[]
    id?: IntFilter<"Noticia"> | number
    titulo?: StringFilter<"Noticia"> | string
    slug?: StringFilter<"Noticia"> | string
    tiempoLectura?: IntFilter<"Noticia"> | number
    fechaPub?: DateTimeFilter<"Noticia"> | Date | string
    texto?: StringFilter<"Noticia"> | string
    resumen?: StringFilter<"Noticia"> | string
    fotoId?: IntFilter<"Noticia"> | number
    foto?: XOR<FotoScalarRelationFilter, FotoWhereInput>
    categorias?: CatNoticiaXNoticiaListRelationFilter
  }

  export type NoticiaOrderByWithRelationInput = {
    id?: SortOrder
    titulo?: SortOrder
    slug?: SortOrder
    tiempoLectura?: SortOrder
    fechaPub?: SortOrder
    texto?: SortOrder
    resumen?: SortOrder
    fotoId?: SortOrder
    foto?: FotoOrderByWithRelationInput
    categorias?: CatNoticiaXNoticiaOrderByRelationAggregateInput
  }

  export type NoticiaWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    titulo?: string
    slug?: string
    fotoId?: number
    AND?: NoticiaWhereInput | NoticiaWhereInput[]
    OR?: NoticiaWhereInput[]
    NOT?: NoticiaWhereInput | NoticiaWhereInput[]
    tiempoLectura?: IntFilter<"Noticia"> | number
    fechaPub?: DateTimeFilter<"Noticia"> | Date | string
    texto?: StringFilter<"Noticia"> | string
    resumen?: StringFilter<"Noticia"> | string
    foto?: XOR<FotoScalarRelationFilter, FotoWhereInput>
    categorias?: CatNoticiaXNoticiaListRelationFilter
  }, "id" | "titulo" | "slug" | "fotoId">

  export type NoticiaOrderByWithAggregationInput = {
    id?: SortOrder
    titulo?: SortOrder
    slug?: SortOrder
    tiempoLectura?: SortOrder
    fechaPub?: SortOrder
    texto?: SortOrder
    resumen?: SortOrder
    fotoId?: SortOrder
    _count?: NoticiaCountOrderByAggregateInput
    _avg?: NoticiaAvgOrderByAggregateInput
    _max?: NoticiaMaxOrderByAggregateInput
    _min?: NoticiaMinOrderByAggregateInput
    _sum?: NoticiaSumOrderByAggregateInput
  }

  export type NoticiaScalarWhereWithAggregatesInput = {
    AND?: NoticiaScalarWhereWithAggregatesInput | NoticiaScalarWhereWithAggregatesInput[]
    OR?: NoticiaScalarWhereWithAggregatesInput[]
    NOT?: NoticiaScalarWhereWithAggregatesInput | NoticiaScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Noticia"> | number
    titulo?: StringWithAggregatesFilter<"Noticia"> | string
    slug?: StringWithAggregatesFilter<"Noticia"> | string
    tiempoLectura?: IntWithAggregatesFilter<"Noticia"> | number
    fechaPub?: DateTimeWithAggregatesFilter<"Noticia"> | Date | string
    texto?: StringWithAggregatesFilter<"Noticia"> | string
    resumen?: StringWithAggregatesFilter<"Noticia"> | string
    fotoId?: IntWithAggregatesFilter<"Noticia"> | number
  }

  export type FotoWhereInput = {
    AND?: FotoWhereInput | FotoWhereInput[]
    OR?: FotoWhereInput[]
    NOT?: FotoWhereInput | FotoWhereInput[]
    id?: IntFilter<"Foto"> | number
    url?: StringFilter<"Foto"> | string
    juegoId?: IntNullableFilter<"Foto"> | number | null
    juego?: XOR<JuegoNullableScalarRelationFilter, JuegoWhereInput> | null
    noticia?: XOR<NoticiaNullableScalarRelationFilter, NoticiaWhereInput> | null
  }

  export type FotoOrderByWithRelationInput = {
    id?: SortOrder
    url?: SortOrder
    juegoId?: SortOrderInput | SortOrder
    juego?: JuegoOrderByWithRelationInput
    noticia?: NoticiaOrderByWithRelationInput
  }

  export type FotoWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: FotoWhereInput | FotoWhereInput[]
    OR?: FotoWhereInput[]
    NOT?: FotoWhereInput | FotoWhereInput[]
    url?: StringFilter<"Foto"> | string
    juegoId?: IntNullableFilter<"Foto"> | number | null
    juego?: XOR<JuegoNullableScalarRelationFilter, JuegoWhereInput> | null
    noticia?: XOR<NoticiaNullableScalarRelationFilter, NoticiaWhereInput> | null
  }, "id">

  export type FotoOrderByWithAggregationInput = {
    id?: SortOrder
    url?: SortOrder
    juegoId?: SortOrderInput | SortOrder
    _count?: FotoCountOrderByAggregateInput
    _avg?: FotoAvgOrderByAggregateInput
    _max?: FotoMaxOrderByAggregateInput
    _min?: FotoMinOrderByAggregateInput
    _sum?: FotoSumOrderByAggregateInput
  }

  export type FotoScalarWhereWithAggregatesInput = {
    AND?: FotoScalarWhereWithAggregatesInput | FotoScalarWhereWithAggregatesInput[]
    OR?: FotoScalarWhereWithAggregatesInput[]
    NOT?: FotoScalarWhereWithAggregatesInput | FotoScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Foto"> | number
    url?: StringWithAggregatesFilter<"Foto"> | string
    juegoId?: IntNullableWithAggregatesFilter<"Foto"> | number | null
  }

  export type CategoriaWhereInput = {
    AND?: CategoriaWhereInput | CategoriaWhereInput[]
    OR?: CategoriaWhereInput[]
    NOT?: CategoriaWhereInput | CategoriaWhereInput[]
    id?: IntFilter<"Categoria"> | number
    nombre?: StringFilter<"Categoria"> | string
    juegos?: CategoriaXJuegoListRelationFilter
  }

  export type CategoriaOrderByWithRelationInput = {
    id?: SortOrder
    nombre?: SortOrder
    juegos?: CategoriaXJuegoOrderByRelationAggregateInput
  }

  export type CategoriaWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    nombre?: string
    AND?: CategoriaWhereInput | CategoriaWhereInput[]
    OR?: CategoriaWhereInput[]
    NOT?: CategoriaWhereInput | CategoriaWhereInput[]
    juegos?: CategoriaXJuegoListRelationFilter
  }, "id" | "nombre">

  export type CategoriaOrderByWithAggregationInput = {
    id?: SortOrder
    nombre?: SortOrder
    _count?: CategoriaCountOrderByAggregateInput
    _avg?: CategoriaAvgOrderByAggregateInput
    _max?: CategoriaMaxOrderByAggregateInput
    _min?: CategoriaMinOrderByAggregateInput
    _sum?: CategoriaSumOrderByAggregateInput
  }

  export type CategoriaScalarWhereWithAggregatesInput = {
    AND?: CategoriaScalarWhereWithAggregatesInput | CategoriaScalarWhereWithAggregatesInput[]
    OR?: CategoriaScalarWhereWithAggregatesInput[]
    NOT?: CategoriaScalarWhereWithAggregatesInput | CategoriaScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Categoria"> | number
    nombre?: StringWithAggregatesFilter<"Categoria"> | string
  }

  export type PlataformaWhereInput = {
    AND?: PlataformaWhereInput | PlataformaWhereInput[]
    OR?: PlataformaWhereInput[]
    NOT?: PlataformaWhereInput | PlataformaWhereInput[]
    id?: IntFilter<"Plataforma"> | number
    nombre?: StringFilter<"Plataforma"> | string
    color?: StringFilter<"Plataforma"> | string
    juegos?: PlataformaXJuegoListRelationFilter
  }

  export type PlataformaOrderByWithRelationInput = {
    id?: SortOrder
    nombre?: SortOrder
    color?: SortOrder
    juegos?: PlataformaXJuegoOrderByRelationAggregateInput
  }

  export type PlataformaWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    nombre?: string
    AND?: PlataformaWhereInput | PlataformaWhereInput[]
    OR?: PlataformaWhereInput[]
    NOT?: PlataformaWhereInput | PlataformaWhereInput[]
    color?: StringFilter<"Plataforma"> | string
    juegos?: PlataformaXJuegoListRelationFilter
  }, "id" | "nombre">

  export type PlataformaOrderByWithAggregationInput = {
    id?: SortOrder
    nombre?: SortOrder
    color?: SortOrder
    _count?: PlataformaCountOrderByAggregateInput
    _avg?: PlataformaAvgOrderByAggregateInput
    _max?: PlataformaMaxOrderByAggregateInput
    _min?: PlataformaMinOrderByAggregateInput
    _sum?: PlataformaSumOrderByAggregateInput
  }

  export type PlataformaScalarWhereWithAggregatesInput = {
    AND?: PlataformaScalarWhereWithAggregatesInput | PlataformaScalarWhereWithAggregatesInput[]
    OR?: PlataformaScalarWhereWithAggregatesInput[]
    NOT?: PlataformaScalarWhereWithAggregatesInput | PlataformaScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Plataforma"> | number
    nombre?: StringWithAggregatesFilter<"Plataforma"> | string
    color?: StringWithAggregatesFilter<"Plataforma"> | string
  }

  export type VentaWhereInput = {
    AND?: VentaWhereInput | VentaWhereInput[]
    OR?: VentaWhereInput[]
    NOT?: VentaWhereInput | VentaWhereInput[]
    id?: IntFilter<"Venta"> | number
    total?: FloatFilter<"Venta"> | number
    fechaVenta?: DateTimeFilter<"Venta"> | Date | string
    usuarioId?: IntFilter<"Venta"> | number
    usuario?: XOR<UsuarioScalarRelationFilter, UsuarioWhereInput>
    juegos?: JuegoXVentaListRelationFilter
    claves?: ClaveListRelationFilter
  }

  export type VentaOrderByWithRelationInput = {
    id?: SortOrder
    total?: SortOrder
    fechaVenta?: SortOrder
    usuarioId?: SortOrder
    usuario?: UsuarioOrderByWithRelationInput
    juegos?: JuegoXVentaOrderByRelationAggregateInput
    claves?: ClaveOrderByRelationAggregateInput
  }

  export type VentaWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: VentaWhereInput | VentaWhereInput[]
    OR?: VentaWhereInput[]
    NOT?: VentaWhereInput | VentaWhereInput[]
    total?: FloatFilter<"Venta"> | number
    fechaVenta?: DateTimeFilter<"Venta"> | Date | string
    usuarioId?: IntFilter<"Venta"> | number
    usuario?: XOR<UsuarioScalarRelationFilter, UsuarioWhereInput>
    juegos?: JuegoXVentaListRelationFilter
    claves?: ClaveListRelationFilter
  }, "id">

  export type VentaOrderByWithAggregationInput = {
    id?: SortOrder
    total?: SortOrder
    fechaVenta?: SortOrder
    usuarioId?: SortOrder
    _count?: VentaCountOrderByAggregateInput
    _avg?: VentaAvgOrderByAggregateInput
    _max?: VentaMaxOrderByAggregateInput
    _min?: VentaMinOrderByAggregateInput
    _sum?: VentaSumOrderByAggregateInput
  }

  export type VentaScalarWhereWithAggregatesInput = {
    AND?: VentaScalarWhereWithAggregatesInput | VentaScalarWhereWithAggregatesInput[]
    OR?: VentaScalarWhereWithAggregatesInput[]
    NOT?: VentaScalarWhereWithAggregatesInput | VentaScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Venta"> | number
    total?: FloatWithAggregatesFilter<"Venta"> | number
    fechaVenta?: DateTimeWithAggregatesFilter<"Venta"> | Date | string
    usuarioId?: IntWithAggregatesFilter<"Venta"> | number
  }

  export type JuegoXVentaWhereInput = {
    AND?: JuegoXVentaWhereInput | JuegoXVentaWhereInput[]
    OR?: JuegoXVentaWhereInput[]
    NOT?: JuegoXVentaWhereInput | JuegoXVentaWhereInput[]
    id?: IntFilter<"JuegoXVenta"> | number
    juegoId?: IntFilter<"JuegoXVenta"> | number
    ventaId?: IntFilter<"JuegoXVenta"> | number
    juego?: XOR<JuegoScalarRelationFilter, JuegoWhereInput>
    venta?: XOR<VentaScalarRelationFilter, VentaWhereInput>
  }

  export type JuegoXVentaOrderByWithRelationInput = {
    id?: SortOrder
    juegoId?: SortOrder
    ventaId?: SortOrder
    juego?: JuegoOrderByWithRelationInput
    venta?: VentaOrderByWithRelationInput
  }

  export type JuegoXVentaWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: JuegoXVentaWhereInput | JuegoXVentaWhereInput[]
    OR?: JuegoXVentaWhereInput[]
    NOT?: JuegoXVentaWhereInput | JuegoXVentaWhereInput[]
    juegoId?: IntFilter<"JuegoXVenta"> | number
    ventaId?: IntFilter<"JuegoXVenta"> | number
    juego?: XOR<JuegoScalarRelationFilter, JuegoWhereInput>
    venta?: XOR<VentaScalarRelationFilter, VentaWhereInput>
  }, "id">

  export type JuegoXVentaOrderByWithAggregationInput = {
    id?: SortOrder
    juegoId?: SortOrder
    ventaId?: SortOrder
    _count?: JuegoXVentaCountOrderByAggregateInput
    _avg?: JuegoXVentaAvgOrderByAggregateInput
    _max?: JuegoXVentaMaxOrderByAggregateInput
    _min?: JuegoXVentaMinOrderByAggregateInput
    _sum?: JuegoXVentaSumOrderByAggregateInput
  }

  export type JuegoXVentaScalarWhereWithAggregatesInput = {
    AND?: JuegoXVentaScalarWhereWithAggregatesInput | JuegoXVentaScalarWhereWithAggregatesInput[]
    OR?: JuegoXVentaScalarWhereWithAggregatesInput[]
    NOT?: JuegoXVentaScalarWhereWithAggregatesInput | JuegoXVentaScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"JuegoXVenta"> | number
    juegoId?: IntWithAggregatesFilter<"JuegoXVenta"> | number
    ventaId?: IntWithAggregatesFilter<"JuegoXVenta"> | number
  }

  export type JuegoXUsuarioWhereInput = {
    AND?: JuegoXUsuarioWhereInput | JuegoXUsuarioWhereInput[]
    OR?: JuegoXUsuarioWhereInput[]
    NOT?: JuegoXUsuarioWhereInput | JuegoXUsuarioWhereInput[]
    id?: IntFilter<"JuegoXUsuario"> | number
    juegoId?: IntFilter<"JuegoXUsuario"> | number
    usuarioId?: IntFilter<"JuegoXUsuario"> | number
    juego?: XOR<JuegoScalarRelationFilter, JuegoWhereInput>
    usuario?: XOR<UsuarioScalarRelationFilter, UsuarioWhereInput>
  }

  export type JuegoXUsuarioOrderByWithRelationInput = {
    id?: SortOrder
    juegoId?: SortOrder
    usuarioId?: SortOrder
    juego?: JuegoOrderByWithRelationInput
    usuario?: UsuarioOrderByWithRelationInput
  }

  export type JuegoXUsuarioWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: JuegoXUsuarioWhereInput | JuegoXUsuarioWhereInput[]
    OR?: JuegoXUsuarioWhereInput[]
    NOT?: JuegoXUsuarioWhereInput | JuegoXUsuarioWhereInput[]
    juegoId?: IntFilter<"JuegoXUsuario"> | number
    usuarioId?: IntFilter<"JuegoXUsuario"> | number
    juego?: XOR<JuegoScalarRelationFilter, JuegoWhereInput>
    usuario?: XOR<UsuarioScalarRelationFilter, UsuarioWhereInput>
  }, "id">

  export type JuegoXUsuarioOrderByWithAggregationInput = {
    id?: SortOrder
    juegoId?: SortOrder
    usuarioId?: SortOrder
    _count?: JuegoXUsuarioCountOrderByAggregateInput
    _avg?: JuegoXUsuarioAvgOrderByAggregateInput
    _max?: JuegoXUsuarioMaxOrderByAggregateInput
    _min?: JuegoXUsuarioMinOrderByAggregateInput
    _sum?: JuegoXUsuarioSumOrderByAggregateInput
  }

  export type JuegoXUsuarioScalarWhereWithAggregatesInput = {
    AND?: JuegoXUsuarioScalarWhereWithAggregatesInput | JuegoXUsuarioScalarWhereWithAggregatesInput[]
    OR?: JuegoXUsuarioScalarWhereWithAggregatesInput[]
    NOT?: JuegoXUsuarioScalarWhereWithAggregatesInput | JuegoXUsuarioScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"JuegoXUsuario"> | number
    juegoId?: IntWithAggregatesFilter<"JuegoXUsuario"> | number
    usuarioId?: IntWithAggregatesFilter<"JuegoXUsuario"> | number
  }

  export type ClaveWhereInput = {
    AND?: ClaveWhereInput | ClaveWhereInput[]
    OR?: ClaveWhereInput[]
    NOT?: ClaveWhereInput | ClaveWhereInput[]
    id?: IntFilter<"Clave"> | number
    texto?: StringFilter<"Clave"> | string
    usada?: BoolFilter<"Clave"> | boolean
    juegoId?: IntFilter<"Clave"> | number
    ventaId?: IntFilter<"Clave"> | number
    juego?: XOR<JuegoScalarRelationFilter, JuegoWhereInput>
    venta?: XOR<VentaScalarRelationFilter, VentaWhereInput>
  }

  export type ClaveOrderByWithRelationInput = {
    id?: SortOrder
    texto?: SortOrder
    usada?: SortOrder
    juegoId?: SortOrder
    ventaId?: SortOrder
    juego?: JuegoOrderByWithRelationInput
    venta?: VentaOrderByWithRelationInput
  }

  export type ClaveWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    texto?: string
    AND?: ClaveWhereInput | ClaveWhereInput[]
    OR?: ClaveWhereInput[]
    NOT?: ClaveWhereInput | ClaveWhereInput[]
    usada?: BoolFilter<"Clave"> | boolean
    juegoId?: IntFilter<"Clave"> | number
    ventaId?: IntFilter<"Clave"> | number
    juego?: XOR<JuegoScalarRelationFilter, JuegoWhereInput>
    venta?: XOR<VentaScalarRelationFilter, VentaWhereInput>
  }, "id" | "texto">

  export type ClaveOrderByWithAggregationInput = {
    id?: SortOrder
    texto?: SortOrder
    usada?: SortOrder
    juegoId?: SortOrder
    ventaId?: SortOrder
    _count?: ClaveCountOrderByAggregateInput
    _avg?: ClaveAvgOrderByAggregateInput
    _max?: ClaveMaxOrderByAggregateInput
    _min?: ClaveMinOrderByAggregateInput
    _sum?: ClaveSumOrderByAggregateInput
  }

  export type ClaveScalarWhereWithAggregatesInput = {
    AND?: ClaveScalarWhereWithAggregatesInput | ClaveScalarWhereWithAggregatesInput[]
    OR?: ClaveScalarWhereWithAggregatesInput[]
    NOT?: ClaveScalarWhereWithAggregatesInput | ClaveScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Clave"> | number
    texto?: StringWithAggregatesFilter<"Clave"> | string
    usada?: BoolWithAggregatesFilter<"Clave"> | boolean
    juegoId?: IntWithAggregatesFilter<"Clave"> | number
    ventaId?: IntWithAggregatesFilter<"Clave"> | number
  }

  export type CategoriaXJuegoWhereInput = {
    AND?: CategoriaXJuegoWhereInput | CategoriaXJuegoWhereInput[]
    OR?: CategoriaXJuegoWhereInput[]
    NOT?: CategoriaXJuegoWhereInput | CategoriaXJuegoWhereInput[]
    id?: IntFilter<"CategoriaXJuego"> | number
    juegoId?: IntFilter<"CategoriaXJuego"> | number
    categoriaId?: IntFilter<"CategoriaXJuego"> | number
    juego?: XOR<JuegoScalarRelationFilter, JuegoWhereInput>
    categoria?: XOR<CategoriaScalarRelationFilter, CategoriaWhereInput>
  }

  export type CategoriaXJuegoOrderByWithRelationInput = {
    id?: SortOrder
    juegoId?: SortOrder
    categoriaId?: SortOrder
    juego?: JuegoOrderByWithRelationInput
    categoria?: CategoriaOrderByWithRelationInput
  }

  export type CategoriaXJuegoWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: CategoriaXJuegoWhereInput | CategoriaXJuegoWhereInput[]
    OR?: CategoriaXJuegoWhereInput[]
    NOT?: CategoriaXJuegoWhereInput | CategoriaXJuegoWhereInput[]
    juegoId?: IntFilter<"CategoriaXJuego"> | number
    categoriaId?: IntFilter<"CategoriaXJuego"> | number
    juego?: XOR<JuegoScalarRelationFilter, JuegoWhereInput>
    categoria?: XOR<CategoriaScalarRelationFilter, CategoriaWhereInput>
  }, "id">

  export type CategoriaXJuegoOrderByWithAggregationInput = {
    id?: SortOrder
    juegoId?: SortOrder
    categoriaId?: SortOrder
    _count?: CategoriaXJuegoCountOrderByAggregateInput
    _avg?: CategoriaXJuegoAvgOrderByAggregateInput
    _max?: CategoriaXJuegoMaxOrderByAggregateInput
    _min?: CategoriaXJuegoMinOrderByAggregateInput
    _sum?: CategoriaXJuegoSumOrderByAggregateInput
  }

  export type CategoriaXJuegoScalarWhereWithAggregatesInput = {
    AND?: CategoriaXJuegoScalarWhereWithAggregatesInput | CategoriaXJuegoScalarWhereWithAggregatesInput[]
    OR?: CategoriaXJuegoScalarWhereWithAggregatesInput[]
    NOT?: CategoriaXJuegoScalarWhereWithAggregatesInput | CategoriaXJuegoScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"CategoriaXJuego"> | number
    juegoId?: IntWithAggregatesFilter<"CategoriaXJuego"> | number
    categoriaId?: IntWithAggregatesFilter<"CategoriaXJuego"> | number
  }

  export type PlataformaXJuegoWhereInput = {
    AND?: PlataformaXJuegoWhereInput | PlataformaXJuegoWhereInput[]
    OR?: PlataformaXJuegoWhereInput[]
    NOT?: PlataformaXJuegoWhereInput | PlataformaXJuegoWhereInput[]
    id?: IntFilter<"PlataformaXJuego"> | number
    juegoId?: IntFilter<"PlataformaXJuego"> | number
    plataformaId?: IntFilter<"PlataformaXJuego"> | number
    juego?: XOR<JuegoScalarRelationFilter, JuegoWhereInput>
    plataforma?: XOR<PlataformaScalarRelationFilter, PlataformaWhereInput>
  }

  export type PlataformaXJuegoOrderByWithRelationInput = {
    id?: SortOrder
    juegoId?: SortOrder
    plataformaId?: SortOrder
    juego?: JuegoOrderByWithRelationInput
    plataforma?: PlataformaOrderByWithRelationInput
  }

  export type PlataformaXJuegoWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: PlataformaXJuegoWhereInput | PlataformaXJuegoWhereInput[]
    OR?: PlataformaXJuegoWhereInput[]
    NOT?: PlataformaXJuegoWhereInput | PlataformaXJuegoWhereInput[]
    juegoId?: IntFilter<"PlataformaXJuego"> | number
    plataformaId?: IntFilter<"PlataformaXJuego"> | number
    juego?: XOR<JuegoScalarRelationFilter, JuegoWhereInput>
    plataforma?: XOR<PlataformaScalarRelationFilter, PlataformaWhereInput>
  }, "id">

  export type PlataformaXJuegoOrderByWithAggregationInput = {
    id?: SortOrder
    juegoId?: SortOrder
    plataformaId?: SortOrder
    _count?: PlataformaXJuegoCountOrderByAggregateInput
    _avg?: PlataformaXJuegoAvgOrderByAggregateInput
    _max?: PlataformaXJuegoMaxOrderByAggregateInput
    _min?: PlataformaXJuegoMinOrderByAggregateInput
    _sum?: PlataformaXJuegoSumOrderByAggregateInput
  }

  export type PlataformaXJuegoScalarWhereWithAggregatesInput = {
    AND?: PlataformaXJuegoScalarWhereWithAggregatesInput | PlataformaXJuegoScalarWhereWithAggregatesInput[]
    OR?: PlataformaXJuegoScalarWhereWithAggregatesInput[]
    NOT?: PlataformaXJuegoScalarWhereWithAggregatesInput | PlataformaXJuegoScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"PlataformaXJuego"> | number
    juegoId?: IntWithAggregatesFilter<"PlataformaXJuego"> | number
    plataformaId?: IntWithAggregatesFilter<"PlataformaXJuego"> | number
  }

  export type CatNoticiaWhereInput = {
    AND?: CatNoticiaWhereInput | CatNoticiaWhereInput[]
    OR?: CatNoticiaWhereInput[]
    NOT?: CatNoticiaWhereInput | CatNoticiaWhereInput[]
    id?: IntFilter<"CatNoticia"> | number
    nombre?: StringFilter<"CatNoticia"> | string
    noticias?: CatNoticiaXNoticiaListRelationFilter
  }

  export type CatNoticiaOrderByWithRelationInput = {
    id?: SortOrder
    nombre?: SortOrder
    noticias?: CatNoticiaXNoticiaOrderByRelationAggregateInput
  }

  export type CatNoticiaWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    nombre?: string
    AND?: CatNoticiaWhereInput | CatNoticiaWhereInput[]
    OR?: CatNoticiaWhereInput[]
    NOT?: CatNoticiaWhereInput | CatNoticiaWhereInput[]
    noticias?: CatNoticiaXNoticiaListRelationFilter
  }, "id" | "nombre">

  export type CatNoticiaOrderByWithAggregationInput = {
    id?: SortOrder
    nombre?: SortOrder
    _count?: CatNoticiaCountOrderByAggregateInput
    _avg?: CatNoticiaAvgOrderByAggregateInput
    _max?: CatNoticiaMaxOrderByAggregateInput
    _min?: CatNoticiaMinOrderByAggregateInput
    _sum?: CatNoticiaSumOrderByAggregateInput
  }

  export type CatNoticiaScalarWhereWithAggregatesInput = {
    AND?: CatNoticiaScalarWhereWithAggregatesInput | CatNoticiaScalarWhereWithAggregatesInput[]
    OR?: CatNoticiaScalarWhereWithAggregatesInput[]
    NOT?: CatNoticiaScalarWhereWithAggregatesInput | CatNoticiaScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"CatNoticia"> | number
    nombre?: StringWithAggregatesFilter<"CatNoticia"> | string
  }

  export type CatNoticiaXNoticiaWhereInput = {
    AND?: CatNoticiaXNoticiaWhereInput | CatNoticiaXNoticiaWhereInput[]
    OR?: CatNoticiaXNoticiaWhereInput[]
    NOT?: CatNoticiaXNoticiaWhereInput | CatNoticiaXNoticiaWhereInput[]
    id?: IntFilter<"CatNoticiaXNoticia"> | number
    noticiaId?: IntFilter<"CatNoticiaXNoticia"> | number
    catNoticiaId?: IntFilter<"CatNoticiaXNoticia"> | number
    noticia?: XOR<NoticiaScalarRelationFilter, NoticiaWhereInput>
    catNoticia?: XOR<CatNoticiaScalarRelationFilter, CatNoticiaWhereInput>
  }

  export type CatNoticiaXNoticiaOrderByWithRelationInput = {
    id?: SortOrder
    noticiaId?: SortOrder
    catNoticiaId?: SortOrder
    noticia?: NoticiaOrderByWithRelationInput
    catNoticia?: CatNoticiaOrderByWithRelationInput
  }

  export type CatNoticiaXNoticiaWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: CatNoticiaXNoticiaWhereInput | CatNoticiaXNoticiaWhereInput[]
    OR?: CatNoticiaXNoticiaWhereInput[]
    NOT?: CatNoticiaXNoticiaWhereInput | CatNoticiaXNoticiaWhereInput[]
    noticiaId?: IntFilter<"CatNoticiaXNoticia"> | number
    catNoticiaId?: IntFilter<"CatNoticiaXNoticia"> | number
    noticia?: XOR<NoticiaScalarRelationFilter, NoticiaWhereInput>
    catNoticia?: XOR<CatNoticiaScalarRelationFilter, CatNoticiaWhereInput>
  }, "id">

  export type CatNoticiaXNoticiaOrderByWithAggregationInput = {
    id?: SortOrder
    noticiaId?: SortOrder
    catNoticiaId?: SortOrder
    _count?: CatNoticiaXNoticiaCountOrderByAggregateInput
    _avg?: CatNoticiaXNoticiaAvgOrderByAggregateInput
    _max?: CatNoticiaXNoticiaMaxOrderByAggregateInput
    _min?: CatNoticiaXNoticiaMinOrderByAggregateInput
    _sum?: CatNoticiaXNoticiaSumOrderByAggregateInput
  }

  export type CatNoticiaXNoticiaScalarWhereWithAggregatesInput = {
    AND?: CatNoticiaXNoticiaScalarWhereWithAggregatesInput | CatNoticiaXNoticiaScalarWhereWithAggregatesInput[]
    OR?: CatNoticiaXNoticiaScalarWhereWithAggregatesInput[]
    NOT?: CatNoticiaXNoticiaScalarWhereWithAggregatesInput | CatNoticiaXNoticiaScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"CatNoticiaXNoticia"> | number
    noticiaId?: IntWithAggregatesFilter<"CatNoticiaXNoticia"> | number
    catNoticiaId?: IntWithAggregatesFilter<"CatNoticiaXNoticia"> | number
  }

  export type ResenaWhereInput = {
    AND?: ResenaWhereInput | ResenaWhereInput[]
    OR?: ResenaWhereInput[]
    NOT?: ResenaWhereInput | ResenaWhereInput[]
    id?: IntFilter<"Resena"> | number
    usuarioId?: IntFilter<"Resena"> | number
    juegoId?: IntFilter<"Resena"> | number
    fechaCreacion?: DateTimeFilter<"Resena"> | Date | string
    texto?: StringFilter<"Resena"> | string
    puntuacion?: FloatFilter<"Resena"> | number
    usuario?: XOR<UsuarioScalarRelationFilter, UsuarioWhereInput>
    juego?: XOR<JuegoScalarRelationFilter, JuegoWhereInput>
  }

  export type ResenaOrderByWithRelationInput = {
    id?: SortOrder
    usuarioId?: SortOrder
    juegoId?: SortOrder
    fechaCreacion?: SortOrder
    texto?: SortOrder
    puntuacion?: SortOrder
    usuario?: UsuarioOrderByWithRelationInput
    juego?: JuegoOrderByWithRelationInput
  }

  export type ResenaWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ResenaWhereInput | ResenaWhereInput[]
    OR?: ResenaWhereInput[]
    NOT?: ResenaWhereInput | ResenaWhereInput[]
    usuarioId?: IntFilter<"Resena"> | number
    juegoId?: IntFilter<"Resena"> | number
    fechaCreacion?: DateTimeFilter<"Resena"> | Date | string
    texto?: StringFilter<"Resena"> | string
    puntuacion?: FloatFilter<"Resena"> | number
    usuario?: XOR<UsuarioScalarRelationFilter, UsuarioWhereInput>
    juego?: XOR<JuegoScalarRelationFilter, JuegoWhereInput>
  }, "id">

  export type ResenaOrderByWithAggregationInput = {
    id?: SortOrder
    usuarioId?: SortOrder
    juegoId?: SortOrder
    fechaCreacion?: SortOrder
    texto?: SortOrder
    puntuacion?: SortOrder
    _count?: ResenaCountOrderByAggregateInput
    _avg?: ResenaAvgOrderByAggregateInput
    _max?: ResenaMaxOrderByAggregateInput
    _min?: ResenaMinOrderByAggregateInput
    _sum?: ResenaSumOrderByAggregateInput
  }

  export type ResenaScalarWhereWithAggregatesInput = {
    AND?: ResenaScalarWhereWithAggregatesInput | ResenaScalarWhereWithAggregatesInput[]
    OR?: ResenaScalarWhereWithAggregatesInput[]
    NOT?: ResenaScalarWhereWithAggregatesInput | ResenaScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Resena"> | number
    usuarioId?: IntWithAggregatesFilter<"Resena"> | number
    juegoId?: IntWithAggregatesFilter<"Resena"> | number
    fechaCreacion?: DateTimeWithAggregatesFilter<"Resena"> | Date | string
    texto?: StringWithAggregatesFilter<"Resena"> | string
    puntuacion?: FloatWithAggregatesFilter<"Resena"> | number
  }

  export type CarritoWhereInput = {
    AND?: CarritoWhereInput | CarritoWhereInput[]
    OR?: CarritoWhereInput[]
    NOT?: CarritoWhereInput | CarritoWhereInput[]
    id?: IntFilter<"Carrito"> | number
    usuarioId?: IntFilter<"Carrito"> | number
    juegoId?: IntFilter<"Carrito"> | number
    usuario?: XOR<UsuarioScalarRelationFilter, UsuarioWhereInput>
    juego?: XOR<JuegoScalarRelationFilter, JuegoWhereInput>
  }

  export type CarritoOrderByWithRelationInput = {
    id?: SortOrder
    usuarioId?: SortOrder
    juegoId?: SortOrder
    usuario?: UsuarioOrderByWithRelationInput
    juego?: JuegoOrderByWithRelationInput
  }

  export type CarritoWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: CarritoWhereInput | CarritoWhereInput[]
    OR?: CarritoWhereInput[]
    NOT?: CarritoWhereInput | CarritoWhereInput[]
    usuarioId?: IntFilter<"Carrito"> | number
    juegoId?: IntFilter<"Carrito"> | number
    usuario?: XOR<UsuarioScalarRelationFilter, UsuarioWhereInput>
    juego?: XOR<JuegoScalarRelationFilter, JuegoWhereInput>
  }, "id">

  export type CarritoOrderByWithAggregationInput = {
    id?: SortOrder
    usuarioId?: SortOrder
    juegoId?: SortOrder
    _count?: CarritoCountOrderByAggregateInput
    _avg?: CarritoAvgOrderByAggregateInput
    _max?: CarritoMaxOrderByAggregateInput
    _min?: CarritoMinOrderByAggregateInput
    _sum?: CarritoSumOrderByAggregateInput
  }

  export type CarritoScalarWhereWithAggregatesInput = {
    AND?: CarritoScalarWhereWithAggregatesInput | CarritoScalarWhereWithAggregatesInput[]
    OR?: CarritoScalarWhereWithAggregatesInput[]
    NOT?: CarritoScalarWhereWithAggregatesInput | CarritoScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Carrito"> | number
    usuarioId?: IntWithAggregatesFilter<"Carrito"> | number
    juegoId?: IntWithAggregatesFilter<"Carrito"> | number
  }

  export type UsuarioCreateInput = {
    correo: string
    contrasena: string
    rol?: $Enums.Rol
    nombre: string
    apellido: string
    ventas?: VentaCreateNestedManyWithoutUsuarioInput
    juegos?: JuegoXUsuarioCreateNestedManyWithoutUsuarioInput
    resenas?: ResenaCreateNestedManyWithoutUsuarioInput
    carrito?: CarritoCreateNestedManyWithoutUsuarioInput
  }

  export type UsuarioUncheckedCreateInput = {
    id?: number
    correo: string
    contrasena: string
    rol?: $Enums.Rol
    nombre: string
    apellido: string
    ventas?: VentaUncheckedCreateNestedManyWithoutUsuarioInput
    juegos?: JuegoXUsuarioUncheckedCreateNestedManyWithoutUsuarioInput
    resenas?: ResenaUncheckedCreateNestedManyWithoutUsuarioInput
    carrito?: CarritoUncheckedCreateNestedManyWithoutUsuarioInput
  }

  export type UsuarioUpdateInput = {
    correo?: StringFieldUpdateOperationsInput | string
    contrasena?: StringFieldUpdateOperationsInput | string
    rol?: EnumRolFieldUpdateOperationsInput | $Enums.Rol
    nombre?: StringFieldUpdateOperationsInput | string
    apellido?: StringFieldUpdateOperationsInput | string
    ventas?: VentaUpdateManyWithoutUsuarioNestedInput
    juegos?: JuegoXUsuarioUpdateManyWithoutUsuarioNestedInput
    resenas?: ResenaUpdateManyWithoutUsuarioNestedInput
    carrito?: CarritoUpdateManyWithoutUsuarioNestedInput
  }

  export type UsuarioUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    correo?: StringFieldUpdateOperationsInput | string
    contrasena?: StringFieldUpdateOperationsInput | string
    rol?: EnumRolFieldUpdateOperationsInput | $Enums.Rol
    nombre?: StringFieldUpdateOperationsInput | string
    apellido?: StringFieldUpdateOperationsInput | string
    ventas?: VentaUncheckedUpdateManyWithoutUsuarioNestedInput
    juegos?: JuegoXUsuarioUncheckedUpdateManyWithoutUsuarioNestedInput
    resenas?: ResenaUncheckedUpdateManyWithoutUsuarioNestedInput
    carrito?: CarritoUncheckedUpdateManyWithoutUsuarioNestedInput
  }

  export type UsuarioCreateManyInput = {
    id?: number
    correo: string
    contrasena: string
    rol?: $Enums.Rol
    nombre: string
    apellido: string
  }

  export type UsuarioUpdateManyMutationInput = {
    correo?: StringFieldUpdateOperationsInput | string
    contrasena?: StringFieldUpdateOperationsInput | string
    rol?: EnumRolFieldUpdateOperationsInput | $Enums.Rol
    nombre?: StringFieldUpdateOperationsInput | string
    apellido?: StringFieldUpdateOperationsInput | string
  }

  export type UsuarioUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    correo?: StringFieldUpdateOperationsInput | string
    contrasena?: StringFieldUpdateOperationsInput | string
    rol?: EnumRolFieldUpdateOperationsInput | $Enums.Rol
    nombre?: StringFieldUpdateOperationsInput | string
    apellido?: StringFieldUpdateOperationsInput | string
  }

  export type JuegoCreateInput = {
    titulo: string
    descripcion: string
    precio: number
    porcentajeOferta?: number | null
    trailerUrl?: string | null
    rating?: number | null
    fechaLanzamiento: Date | string
    fechaSubida?: Date | string
    slug: string
    reviewJuego?: string | null
    fotos?: FotoCreateNestedManyWithoutJuegoInput
    categorias?: CategoriaXJuegoCreateNestedManyWithoutJuegoInput
    plataformas?: PlataformaXJuegoCreateNestedManyWithoutJuegoInput
    claves?: ClaveCreateNestedManyWithoutJuegoInput
    ventas?: JuegoXVentaCreateNestedManyWithoutJuegoInput
    usuarios?: JuegoXUsuarioCreateNestedManyWithoutJuegoInput
    resenas?: ResenaCreateNestedManyWithoutJuegoInput
    enCarritos?: CarritoCreateNestedManyWithoutJuegoInput
  }

  export type JuegoUncheckedCreateInput = {
    id?: number
    titulo: string
    descripcion: string
    precio: number
    porcentajeOferta?: number | null
    trailerUrl?: string | null
    rating?: number | null
    fechaLanzamiento: Date | string
    fechaSubida?: Date | string
    slug: string
    reviewJuego?: string | null
    fotos?: FotoUncheckedCreateNestedManyWithoutJuegoInput
    categorias?: CategoriaXJuegoUncheckedCreateNestedManyWithoutJuegoInput
    plataformas?: PlataformaXJuegoUncheckedCreateNestedManyWithoutJuegoInput
    claves?: ClaveUncheckedCreateNestedManyWithoutJuegoInput
    ventas?: JuegoXVentaUncheckedCreateNestedManyWithoutJuegoInput
    usuarios?: JuegoXUsuarioUncheckedCreateNestedManyWithoutJuegoInput
    resenas?: ResenaUncheckedCreateNestedManyWithoutJuegoInput
    enCarritos?: CarritoUncheckedCreateNestedManyWithoutJuegoInput
  }

  export type JuegoUpdateInput = {
    titulo?: StringFieldUpdateOperationsInput | string
    descripcion?: StringFieldUpdateOperationsInput | string
    precio?: FloatFieldUpdateOperationsInput | number
    porcentajeOferta?: NullableFloatFieldUpdateOperationsInput | number | null
    trailerUrl?: NullableStringFieldUpdateOperationsInput | string | null
    rating?: NullableFloatFieldUpdateOperationsInput | number | null
    fechaLanzamiento?: DateTimeFieldUpdateOperationsInput | Date | string
    fechaSubida?: DateTimeFieldUpdateOperationsInput | Date | string
    slug?: StringFieldUpdateOperationsInput | string
    reviewJuego?: NullableStringFieldUpdateOperationsInput | string | null
    fotos?: FotoUpdateManyWithoutJuegoNestedInput
    categorias?: CategoriaXJuegoUpdateManyWithoutJuegoNestedInput
    plataformas?: PlataformaXJuegoUpdateManyWithoutJuegoNestedInput
    claves?: ClaveUpdateManyWithoutJuegoNestedInput
    ventas?: JuegoXVentaUpdateManyWithoutJuegoNestedInput
    usuarios?: JuegoXUsuarioUpdateManyWithoutJuegoNestedInput
    resenas?: ResenaUpdateManyWithoutJuegoNestedInput
    enCarritos?: CarritoUpdateManyWithoutJuegoNestedInput
  }

  export type JuegoUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    titulo?: StringFieldUpdateOperationsInput | string
    descripcion?: StringFieldUpdateOperationsInput | string
    precio?: FloatFieldUpdateOperationsInput | number
    porcentajeOferta?: NullableFloatFieldUpdateOperationsInput | number | null
    trailerUrl?: NullableStringFieldUpdateOperationsInput | string | null
    rating?: NullableFloatFieldUpdateOperationsInput | number | null
    fechaLanzamiento?: DateTimeFieldUpdateOperationsInput | Date | string
    fechaSubida?: DateTimeFieldUpdateOperationsInput | Date | string
    slug?: StringFieldUpdateOperationsInput | string
    reviewJuego?: NullableStringFieldUpdateOperationsInput | string | null
    fotos?: FotoUncheckedUpdateManyWithoutJuegoNestedInput
    categorias?: CategoriaXJuegoUncheckedUpdateManyWithoutJuegoNestedInput
    plataformas?: PlataformaXJuegoUncheckedUpdateManyWithoutJuegoNestedInput
    claves?: ClaveUncheckedUpdateManyWithoutJuegoNestedInput
    ventas?: JuegoXVentaUncheckedUpdateManyWithoutJuegoNestedInput
    usuarios?: JuegoXUsuarioUncheckedUpdateManyWithoutJuegoNestedInput
    resenas?: ResenaUncheckedUpdateManyWithoutJuegoNestedInput
    enCarritos?: CarritoUncheckedUpdateManyWithoutJuegoNestedInput
  }

  export type JuegoCreateManyInput = {
    id?: number
    titulo: string
    descripcion: string
    precio: number
    porcentajeOferta?: number | null
    trailerUrl?: string | null
    rating?: number | null
    fechaLanzamiento: Date | string
    fechaSubida?: Date | string
    slug: string
    reviewJuego?: string | null
  }

  export type JuegoUpdateManyMutationInput = {
    titulo?: StringFieldUpdateOperationsInput | string
    descripcion?: StringFieldUpdateOperationsInput | string
    precio?: FloatFieldUpdateOperationsInput | number
    porcentajeOferta?: NullableFloatFieldUpdateOperationsInput | number | null
    trailerUrl?: NullableStringFieldUpdateOperationsInput | string | null
    rating?: NullableFloatFieldUpdateOperationsInput | number | null
    fechaLanzamiento?: DateTimeFieldUpdateOperationsInput | Date | string
    fechaSubida?: DateTimeFieldUpdateOperationsInput | Date | string
    slug?: StringFieldUpdateOperationsInput | string
    reviewJuego?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type JuegoUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    titulo?: StringFieldUpdateOperationsInput | string
    descripcion?: StringFieldUpdateOperationsInput | string
    precio?: FloatFieldUpdateOperationsInput | number
    porcentajeOferta?: NullableFloatFieldUpdateOperationsInput | number | null
    trailerUrl?: NullableStringFieldUpdateOperationsInput | string | null
    rating?: NullableFloatFieldUpdateOperationsInput | number | null
    fechaLanzamiento?: DateTimeFieldUpdateOperationsInput | Date | string
    fechaSubida?: DateTimeFieldUpdateOperationsInput | Date | string
    slug?: StringFieldUpdateOperationsInput | string
    reviewJuego?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type NoticiaCreateInput = {
    titulo: string
    slug: string
    tiempoLectura: number
    fechaPub: Date | string
    texto: string
    resumen: string
    foto: FotoCreateNestedOneWithoutNoticiaInput
    categorias?: CatNoticiaXNoticiaCreateNestedManyWithoutNoticiaInput
  }

  export type NoticiaUncheckedCreateInput = {
    id?: number
    titulo: string
    slug: string
    tiempoLectura: number
    fechaPub: Date | string
    texto: string
    resumen: string
    fotoId: number
    categorias?: CatNoticiaXNoticiaUncheckedCreateNestedManyWithoutNoticiaInput
  }

  export type NoticiaUpdateInput = {
    titulo?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    tiempoLectura?: IntFieldUpdateOperationsInput | number
    fechaPub?: DateTimeFieldUpdateOperationsInput | Date | string
    texto?: StringFieldUpdateOperationsInput | string
    resumen?: StringFieldUpdateOperationsInput | string
    foto?: FotoUpdateOneRequiredWithoutNoticiaNestedInput
    categorias?: CatNoticiaXNoticiaUpdateManyWithoutNoticiaNestedInput
  }

  export type NoticiaUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    titulo?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    tiempoLectura?: IntFieldUpdateOperationsInput | number
    fechaPub?: DateTimeFieldUpdateOperationsInput | Date | string
    texto?: StringFieldUpdateOperationsInput | string
    resumen?: StringFieldUpdateOperationsInput | string
    fotoId?: IntFieldUpdateOperationsInput | number
    categorias?: CatNoticiaXNoticiaUncheckedUpdateManyWithoutNoticiaNestedInput
  }

  export type NoticiaCreateManyInput = {
    id?: number
    titulo: string
    slug: string
    tiempoLectura: number
    fechaPub: Date | string
    texto: string
    resumen: string
    fotoId: number
  }

  export type NoticiaUpdateManyMutationInput = {
    titulo?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    tiempoLectura?: IntFieldUpdateOperationsInput | number
    fechaPub?: DateTimeFieldUpdateOperationsInput | Date | string
    texto?: StringFieldUpdateOperationsInput | string
    resumen?: StringFieldUpdateOperationsInput | string
  }

  export type NoticiaUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    titulo?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    tiempoLectura?: IntFieldUpdateOperationsInput | number
    fechaPub?: DateTimeFieldUpdateOperationsInput | Date | string
    texto?: StringFieldUpdateOperationsInput | string
    resumen?: StringFieldUpdateOperationsInput | string
    fotoId?: IntFieldUpdateOperationsInput | number
  }

  export type FotoCreateInput = {
    url: string
    juego?: JuegoCreateNestedOneWithoutFotosInput
    noticia?: NoticiaCreateNestedOneWithoutFotoInput
  }

  export type FotoUncheckedCreateInput = {
    id?: number
    url: string
    juegoId?: number | null
    noticia?: NoticiaUncheckedCreateNestedOneWithoutFotoInput
  }

  export type FotoUpdateInput = {
    url?: StringFieldUpdateOperationsInput | string
    juego?: JuegoUpdateOneWithoutFotosNestedInput
    noticia?: NoticiaUpdateOneWithoutFotoNestedInput
  }

  export type FotoUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    url?: StringFieldUpdateOperationsInput | string
    juegoId?: NullableIntFieldUpdateOperationsInput | number | null
    noticia?: NoticiaUncheckedUpdateOneWithoutFotoNestedInput
  }

  export type FotoCreateManyInput = {
    id?: number
    url: string
    juegoId?: number | null
  }

  export type FotoUpdateManyMutationInput = {
    url?: StringFieldUpdateOperationsInput | string
  }

  export type FotoUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    url?: StringFieldUpdateOperationsInput | string
    juegoId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type CategoriaCreateInput = {
    nombre: string
    juegos?: CategoriaXJuegoCreateNestedManyWithoutCategoriaInput
  }

  export type CategoriaUncheckedCreateInput = {
    id?: number
    nombre: string
    juegos?: CategoriaXJuegoUncheckedCreateNestedManyWithoutCategoriaInput
  }

  export type CategoriaUpdateInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    juegos?: CategoriaXJuegoUpdateManyWithoutCategoriaNestedInput
  }

  export type CategoriaUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    juegos?: CategoriaXJuegoUncheckedUpdateManyWithoutCategoriaNestedInput
  }

  export type CategoriaCreateManyInput = {
    id?: number
    nombre: string
  }

  export type CategoriaUpdateManyMutationInput = {
    nombre?: StringFieldUpdateOperationsInput | string
  }

  export type CategoriaUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
  }

  export type PlataformaCreateInput = {
    nombre: string
    color: string
    juegos?: PlataformaXJuegoCreateNestedManyWithoutPlataformaInput
  }

  export type PlataformaUncheckedCreateInput = {
    id?: number
    nombre: string
    color: string
    juegos?: PlataformaXJuegoUncheckedCreateNestedManyWithoutPlataformaInput
  }

  export type PlataformaUpdateInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    color?: StringFieldUpdateOperationsInput | string
    juegos?: PlataformaXJuegoUpdateManyWithoutPlataformaNestedInput
  }

  export type PlataformaUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    color?: StringFieldUpdateOperationsInput | string
    juegos?: PlataformaXJuegoUncheckedUpdateManyWithoutPlataformaNestedInput
  }

  export type PlataformaCreateManyInput = {
    id?: number
    nombre: string
    color: string
  }

  export type PlataformaUpdateManyMutationInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    color?: StringFieldUpdateOperationsInput | string
  }

  export type PlataformaUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    color?: StringFieldUpdateOperationsInput | string
  }

  export type VentaCreateInput = {
    total: number
    fechaVenta?: Date | string
    usuario: UsuarioCreateNestedOneWithoutVentasInput
    juegos?: JuegoXVentaCreateNestedManyWithoutVentaInput
    claves?: ClaveCreateNestedManyWithoutVentaInput
  }

  export type VentaUncheckedCreateInput = {
    id?: number
    total: number
    fechaVenta?: Date | string
    usuarioId: number
    juegos?: JuegoXVentaUncheckedCreateNestedManyWithoutVentaInput
    claves?: ClaveUncheckedCreateNestedManyWithoutVentaInput
  }

  export type VentaUpdateInput = {
    total?: FloatFieldUpdateOperationsInput | number
    fechaVenta?: DateTimeFieldUpdateOperationsInput | Date | string
    usuario?: UsuarioUpdateOneRequiredWithoutVentasNestedInput
    juegos?: JuegoXVentaUpdateManyWithoutVentaNestedInput
    claves?: ClaveUpdateManyWithoutVentaNestedInput
  }

  export type VentaUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    total?: FloatFieldUpdateOperationsInput | number
    fechaVenta?: DateTimeFieldUpdateOperationsInput | Date | string
    usuarioId?: IntFieldUpdateOperationsInput | number
    juegos?: JuegoXVentaUncheckedUpdateManyWithoutVentaNestedInput
    claves?: ClaveUncheckedUpdateManyWithoutVentaNestedInput
  }

  export type VentaCreateManyInput = {
    id?: number
    total: number
    fechaVenta?: Date | string
    usuarioId: number
  }

  export type VentaUpdateManyMutationInput = {
    total?: FloatFieldUpdateOperationsInput | number
    fechaVenta?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VentaUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    total?: FloatFieldUpdateOperationsInput | number
    fechaVenta?: DateTimeFieldUpdateOperationsInput | Date | string
    usuarioId?: IntFieldUpdateOperationsInput | number
  }

  export type JuegoXVentaCreateInput = {
    juego: JuegoCreateNestedOneWithoutVentasInput
    venta: VentaCreateNestedOneWithoutJuegosInput
  }

  export type JuegoXVentaUncheckedCreateInput = {
    id?: number
    juegoId: number
    ventaId: number
  }

  export type JuegoXVentaUpdateInput = {
    juego?: JuegoUpdateOneRequiredWithoutVentasNestedInput
    venta?: VentaUpdateOneRequiredWithoutJuegosNestedInput
  }

  export type JuegoXVentaUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    juegoId?: IntFieldUpdateOperationsInput | number
    ventaId?: IntFieldUpdateOperationsInput | number
  }

  export type JuegoXVentaCreateManyInput = {
    id?: number
    juegoId: number
    ventaId: number
  }

  export type JuegoXVentaUpdateManyMutationInput = {

  }

  export type JuegoXVentaUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    juegoId?: IntFieldUpdateOperationsInput | number
    ventaId?: IntFieldUpdateOperationsInput | number
  }

  export type JuegoXUsuarioCreateInput = {
    juego: JuegoCreateNestedOneWithoutUsuariosInput
    usuario: UsuarioCreateNestedOneWithoutJuegosInput
  }

  export type JuegoXUsuarioUncheckedCreateInput = {
    id?: number
    juegoId: number
    usuarioId: number
  }

  export type JuegoXUsuarioUpdateInput = {
    juego?: JuegoUpdateOneRequiredWithoutUsuariosNestedInput
    usuario?: UsuarioUpdateOneRequiredWithoutJuegosNestedInput
  }

  export type JuegoXUsuarioUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    juegoId?: IntFieldUpdateOperationsInput | number
    usuarioId?: IntFieldUpdateOperationsInput | number
  }

  export type JuegoXUsuarioCreateManyInput = {
    id?: number
    juegoId: number
    usuarioId: number
  }

  export type JuegoXUsuarioUpdateManyMutationInput = {

  }

  export type JuegoXUsuarioUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    juegoId?: IntFieldUpdateOperationsInput | number
    usuarioId?: IntFieldUpdateOperationsInput | number
  }

  export type ClaveCreateInput = {
    texto: string
    usada?: boolean
    juego: JuegoCreateNestedOneWithoutClavesInput
    venta: VentaCreateNestedOneWithoutClavesInput
  }

  export type ClaveUncheckedCreateInput = {
    id?: number
    texto: string
    usada?: boolean
    juegoId: number
    ventaId: number
  }

  export type ClaveUpdateInput = {
    texto?: StringFieldUpdateOperationsInput | string
    usada?: BoolFieldUpdateOperationsInput | boolean
    juego?: JuegoUpdateOneRequiredWithoutClavesNestedInput
    venta?: VentaUpdateOneRequiredWithoutClavesNestedInput
  }

  export type ClaveUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    texto?: StringFieldUpdateOperationsInput | string
    usada?: BoolFieldUpdateOperationsInput | boolean
    juegoId?: IntFieldUpdateOperationsInput | number
    ventaId?: IntFieldUpdateOperationsInput | number
  }

  export type ClaveCreateManyInput = {
    id?: number
    texto: string
    usada?: boolean
    juegoId: number
    ventaId: number
  }

  export type ClaveUpdateManyMutationInput = {
    texto?: StringFieldUpdateOperationsInput | string
    usada?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ClaveUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    texto?: StringFieldUpdateOperationsInput | string
    usada?: BoolFieldUpdateOperationsInput | boolean
    juegoId?: IntFieldUpdateOperationsInput | number
    ventaId?: IntFieldUpdateOperationsInput | number
  }

  export type CategoriaXJuegoCreateInput = {
    juego: JuegoCreateNestedOneWithoutCategoriasInput
    categoria: CategoriaCreateNestedOneWithoutJuegosInput
  }

  export type CategoriaXJuegoUncheckedCreateInput = {
    id?: number
    juegoId: number
    categoriaId: number
  }

  export type CategoriaXJuegoUpdateInput = {
    juego?: JuegoUpdateOneRequiredWithoutCategoriasNestedInput
    categoria?: CategoriaUpdateOneRequiredWithoutJuegosNestedInput
  }

  export type CategoriaXJuegoUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    juegoId?: IntFieldUpdateOperationsInput | number
    categoriaId?: IntFieldUpdateOperationsInput | number
  }

  export type CategoriaXJuegoCreateManyInput = {
    id?: number
    juegoId: number
    categoriaId: number
  }

  export type CategoriaXJuegoUpdateManyMutationInput = {

  }

  export type CategoriaXJuegoUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    juegoId?: IntFieldUpdateOperationsInput | number
    categoriaId?: IntFieldUpdateOperationsInput | number
  }

  export type PlataformaXJuegoCreateInput = {
    juego: JuegoCreateNestedOneWithoutPlataformasInput
    plataforma: PlataformaCreateNestedOneWithoutJuegosInput
  }

  export type PlataformaXJuegoUncheckedCreateInput = {
    id?: number
    juegoId: number
    plataformaId: number
  }

  export type PlataformaXJuegoUpdateInput = {
    juego?: JuegoUpdateOneRequiredWithoutPlataformasNestedInput
    plataforma?: PlataformaUpdateOneRequiredWithoutJuegosNestedInput
  }

  export type PlataformaXJuegoUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    juegoId?: IntFieldUpdateOperationsInput | number
    plataformaId?: IntFieldUpdateOperationsInput | number
  }

  export type PlataformaXJuegoCreateManyInput = {
    id?: number
    juegoId: number
    plataformaId: number
  }

  export type PlataformaXJuegoUpdateManyMutationInput = {

  }

  export type PlataformaXJuegoUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    juegoId?: IntFieldUpdateOperationsInput | number
    plataformaId?: IntFieldUpdateOperationsInput | number
  }

  export type CatNoticiaCreateInput = {
    nombre: string
    noticias?: CatNoticiaXNoticiaCreateNestedManyWithoutCatNoticiaInput
  }

  export type CatNoticiaUncheckedCreateInput = {
    id?: number
    nombre: string
    noticias?: CatNoticiaXNoticiaUncheckedCreateNestedManyWithoutCatNoticiaInput
  }

  export type CatNoticiaUpdateInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    noticias?: CatNoticiaXNoticiaUpdateManyWithoutCatNoticiaNestedInput
  }

  export type CatNoticiaUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    noticias?: CatNoticiaXNoticiaUncheckedUpdateManyWithoutCatNoticiaNestedInput
  }

  export type CatNoticiaCreateManyInput = {
    id?: number
    nombre: string
  }

  export type CatNoticiaUpdateManyMutationInput = {
    nombre?: StringFieldUpdateOperationsInput | string
  }

  export type CatNoticiaUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
  }

  export type CatNoticiaXNoticiaCreateInput = {
    noticia: NoticiaCreateNestedOneWithoutCategoriasInput
    catNoticia: CatNoticiaCreateNestedOneWithoutNoticiasInput
  }

  export type CatNoticiaXNoticiaUncheckedCreateInput = {
    id?: number
    noticiaId: number
    catNoticiaId: number
  }

  export type CatNoticiaXNoticiaUpdateInput = {
    noticia?: NoticiaUpdateOneRequiredWithoutCategoriasNestedInput
    catNoticia?: CatNoticiaUpdateOneRequiredWithoutNoticiasNestedInput
  }

  export type CatNoticiaXNoticiaUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    noticiaId?: IntFieldUpdateOperationsInput | number
    catNoticiaId?: IntFieldUpdateOperationsInput | number
  }

  export type CatNoticiaXNoticiaCreateManyInput = {
    id?: number
    noticiaId: number
    catNoticiaId: number
  }

  export type CatNoticiaXNoticiaUpdateManyMutationInput = {

  }

  export type CatNoticiaXNoticiaUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    noticiaId?: IntFieldUpdateOperationsInput | number
    catNoticiaId?: IntFieldUpdateOperationsInput | number
  }

  export type ResenaCreateInput = {
    fechaCreacion?: Date | string
    texto: string
    puntuacion: number
    usuario: UsuarioCreateNestedOneWithoutResenasInput
    juego: JuegoCreateNestedOneWithoutResenasInput
  }

  export type ResenaUncheckedCreateInput = {
    id?: number
    usuarioId: number
    juegoId: number
    fechaCreacion?: Date | string
    texto: string
    puntuacion: number
  }

  export type ResenaUpdateInput = {
    fechaCreacion?: DateTimeFieldUpdateOperationsInput | Date | string
    texto?: StringFieldUpdateOperationsInput | string
    puntuacion?: FloatFieldUpdateOperationsInput | number
    usuario?: UsuarioUpdateOneRequiredWithoutResenasNestedInput
    juego?: JuegoUpdateOneRequiredWithoutResenasNestedInput
  }

  export type ResenaUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    usuarioId?: IntFieldUpdateOperationsInput | number
    juegoId?: IntFieldUpdateOperationsInput | number
    fechaCreacion?: DateTimeFieldUpdateOperationsInput | Date | string
    texto?: StringFieldUpdateOperationsInput | string
    puntuacion?: FloatFieldUpdateOperationsInput | number
  }

  export type ResenaCreateManyInput = {
    id?: number
    usuarioId: number
    juegoId: number
    fechaCreacion?: Date | string
    texto: string
    puntuacion: number
  }

  export type ResenaUpdateManyMutationInput = {
    fechaCreacion?: DateTimeFieldUpdateOperationsInput | Date | string
    texto?: StringFieldUpdateOperationsInput | string
    puntuacion?: FloatFieldUpdateOperationsInput | number
  }

  export type ResenaUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    usuarioId?: IntFieldUpdateOperationsInput | number
    juegoId?: IntFieldUpdateOperationsInput | number
    fechaCreacion?: DateTimeFieldUpdateOperationsInput | Date | string
    texto?: StringFieldUpdateOperationsInput | string
    puntuacion?: FloatFieldUpdateOperationsInput | number
  }

  export type CarritoCreateInput = {
    usuario: UsuarioCreateNestedOneWithoutCarritoInput
    juego: JuegoCreateNestedOneWithoutEnCarritosInput
  }

  export type CarritoUncheckedCreateInput = {
    id?: number
    usuarioId: number
    juegoId: number
  }

  export type CarritoUpdateInput = {
    usuario?: UsuarioUpdateOneRequiredWithoutCarritoNestedInput
    juego?: JuegoUpdateOneRequiredWithoutEnCarritosNestedInput
  }

  export type CarritoUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    usuarioId?: IntFieldUpdateOperationsInput | number
    juegoId?: IntFieldUpdateOperationsInput | number
  }

  export type CarritoCreateManyInput = {
    id?: number
    usuarioId: number
    juegoId: number
  }

  export type CarritoUpdateManyMutationInput = {

  }

  export type CarritoUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    usuarioId?: IntFieldUpdateOperationsInput | number
    juegoId?: IntFieldUpdateOperationsInput | number
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type EnumRolFilter<$PrismaModel = never> = {
    equals?: $Enums.Rol | EnumRolFieldRefInput<$PrismaModel>
    in?: $Enums.Rol[] | ListEnumRolFieldRefInput<$PrismaModel>
    notIn?: $Enums.Rol[] | ListEnumRolFieldRefInput<$PrismaModel>
    not?: NestedEnumRolFilter<$PrismaModel> | $Enums.Rol
  }

  export type VentaListRelationFilter = {
    every?: VentaWhereInput
    some?: VentaWhereInput
    none?: VentaWhereInput
  }

  export type JuegoXUsuarioListRelationFilter = {
    every?: JuegoXUsuarioWhereInput
    some?: JuegoXUsuarioWhereInput
    none?: JuegoXUsuarioWhereInput
  }

  export type ResenaListRelationFilter = {
    every?: ResenaWhereInput
    some?: ResenaWhereInput
    none?: ResenaWhereInput
  }

  export type CarritoListRelationFilter = {
    every?: CarritoWhereInput
    some?: CarritoWhereInput
    none?: CarritoWhereInput
  }

  export type VentaOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type JuegoXUsuarioOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ResenaOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CarritoOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UsuarioCountOrderByAggregateInput = {
    id?: SortOrder
    correo?: SortOrder
    contrasena?: SortOrder
    rol?: SortOrder
    nombre?: SortOrder
    apellido?: SortOrder
  }

  export type UsuarioAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UsuarioMaxOrderByAggregateInput = {
    id?: SortOrder
    correo?: SortOrder
    contrasena?: SortOrder
    rol?: SortOrder
    nombre?: SortOrder
    apellido?: SortOrder
  }

  export type UsuarioMinOrderByAggregateInput = {
    id?: SortOrder
    correo?: SortOrder
    contrasena?: SortOrder
    rol?: SortOrder
    nombre?: SortOrder
    apellido?: SortOrder
  }

  export type UsuarioSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type EnumRolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Rol | EnumRolFieldRefInput<$PrismaModel>
    in?: $Enums.Rol[] | ListEnumRolFieldRefInput<$PrismaModel>
    notIn?: $Enums.Rol[] | ListEnumRolFieldRefInput<$PrismaModel>
    not?: NestedEnumRolWithAggregatesFilter<$PrismaModel> | $Enums.Rol
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRolFilter<$PrismaModel>
    _max?: NestedEnumRolFilter<$PrismaModel>
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type FloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type FotoListRelationFilter = {
    every?: FotoWhereInput
    some?: FotoWhereInput
    none?: FotoWhereInput
  }

  export type CategoriaXJuegoListRelationFilter = {
    every?: CategoriaXJuegoWhereInput
    some?: CategoriaXJuegoWhereInput
    none?: CategoriaXJuegoWhereInput
  }

  export type PlataformaXJuegoListRelationFilter = {
    every?: PlataformaXJuegoWhereInput
    some?: PlataformaXJuegoWhereInput
    none?: PlataformaXJuegoWhereInput
  }

  export type ClaveListRelationFilter = {
    every?: ClaveWhereInput
    some?: ClaveWhereInput
    none?: ClaveWhereInput
  }

  export type JuegoXVentaListRelationFilter = {
    every?: JuegoXVentaWhereInput
    some?: JuegoXVentaWhereInput
    none?: JuegoXVentaWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type FotoOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CategoriaXJuegoOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PlataformaXJuegoOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ClaveOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type JuegoXVentaOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type JuegoCountOrderByAggregateInput = {
    id?: SortOrder
    titulo?: SortOrder
    descripcion?: SortOrder
    precio?: SortOrder
    porcentajeOferta?: SortOrder
    trailerUrl?: SortOrder
    rating?: SortOrder
    fechaLanzamiento?: SortOrder
    fechaSubida?: SortOrder
    slug?: SortOrder
    reviewJuego?: SortOrder
  }

  export type JuegoAvgOrderByAggregateInput = {
    id?: SortOrder
    precio?: SortOrder
    porcentajeOferta?: SortOrder
    rating?: SortOrder
  }

  export type JuegoMaxOrderByAggregateInput = {
    id?: SortOrder
    titulo?: SortOrder
    descripcion?: SortOrder
    precio?: SortOrder
    porcentajeOferta?: SortOrder
    trailerUrl?: SortOrder
    rating?: SortOrder
    fechaLanzamiento?: SortOrder
    fechaSubida?: SortOrder
    slug?: SortOrder
    reviewJuego?: SortOrder
  }

  export type JuegoMinOrderByAggregateInput = {
    id?: SortOrder
    titulo?: SortOrder
    descripcion?: SortOrder
    precio?: SortOrder
    porcentajeOferta?: SortOrder
    trailerUrl?: SortOrder
    rating?: SortOrder
    fechaLanzamiento?: SortOrder
    fechaSubida?: SortOrder
    slug?: SortOrder
    reviewJuego?: SortOrder
  }

  export type JuegoSumOrderByAggregateInput = {
    id?: SortOrder
    precio?: SortOrder
    porcentajeOferta?: SortOrder
    rating?: SortOrder
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type FloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type FotoScalarRelationFilter = {
    is?: FotoWhereInput
    isNot?: FotoWhereInput
  }

  export type CatNoticiaXNoticiaListRelationFilter = {
    every?: CatNoticiaXNoticiaWhereInput
    some?: CatNoticiaXNoticiaWhereInput
    none?: CatNoticiaXNoticiaWhereInput
  }

  export type CatNoticiaXNoticiaOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type NoticiaCountOrderByAggregateInput = {
    id?: SortOrder
    titulo?: SortOrder
    slug?: SortOrder
    tiempoLectura?: SortOrder
    fechaPub?: SortOrder
    texto?: SortOrder
    resumen?: SortOrder
    fotoId?: SortOrder
  }

  export type NoticiaAvgOrderByAggregateInput = {
    id?: SortOrder
    tiempoLectura?: SortOrder
    fotoId?: SortOrder
  }

  export type NoticiaMaxOrderByAggregateInput = {
    id?: SortOrder
    titulo?: SortOrder
    slug?: SortOrder
    tiempoLectura?: SortOrder
    fechaPub?: SortOrder
    texto?: SortOrder
    resumen?: SortOrder
    fotoId?: SortOrder
  }

  export type NoticiaMinOrderByAggregateInput = {
    id?: SortOrder
    titulo?: SortOrder
    slug?: SortOrder
    tiempoLectura?: SortOrder
    fechaPub?: SortOrder
    texto?: SortOrder
    resumen?: SortOrder
    fotoId?: SortOrder
  }

  export type NoticiaSumOrderByAggregateInput = {
    id?: SortOrder
    tiempoLectura?: SortOrder
    fotoId?: SortOrder
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type JuegoNullableScalarRelationFilter = {
    is?: JuegoWhereInput | null
    isNot?: JuegoWhereInput | null
  }

  export type NoticiaNullableScalarRelationFilter = {
    is?: NoticiaWhereInput | null
    isNot?: NoticiaWhereInput | null
  }

  export type FotoCountOrderByAggregateInput = {
    id?: SortOrder
    url?: SortOrder
    juegoId?: SortOrder
  }

  export type FotoAvgOrderByAggregateInput = {
    id?: SortOrder
    juegoId?: SortOrder
  }

  export type FotoMaxOrderByAggregateInput = {
    id?: SortOrder
    url?: SortOrder
    juegoId?: SortOrder
  }

  export type FotoMinOrderByAggregateInput = {
    id?: SortOrder
    url?: SortOrder
    juegoId?: SortOrder
  }

  export type FotoSumOrderByAggregateInput = {
    id?: SortOrder
    juegoId?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type CategoriaCountOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
  }

  export type CategoriaAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type CategoriaMaxOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
  }

  export type CategoriaMinOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
  }

  export type CategoriaSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type PlataformaCountOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    color?: SortOrder
  }

  export type PlataformaAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type PlataformaMaxOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    color?: SortOrder
  }

  export type PlataformaMinOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    color?: SortOrder
  }

  export type PlataformaSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UsuarioScalarRelationFilter = {
    is?: UsuarioWhereInput
    isNot?: UsuarioWhereInput
  }

  export type VentaCountOrderByAggregateInput = {
    id?: SortOrder
    total?: SortOrder
    fechaVenta?: SortOrder
    usuarioId?: SortOrder
  }

  export type VentaAvgOrderByAggregateInput = {
    id?: SortOrder
    total?: SortOrder
    usuarioId?: SortOrder
  }

  export type VentaMaxOrderByAggregateInput = {
    id?: SortOrder
    total?: SortOrder
    fechaVenta?: SortOrder
    usuarioId?: SortOrder
  }

  export type VentaMinOrderByAggregateInput = {
    id?: SortOrder
    total?: SortOrder
    fechaVenta?: SortOrder
    usuarioId?: SortOrder
  }

  export type VentaSumOrderByAggregateInput = {
    id?: SortOrder
    total?: SortOrder
    usuarioId?: SortOrder
  }

  export type JuegoScalarRelationFilter = {
    is?: JuegoWhereInput
    isNot?: JuegoWhereInput
  }

  export type VentaScalarRelationFilter = {
    is?: VentaWhereInput
    isNot?: VentaWhereInput
  }

  export type JuegoXVentaCountOrderByAggregateInput = {
    id?: SortOrder
    juegoId?: SortOrder
    ventaId?: SortOrder
  }

  export type JuegoXVentaAvgOrderByAggregateInput = {
    id?: SortOrder
    juegoId?: SortOrder
    ventaId?: SortOrder
  }

  export type JuegoXVentaMaxOrderByAggregateInput = {
    id?: SortOrder
    juegoId?: SortOrder
    ventaId?: SortOrder
  }

  export type JuegoXVentaMinOrderByAggregateInput = {
    id?: SortOrder
    juegoId?: SortOrder
    ventaId?: SortOrder
  }

  export type JuegoXVentaSumOrderByAggregateInput = {
    id?: SortOrder
    juegoId?: SortOrder
    ventaId?: SortOrder
  }

  export type JuegoXUsuarioCountOrderByAggregateInput = {
    id?: SortOrder
    juegoId?: SortOrder
    usuarioId?: SortOrder
  }

  export type JuegoXUsuarioAvgOrderByAggregateInput = {
    id?: SortOrder
    juegoId?: SortOrder
    usuarioId?: SortOrder
  }

  export type JuegoXUsuarioMaxOrderByAggregateInput = {
    id?: SortOrder
    juegoId?: SortOrder
    usuarioId?: SortOrder
  }

  export type JuegoXUsuarioMinOrderByAggregateInput = {
    id?: SortOrder
    juegoId?: SortOrder
    usuarioId?: SortOrder
  }

  export type JuegoXUsuarioSumOrderByAggregateInput = {
    id?: SortOrder
    juegoId?: SortOrder
    usuarioId?: SortOrder
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type ClaveCountOrderByAggregateInput = {
    id?: SortOrder
    texto?: SortOrder
    usada?: SortOrder
    juegoId?: SortOrder
    ventaId?: SortOrder
  }

  export type ClaveAvgOrderByAggregateInput = {
    id?: SortOrder
    juegoId?: SortOrder
    ventaId?: SortOrder
  }

  export type ClaveMaxOrderByAggregateInput = {
    id?: SortOrder
    texto?: SortOrder
    usada?: SortOrder
    juegoId?: SortOrder
    ventaId?: SortOrder
  }

  export type ClaveMinOrderByAggregateInput = {
    id?: SortOrder
    texto?: SortOrder
    usada?: SortOrder
    juegoId?: SortOrder
    ventaId?: SortOrder
  }

  export type ClaveSumOrderByAggregateInput = {
    id?: SortOrder
    juegoId?: SortOrder
    ventaId?: SortOrder
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type CategoriaScalarRelationFilter = {
    is?: CategoriaWhereInput
    isNot?: CategoriaWhereInput
  }

  export type CategoriaXJuegoCountOrderByAggregateInput = {
    id?: SortOrder
    juegoId?: SortOrder
    categoriaId?: SortOrder
  }

  export type CategoriaXJuegoAvgOrderByAggregateInput = {
    id?: SortOrder
    juegoId?: SortOrder
    categoriaId?: SortOrder
  }

  export type CategoriaXJuegoMaxOrderByAggregateInput = {
    id?: SortOrder
    juegoId?: SortOrder
    categoriaId?: SortOrder
  }

  export type CategoriaXJuegoMinOrderByAggregateInput = {
    id?: SortOrder
    juegoId?: SortOrder
    categoriaId?: SortOrder
  }

  export type CategoriaXJuegoSumOrderByAggregateInput = {
    id?: SortOrder
    juegoId?: SortOrder
    categoriaId?: SortOrder
  }

  export type PlataformaScalarRelationFilter = {
    is?: PlataformaWhereInput
    isNot?: PlataformaWhereInput
  }

  export type PlataformaXJuegoCountOrderByAggregateInput = {
    id?: SortOrder
    juegoId?: SortOrder
    plataformaId?: SortOrder
  }

  export type PlataformaXJuegoAvgOrderByAggregateInput = {
    id?: SortOrder
    juegoId?: SortOrder
    plataformaId?: SortOrder
  }

  export type PlataformaXJuegoMaxOrderByAggregateInput = {
    id?: SortOrder
    juegoId?: SortOrder
    plataformaId?: SortOrder
  }

  export type PlataformaXJuegoMinOrderByAggregateInput = {
    id?: SortOrder
    juegoId?: SortOrder
    plataformaId?: SortOrder
  }

  export type PlataformaXJuegoSumOrderByAggregateInput = {
    id?: SortOrder
    juegoId?: SortOrder
    plataformaId?: SortOrder
  }

  export type CatNoticiaCountOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
  }

  export type CatNoticiaAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type CatNoticiaMaxOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
  }

  export type CatNoticiaMinOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
  }

  export type CatNoticiaSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type NoticiaScalarRelationFilter = {
    is?: NoticiaWhereInput
    isNot?: NoticiaWhereInput
  }

  export type CatNoticiaScalarRelationFilter = {
    is?: CatNoticiaWhereInput
    isNot?: CatNoticiaWhereInput
  }

  export type CatNoticiaXNoticiaCountOrderByAggregateInput = {
    id?: SortOrder
    noticiaId?: SortOrder
    catNoticiaId?: SortOrder
  }

  export type CatNoticiaXNoticiaAvgOrderByAggregateInput = {
    id?: SortOrder
    noticiaId?: SortOrder
    catNoticiaId?: SortOrder
  }

  export type CatNoticiaXNoticiaMaxOrderByAggregateInput = {
    id?: SortOrder
    noticiaId?: SortOrder
    catNoticiaId?: SortOrder
  }

  export type CatNoticiaXNoticiaMinOrderByAggregateInput = {
    id?: SortOrder
    noticiaId?: SortOrder
    catNoticiaId?: SortOrder
  }

  export type CatNoticiaXNoticiaSumOrderByAggregateInput = {
    id?: SortOrder
    noticiaId?: SortOrder
    catNoticiaId?: SortOrder
  }

  export type ResenaCountOrderByAggregateInput = {
    id?: SortOrder
    usuarioId?: SortOrder
    juegoId?: SortOrder
    fechaCreacion?: SortOrder
    texto?: SortOrder
    puntuacion?: SortOrder
  }

  export type ResenaAvgOrderByAggregateInput = {
    id?: SortOrder
    usuarioId?: SortOrder
    juegoId?: SortOrder
    puntuacion?: SortOrder
  }

  export type ResenaMaxOrderByAggregateInput = {
    id?: SortOrder
    usuarioId?: SortOrder
    juegoId?: SortOrder
    fechaCreacion?: SortOrder
    texto?: SortOrder
    puntuacion?: SortOrder
  }

  export type ResenaMinOrderByAggregateInput = {
    id?: SortOrder
    usuarioId?: SortOrder
    juegoId?: SortOrder
    fechaCreacion?: SortOrder
    texto?: SortOrder
    puntuacion?: SortOrder
  }

  export type ResenaSumOrderByAggregateInput = {
    id?: SortOrder
    usuarioId?: SortOrder
    juegoId?: SortOrder
    puntuacion?: SortOrder
  }

  export type CarritoCountOrderByAggregateInput = {
    id?: SortOrder
    usuarioId?: SortOrder
    juegoId?: SortOrder
  }

  export type CarritoAvgOrderByAggregateInput = {
    id?: SortOrder
    usuarioId?: SortOrder
    juegoId?: SortOrder
  }

  export type CarritoMaxOrderByAggregateInput = {
    id?: SortOrder
    usuarioId?: SortOrder
    juegoId?: SortOrder
  }

  export type CarritoMinOrderByAggregateInput = {
    id?: SortOrder
    usuarioId?: SortOrder
    juegoId?: SortOrder
  }

  export type CarritoSumOrderByAggregateInput = {
    id?: SortOrder
    usuarioId?: SortOrder
    juegoId?: SortOrder
  }

  export type VentaCreateNestedManyWithoutUsuarioInput = {
    create?: XOR<VentaCreateWithoutUsuarioInput, VentaUncheckedCreateWithoutUsuarioInput> | VentaCreateWithoutUsuarioInput[] | VentaUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: VentaCreateOrConnectWithoutUsuarioInput | VentaCreateOrConnectWithoutUsuarioInput[]
    createMany?: VentaCreateManyUsuarioInputEnvelope
    connect?: VentaWhereUniqueInput | VentaWhereUniqueInput[]
  }

  export type JuegoXUsuarioCreateNestedManyWithoutUsuarioInput = {
    create?: XOR<JuegoXUsuarioCreateWithoutUsuarioInput, JuegoXUsuarioUncheckedCreateWithoutUsuarioInput> | JuegoXUsuarioCreateWithoutUsuarioInput[] | JuegoXUsuarioUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: JuegoXUsuarioCreateOrConnectWithoutUsuarioInput | JuegoXUsuarioCreateOrConnectWithoutUsuarioInput[]
    createMany?: JuegoXUsuarioCreateManyUsuarioInputEnvelope
    connect?: JuegoXUsuarioWhereUniqueInput | JuegoXUsuarioWhereUniqueInput[]
  }

  export type ResenaCreateNestedManyWithoutUsuarioInput = {
    create?: XOR<ResenaCreateWithoutUsuarioInput, ResenaUncheckedCreateWithoutUsuarioInput> | ResenaCreateWithoutUsuarioInput[] | ResenaUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: ResenaCreateOrConnectWithoutUsuarioInput | ResenaCreateOrConnectWithoutUsuarioInput[]
    createMany?: ResenaCreateManyUsuarioInputEnvelope
    connect?: ResenaWhereUniqueInput | ResenaWhereUniqueInput[]
  }

  export type CarritoCreateNestedManyWithoutUsuarioInput = {
    create?: XOR<CarritoCreateWithoutUsuarioInput, CarritoUncheckedCreateWithoutUsuarioInput> | CarritoCreateWithoutUsuarioInput[] | CarritoUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: CarritoCreateOrConnectWithoutUsuarioInput | CarritoCreateOrConnectWithoutUsuarioInput[]
    createMany?: CarritoCreateManyUsuarioInputEnvelope
    connect?: CarritoWhereUniqueInput | CarritoWhereUniqueInput[]
  }

  export type VentaUncheckedCreateNestedManyWithoutUsuarioInput = {
    create?: XOR<VentaCreateWithoutUsuarioInput, VentaUncheckedCreateWithoutUsuarioInput> | VentaCreateWithoutUsuarioInput[] | VentaUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: VentaCreateOrConnectWithoutUsuarioInput | VentaCreateOrConnectWithoutUsuarioInput[]
    createMany?: VentaCreateManyUsuarioInputEnvelope
    connect?: VentaWhereUniqueInput | VentaWhereUniqueInput[]
  }

  export type JuegoXUsuarioUncheckedCreateNestedManyWithoutUsuarioInput = {
    create?: XOR<JuegoXUsuarioCreateWithoutUsuarioInput, JuegoXUsuarioUncheckedCreateWithoutUsuarioInput> | JuegoXUsuarioCreateWithoutUsuarioInput[] | JuegoXUsuarioUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: JuegoXUsuarioCreateOrConnectWithoutUsuarioInput | JuegoXUsuarioCreateOrConnectWithoutUsuarioInput[]
    createMany?: JuegoXUsuarioCreateManyUsuarioInputEnvelope
    connect?: JuegoXUsuarioWhereUniqueInput | JuegoXUsuarioWhereUniqueInput[]
  }

  export type ResenaUncheckedCreateNestedManyWithoutUsuarioInput = {
    create?: XOR<ResenaCreateWithoutUsuarioInput, ResenaUncheckedCreateWithoutUsuarioInput> | ResenaCreateWithoutUsuarioInput[] | ResenaUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: ResenaCreateOrConnectWithoutUsuarioInput | ResenaCreateOrConnectWithoutUsuarioInput[]
    createMany?: ResenaCreateManyUsuarioInputEnvelope
    connect?: ResenaWhereUniqueInput | ResenaWhereUniqueInput[]
  }

  export type CarritoUncheckedCreateNestedManyWithoutUsuarioInput = {
    create?: XOR<CarritoCreateWithoutUsuarioInput, CarritoUncheckedCreateWithoutUsuarioInput> | CarritoCreateWithoutUsuarioInput[] | CarritoUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: CarritoCreateOrConnectWithoutUsuarioInput | CarritoCreateOrConnectWithoutUsuarioInput[]
    createMany?: CarritoCreateManyUsuarioInputEnvelope
    connect?: CarritoWhereUniqueInput | CarritoWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type EnumRolFieldUpdateOperationsInput = {
    set?: $Enums.Rol
  }

  export type VentaUpdateManyWithoutUsuarioNestedInput = {
    create?: XOR<VentaCreateWithoutUsuarioInput, VentaUncheckedCreateWithoutUsuarioInput> | VentaCreateWithoutUsuarioInput[] | VentaUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: VentaCreateOrConnectWithoutUsuarioInput | VentaCreateOrConnectWithoutUsuarioInput[]
    upsert?: VentaUpsertWithWhereUniqueWithoutUsuarioInput | VentaUpsertWithWhereUniqueWithoutUsuarioInput[]
    createMany?: VentaCreateManyUsuarioInputEnvelope
    set?: VentaWhereUniqueInput | VentaWhereUniqueInput[]
    disconnect?: VentaWhereUniqueInput | VentaWhereUniqueInput[]
    delete?: VentaWhereUniqueInput | VentaWhereUniqueInput[]
    connect?: VentaWhereUniqueInput | VentaWhereUniqueInput[]
    update?: VentaUpdateWithWhereUniqueWithoutUsuarioInput | VentaUpdateWithWhereUniqueWithoutUsuarioInput[]
    updateMany?: VentaUpdateManyWithWhereWithoutUsuarioInput | VentaUpdateManyWithWhereWithoutUsuarioInput[]
    deleteMany?: VentaScalarWhereInput | VentaScalarWhereInput[]
  }

  export type JuegoXUsuarioUpdateManyWithoutUsuarioNestedInput = {
    create?: XOR<JuegoXUsuarioCreateWithoutUsuarioInput, JuegoXUsuarioUncheckedCreateWithoutUsuarioInput> | JuegoXUsuarioCreateWithoutUsuarioInput[] | JuegoXUsuarioUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: JuegoXUsuarioCreateOrConnectWithoutUsuarioInput | JuegoXUsuarioCreateOrConnectWithoutUsuarioInput[]
    upsert?: JuegoXUsuarioUpsertWithWhereUniqueWithoutUsuarioInput | JuegoXUsuarioUpsertWithWhereUniqueWithoutUsuarioInput[]
    createMany?: JuegoXUsuarioCreateManyUsuarioInputEnvelope
    set?: JuegoXUsuarioWhereUniqueInput | JuegoXUsuarioWhereUniqueInput[]
    disconnect?: JuegoXUsuarioWhereUniqueInput | JuegoXUsuarioWhereUniqueInput[]
    delete?: JuegoXUsuarioWhereUniqueInput | JuegoXUsuarioWhereUniqueInput[]
    connect?: JuegoXUsuarioWhereUniqueInput | JuegoXUsuarioWhereUniqueInput[]
    update?: JuegoXUsuarioUpdateWithWhereUniqueWithoutUsuarioInput | JuegoXUsuarioUpdateWithWhereUniqueWithoutUsuarioInput[]
    updateMany?: JuegoXUsuarioUpdateManyWithWhereWithoutUsuarioInput | JuegoXUsuarioUpdateManyWithWhereWithoutUsuarioInput[]
    deleteMany?: JuegoXUsuarioScalarWhereInput | JuegoXUsuarioScalarWhereInput[]
  }

  export type ResenaUpdateManyWithoutUsuarioNestedInput = {
    create?: XOR<ResenaCreateWithoutUsuarioInput, ResenaUncheckedCreateWithoutUsuarioInput> | ResenaCreateWithoutUsuarioInput[] | ResenaUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: ResenaCreateOrConnectWithoutUsuarioInput | ResenaCreateOrConnectWithoutUsuarioInput[]
    upsert?: ResenaUpsertWithWhereUniqueWithoutUsuarioInput | ResenaUpsertWithWhereUniqueWithoutUsuarioInput[]
    createMany?: ResenaCreateManyUsuarioInputEnvelope
    set?: ResenaWhereUniqueInput | ResenaWhereUniqueInput[]
    disconnect?: ResenaWhereUniqueInput | ResenaWhereUniqueInput[]
    delete?: ResenaWhereUniqueInput | ResenaWhereUniqueInput[]
    connect?: ResenaWhereUniqueInput | ResenaWhereUniqueInput[]
    update?: ResenaUpdateWithWhereUniqueWithoutUsuarioInput | ResenaUpdateWithWhereUniqueWithoutUsuarioInput[]
    updateMany?: ResenaUpdateManyWithWhereWithoutUsuarioInput | ResenaUpdateManyWithWhereWithoutUsuarioInput[]
    deleteMany?: ResenaScalarWhereInput | ResenaScalarWhereInput[]
  }

  export type CarritoUpdateManyWithoutUsuarioNestedInput = {
    create?: XOR<CarritoCreateWithoutUsuarioInput, CarritoUncheckedCreateWithoutUsuarioInput> | CarritoCreateWithoutUsuarioInput[] | CarritoUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: CarritoCreateOrConnectWithoutUsuarioInput | CarritoCreateOrConnectWithoutUsuarioInput[]
    upsert?: CarritoUpsertWithWhereUniqueWithoutUsuarioInput | CarritoUpsertWithWhereUniqueWithoutUsuarioInput[]
    createMany?: CarritoCreateManyUsuarioInputEnvelope
    set?: CarritoWhereUniqueInput | CarritoWhereUniqueInput[]
    disconnect?: CarritoWhereUniqueInput | CarritoWhereUniqueInput[]
    delete?: CarritoWhereUniqueInput | CarritoWhereUniqueInput[]
    connect?: CarritoWhereUniqueInput | CarritoWhereUniqueInput[]
    update?: CarritoUpdateWithWhereUniqueWithoutUsuarioInput | CarritoUpdateWithWhereUniqueWithoutUsuarioInput[]
    updateMany?: CarritoUpdateManyWithWhereWithoutUsuarioInput | CarritoUpdateManyWithWhereWithoutUsuarioInput[]
    deleteMany?: CarritoScalarWhereInput | CarritoScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type VentaUncheckedUpdateManyWithoutUsuarioNestedInput = {
    create?: XOR<VentaCreateWithoutUsuarioInput, VentaUncheckedCreateWithoutUsuarioInput> | VentaCreateWithoutUsuarioInput[] | VentaUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: VentaCreateOrConnectWithoutUsuarioInput | VentaCreateOrConnectWithoutUsuarioInput[]
    upsert?: VentaUpsertWithWhereUniqueWithoutUsuarioInput | VentaUpsertWithWhereUniqueWithoutUsuarioInput[]
    createMany?: VentaCreateManyUsuarioInputEnvelope
    set?: VentaWhereUniqueInput | VentaWhereUniqueInput[]
    disconnect?: VentaWhereUniqueInput | VentaWhereUniqueInput[]
    delete?: VentaWhereUniqueInput | VentaWhereUniqueInput[]
    connect?: VentaWhereUniqueInput | VentaWhereUniqueInput[]
    update?: VentaUpdateWithWhereUniqueWithoutUsuarioInput | VentaUpdateWithWhereUniqueWithoutUsuarioInput[]
    updateMany?: VentaUpdateManyWithWhereWithoutUsuarioInput | VentaUpdateManyWithWhereWithoutUsuarioInput[]
    deleteMany?: VentaScalarWhereInput | VentaScalarWhereInput[]
  }

  export type JuegoXUsuarioUncheckedUpdateManyWithoutUsuarioNestedInput = {
    create?: XOR<JuegoXUsuarioCreateWithoutUsuarioInput, JuegoXUsuarioUncheckedCreateWithoutUsuarioInput> | JuegoXUsuarioCreateWithoutUsuarioInput[] | JuegoXUsuarioUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: JuegoXUsuarioCreateOrConnectWithoutUsuarioInput | JuegoXUsuarioCreateOrConnectWithoutUsuarioInput[]
    upsert?: JuegoXUsuarioUpsertWithWhereUniqueWithoutUsuarioInput | JuegoXUsuarioUpsertWithWhereUniqueWithoutUsuarioInput[]
    createMany?: JuegoXUsuarioCreateManyUsuarioInputEnvelope
    set?: JuegoXUsuarioWhereUniqueInput | JuegoXUsuarioWhereUniqueInput[]
    disconnect?: JuegoXUsuarioWhereUniqueInput | JuegoXUsuarioWhereUniqueInput[]
    delete?: JuegoXUsuarioWhereUniqueInput | JuegoXUsuarioWhereUniqueInput[]
    connect?: JuegoXUsuarioWhereUniqueInput | JuegoXUsuarioWhereUniqueInput[]
    update?: JuegoXUsuarioUpdateWithWhereUniqueWithoutUsuarioInput | JuegoXUsuarioUpdateWithWhereUniqueWithoutUsuarioInput[]
    updateMany?: JuegoXUsuarioUpdateManyWithWhereWithoutUsuarioInput | JuegoXUsuarioUpdateManyWithWhereWithoutUsuarioInput[]
    deleteMany?: JuegoXUsuarioScalarWhereInput | JuegoXUsuarioScalarWhereInput[]
  }

  export type ResenaUncheckedUpdateManyWithoutUsuarioNestedInput = {
    create?: XOR<ResenaCreateWithoutUsuarioInput, ResenaUncheckedCreateWithoutUsuarioInput> | ResenaCreateWithoutUsuarioInput[] | ResenaUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: ResenaCreateOrConnectWithoutUsuarioInput | ResenaCreateOrConnectWithoutUsuarioInput[]
    upsert?: ResenaUpsertWithWhereUniqueWithoutUsuarioInput | ResenaUpsertWithWhereUniqueWithoutUsuarioInput[]
    createMany?: ResenaCreateManyUsuarioInputEnvelope
    set?: ResenaWhereUniqueInput | ResenaWhereUniqueInput[]
    disconnect?: ResenaWhereUniqueInput | ResenaWhereUniqueInput[]
    delete?: ResenaWhereUniqueInput | ResenaWhereUniqueInput[]
    connect?: ResenaWhereUniqueInput | ResenaWhereUniqueInput[]
    update?: ResenaUpdateWithWhereUniqueWithoutUsuarioInput | ResenaUpdateWithWhereUniqueWithoutUsuarioInput[]
    updateMany?: ResenaUpdateManyWithWhereWithoutUsuarioInput | ResenaUpdateManyWithWhereWithoutUsuarioInput[]
    deleteMany?: ResenaScalarWhereInput | ResenaScalarWhereInput[]
  }

  export type CarritoUncheckedUpdateManyWithoutUsuarioNestedInput = {
    create?: XOR<CarritoCreateWithoutUsuarioInput, CarritoUncheckedCreateWithoutUsuarioInput> | CarritoCreateWithoutUsuarioInput[] | CarritoUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: CarritoCreateOrConnectWithoutUsuarioInput | CarritoCreateOrConnectWithoutUsuarioInput[]
    upsert?: CarritoUpsertWithWhereUniqueWithoutUsuarioInput | CarritoUpsertWithWhereUniqueWithoutUsuarioInput[]
    createMany?: CarritoCreateManyUsuarioInputEnvelope
    set?: CarritoWhereUniqueInput | CarritoWhereUniqueInput[]
    disconnect?: CarritoWhereUniqueInput | CarritoWhereUniqueInput[]
    delete?: CarritoWhereUniqueInput | CarritoWhereUniqueInput[]
    connect?: CarritoWhereUniqueInput | CarritoWhereUniqueInput[]
    update?: CarritoUpdateWithWhereUniqueWithoutUsuarioInput | CarritoUpdateWithWhereUniqueWithoutUsuarioInput[]
    updateMany?: CarritoUpdateManyWithWhereWithoutUsuarioInput | CarritoUpdateManyWithWhereWithoutUsuarioInput[]
    deleteMany?: CarritoScalarWhereInput | CarritoScalarWhereInput[]
  }

  export type FotoCreateNestedManyWithoutJuegoInput = {
    create?: XOR<FotoCreateWithoutJuegoInput, FotoUncheckedCreateWithoutJuegoInput> | FotoCreateWithoutJuegoInput[] | FotoUncheckedCreateWithoutJuegoInput[]
    connectOrCreate?: FotoCreateOrConnectWithoutJuegoInput | FotoCreateOrConnectWithoutJuegoInput[]
    createMany?: FotoCreateManyJuegoInputEnvelope
    connect?: FotoWhereUniqueInput | FotoWhereUniqueInput[]
  }

  export type CategoriaXJuegoCreateNestedManyWithoutJuegoInput = {
    create?: XOR<CategoriaXJuegoCreateWithoutJuegoInput, CategoriaXJuegoUncheckedCreateWithoutJuegoInput> | CategoriaXJuegoCreateWithoutJuegoInput[] | CategoriaXJuegoUncheckedCreateWithoutJuegoInput[]
    connectOrCreate?: CategoriaXJuegoCreateOrConnectWithoutJuegoInput | CategoriaXJuegoCreateOrConnectWithoutJuegoInput[]
    createMany?: CategoriaXJuegoCreateManyJuegoInputEnvelope
    connect?: CategoriaXJuegoWhereUniqueInput | CategoriaXJuegoWhereUniqueInput[]
  }

  export type PlataformaXJuegoCreateNestedManyWithoutJuegoInput = {
    create?: XOR<PlataformaXJuegoCreateWithoutJuegoInput, PlataformaXJuegoUncheckedCreateWithoutJuegoInput> | PlataformaXJuegoCreateWithoutJuegoInput[] | PlataformaXJuegoUncheckedCreateWithoutJuegoInput[]
    connectOrCreate?: PlataformaXJuegoCreateOrConnectWithoutJuegoInput | PlataformaXJuegoCreateOrConnectWithoutJuegoInput[]
    createMany?: PlataformaXJuegoCreateManyJuegoInputEnvelope
    connect?: PlataformaXJuegoWhereUniqueInput | PlataformaXJuegoWhereUniqueInput[]
  }

  export type ClaveCreateNestedManyWithoutJuegoInput = {
    create?: XOR<ClaveCreateWithoutJuegoInput, ClaveUncheckedCreateWithoutJuegoInput> | ClaveCreateWithoutJuegoInput[] | ClaveUncheckedCreateWithoutJuegoInput[]
    connectOrCreate?: ClaveCreateOrConnectWithoutJuegoInput | ClaveCreateOrConnectWithoutJuegoInput[]
    createMany?: ClaveCreateManyJuegoInputEnvelope
    connect?: ClaveWhereUniqueInput | ClaveWhereUniqueInput[]
  }

  export type JuegoXVentaCreateNestedManyWithoutJuegoInput = {
    create?: XOR<JuegoXVentaCreateWithoutJuegoInput, JuegoXVentaUncheckedCreateWithoutJuegoInput> | JuegoXVentaCreateWithoutJuegoInput[] | JuegoXVentaUncheckedCreateWithoutJuegoInput[]
    connectOrCreate?: JuegoXVentaCreateOrConnectWithoutJuegoInput | JuegoXVentaCreateOrConnectWithoutJuegoInput[]
    createMany?: JuegoXVentaCreateManyJuegoInputEnvelope
    connect?: JuegoXVentaWhereUniqueInput | JuegoXVentaWhereUniqueInput[]
  }

  export type JuegoXUsuarioCreateNestedManyWithoutJuegoInput = {
    create?: XOR<JuegoXUsuarioCreateWithoutJuegoInput, JuegoXUsuarioUncheckedCreateWithoutJuegoInput> | JuegoXUsuarioCreateWithoutJuegoInput[] | JuegoXUsuarioUncheckedCreateWithoutJuegoInput[]
    connectOrCreate?: JuegoXUsuarioCreateOrConnectWithoutJuegoInput | JuegoXUsuarioCreateOrConnectWithoutJuegoInput[]
    createMany?: JuegoXUsuarioCreateManyJuegoInputEnvelope
    connect?: JuegoXUsuarioWhereUniqueInput | JuegoXUsuarioWhereUniqueInput[]
  }

  export type ResenaCreateNestedManyWithoutJuegoInput = {
    create?: XOR<ResenaCreateWithoutJuegoInput, ResenaUncheckedCreateWithoutJuegoInput> | ResenaCreateWithoutJuegoInput[] | ResenaUncheckedCreateWithoutJuegoInput[]
    connectOrCreate?: ResenaCreateOrConnectWithoutJuegoInput | ResenaCreateOrConnectWithoutJuegoInput[]
    createMany?: ResenaCreateManyJuegoInputEnvelope
    connect?: ResenaWhereUniqueInput | ResenaWhereUniqueInput[]
  }

  export type CarritoCreateNestedManyWithoutJuegoInput = {
    create?: XOR<CarritoCreateWithoutJuegoInput, CarritoUncheckedCreateWithoutJuegoInput> | CarritoCreateWithoutJuegoInput[] | CarritoUncheckedCreateWithoutJuegoInput[]
    connectOrCreate?: CarritoCreateOrConnectWithoutJuegoInput | CarritoCreateOrConnectWithoutJuegoInput[]
    createMany?: CarritoCreateManyJuegoInputEnvelope
    connect?: CarritoWhereUniqueInput | CarritoWhereUniqueInput[]
  }

  export type FotoUncheckedCreateNestedManyWithoutJuegoInput = {
    create?: XOR<FotoCreateWithoutJuegoInput, FotoUncheckedCreateWithoutJuegoInput> | FotoCreateWithoutJuegoInput[] | FotoUncheckedCreateWithoutJuegoInput[]
    connectOrCreate?: FotoCreateOrConnectWithoutJuegoInput | FotoCreateOrConnectWithoutJuegoInput[]
    createMany?: FotoCreateManyJuegoInputEnvelope
    connect?: FotoWhereUniqueInput | FotoWhereUniqueInput[]
  }

  export type CategoriaXJuegoUncheckedCreateNestedManyWithoutJuegoInput = {
    create?: XOR<CategoriaXJuegoCreateWithoutJuegoInput, CategoriaXJuegoUncheckedCreateWithoutJuegoInput> | CategoriaXJuegoCreateWithoutJuegoInput[] | CategoriaXJuegoUncheckedCreateWithoutJuegoInput[]
    connectOrCreate?: CategoriaXJuegoCreateOrConnectWithoutJuegoInput | CategoriaXJuegoCreateOrConnectWithoutJuegoInput[]
    createMany?: CategoriaXJuegoCreateManyJuegoInputEnvelope
    connect?: CategoriaXJuegoWhereUniqueInput | CategoriaXJuegoWhereUniqueInput[]
  }

  export type PlataformaXJuegoUncheckedCreateNestedManyWithoutJuegoInput = {
    create?: XOR<PlataformaXJuegoCreateWithoutJuegoInput, PlataformaXJuegoUncheckedCreateWithoutJuegoInput> | PlataformaXJuegoCreateWithoutJuegoInput[] | PlataformaXJuegoUncheckedCreateWithoutJuegoInput[]
    connectOrCreate?: PlataformaXJuegoCreateOrConnectWithoutJuegoInput | PlataformaXJuegoCreateOrConnectWithoutJuegoInput[]
    createMany?: PlataformaXJuegoCreateManyJuegoInputEnvelope
    connect?: PlataformaXJuegoWhereUniqueInput | PlataformaXJuegoWhereUniqueInput[]
  }

  export type ClaveUncheckedCreateNestedManyWithoutJuegoInput = {
    create?: XOR<ClaveCreateWithoutJuegoInput, ClaveUncheckedCreateWithoutJuegoInput> | ClaveCreateWithoutJuegoInput[] | ClaveUncheckedCreateWithoutJuegoInput[]
    connectOrCreate?: ClaveCreateOrConnectWithoutJuegoInput | ClaveCreateOrConnectWithoutJuegoInput[]
    createMany?: ClaveCreateManyJuegoInputEnvelope
    connect?: ClaveWhereUniqueInput | ClaveWhereUniqueInput[]
  }

  export type JuegoXVentaUncheckedCreateNestedManyWithoutJuegoInput = {
    create?: XOR<JuegoXVentaCreateWithoutJuegoInput, JuegoXVentaUncheckedCreateWithoutJuegoInput> | JuegoXVentaCreateWithoutJuegoInput[] | JuegoXVentaUncheckedCreateWithoutJuegoInput[]
    connectOrCreate?: JuegoXVentaCreateOrConnectWithoutJuegoInput | JuegoXVentaCreateOrConnectWithoutJuegoInput[]
    createMany?: JuegoXVentaCreateManyJuegoInputEnvelope
    connect?: JuegoXVentaWhereUniqueInput | JuegoXVentaWhereUniqueInput[]
  }

  export type JuegoXUsuarioUncheckedCreateNestedManyWithoutJuegoInput = {
    create?: XOR<JuegoXUsuarioCreateWithoutJuegoInput, JuegoXUsuarioUncheckedCreateWithoutJuegoInput> | JuegoXUsuarioCreateWithoutJuegoInput[] | JuegoXUsuarioUncheckedCreateWithoutJuegoInput[]
    connectOrCreate?: JuegoXUsuarioCreateOrConnectWithoutJuegoInput | JuegoXUsuarioCreateOrConnectWithoutJuegoInput[]
    createMany?: JuegoXUsuarioCreateManyJuegoInputEnvelope
    connect?: JuegoXUsuarioWhereUniqueInput | JuegoXUsuarioWhereUniqueInput[]
  }

  export type ResenaUncheckedCreateNestedManyWithoutJuegoInput = {
    create?: XOR<ResenaCreateWithoutJuegoInput, ResenaUncheckedCreateWithoutJuegoInput> | ResenaCreateWithoutJuegoInput[] | ResenaUncheckedCreateWithoutJuegoInput[]
    connectOrCreate?: ResenaCreateOrConnectWithoutJuegoInput | ResenaCreateOrConnectWithoutJuegoInput[]
    createMany?: ResenaCreateManyJuegoInputEnvelope
    connect?: ResenaWhereUniqueInput | ResenaWhereUniqueInput[]
  }

  export type CarritoUncheckedCreateNestedManyWithoutJuegoInput = {
    create?: XOR<CarritoCreateWithoutJuegoInput, CarritoUncheckedCreateWithoutJuegoInput> | CarritoCreateWithoutJuegoInput[] | CarritoUncheckedCreateWithoutJuegoInput[]
    connectOrCreate?: CarritoCreateOrConnectWithoutJuegoInput | CarritoCreateOrConnectWithoutJuegoInput[]
    createMany?: CarritoCreateManyJuegoInputEnvelope
    connect?: CarritoWhereUniqueInput | CarritoWhereUniqueInput[]
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableFloatFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type FotoUpdateManyWithoutJuegoNestedInput = {
    create?: XOR<FotoCreateWithoutJuegoInput, FotoUncheckedCreateWithoutJuegoInput> | FotoCreateWithoutJuegoInput[] | FotoUncheckedCreateWithoutJuegoInput[]
    connectOrCreate?: FotoCreateOrConnectWithoutJuegoInput | FotoCreateOrConnectWithoutJuegoInput[]
    upsert?: FotoUpsertWithWhereUniqueWithoutJuegoInput | FotoUpsertWithWhereUniqueWithoutJuegoInput[]
    createMany?: FotoCreateManyJuegoInputEnvelope
    set?: FotoWhereUniqueInput | FotoWhereUniqueInput[]
    disconnect?: FotoWhereUniqueInput | FotoWhereUniqueInput[]
    delete?: FotoWhereUniqueInput | FotoWhereUniqueInput[]
    connect?: FotoWhereUniqueInput | FotoWhereUniqueInput[]
    update?: FotoUpdateWithWhereUniqueWithoutJuegoInput | FotoUpdateWithWhereUniqueWithoutJuegoInput[]
    updateMany?: FotoUpdateManyWithWhereWithoutJuegoInput | FotoUpdateManyWithWhereWithoutJuegoInput[]
    deleteMany?: FotoScalarWhereInput | FotoScalarWhereInput[]
  }

  export type CategoriaXJuegoUpdateManyWithoutJuegoNestedInput = {
    create?: XOR<CategoriaXJuegoCreateWithoutJuegoInput, CategoriaXJuegoUncheckedCreateWithoutJuegoInput> | CategoriaXJuegoCreateWithoutJuegoInput[] | CategoriaXJuegoUncheckedCreateWithoutJuegoInput[]
    connectOrCreate?: CategoriaXJuegoCreateOrConnectWithoutJuegoInput | CategoriaXJuegoCreateOrConnectWithoutJuegoInput[]
    upsert?: CategoriaXJuegoUpsertWithWhereUniqueWithoutJuegoInput | CategoriaXJuegoUpsertWithWhereUniqueWithoutJuegoInput[]
    createMany?: CategoriaXJuegoCreateManyJuegoInputEnvelope
    set?: CategoriaXJuegoWhereUniqueInput | CategoriaXJuegoWhereUniqueInput[]
    disconnect?: CategoriaXJuegoWhereUniqueInput | CategoriaXJuegoWhereUniqueInput[]
    delete?: CategoriaXJuegoWhereUniqueInput | CategoriaXJuegoWhereUniqueInput[]
    connect?: CategoriaXJuegoWhereUniqueInput | CategoriaXJuegoWhereUniqueInput[]
    update?: CategoriaXJuegoUpdateWithWhereUniqueWithoutJuegoInput | CategoriaXJuegoUpdateWithWhereUniqueWithoutJuegoInput[]
    updateMany?: CategoriaXJuegoUpdateManyWithWhereWithoutJuegoInput | CategoriaXJuegoUpdateManyWithWhereWithoutJuegoInput[]
    deleteMany?: CategoriaXJuegoScalarWhereInput | CategoriaXJuegoScalarWhereInput[]
  }

  export type PlataformaXJuegoUpdateManyWithoutJuegoNestedInput = {
    create?: XOR<PlataformaXJuegoCreateWithoutJuegoInput, PlataformaXJuegoUncheckedCreateWithoutJuegoInput> | PlataformaXJuegoCreateWithoutJuegoInput[] | PlataformaXJuegoUncheckedCreateWithoutJuegoInput[]
    connectOrCreate?: PlataformaXJuegoCreateOrConnectWithoutJuegoInput | PlataformaXJuegoCreateOrConnectWithoutJuegoInput[]
    upsert?: PlataformaXJuegoUpsertWithWhereUniqueWithoutJuegoInput | PlataformaXJuegoUpsertWithWhereUniqueWithoutJuegoInput[]
    createMany?: PlataformaXJuegoCreateManyJuegoInputEnvelope
    set?: PlataformaXJuegoWhereUniqueInput | PlataformaXJuegoWhereUniqueInput[]
    disconnect?: PlataformaXJuegoWhereUniqueInput | PlataformaXJuegoWhereUniqueInput[]
    delete?: PlataformaXJuegoWhereUniqueInput | PlataformaXJuegoWhereUniqueInput[]
    connect?: PlataformaXJuegoWhereUniqueInput | PlataformaXJuegoWhereUniqueInput[]
    update?: PlataformaXJuegoUpdateWithWhereUniqueWithoutJuegoInput | PlataformaXJuegoUpdateWithWhereUniqueWithoutJuegoInput[]
    updateMany?: PlataformaXJuegoUpdateManyWithWhereWithoutJuegoInput | PlataformaXJuegoUpdateManyWithWhereWithoutJuegoInput[]
    deleteMany?: PlataformaXJuegoScalarWhereInput | PlataformaXJuegoScalarWhereInput[]
  }

  export type ClaveUpdateManyWithoutJuegoNestedInput = {
    create?: XOR<ClaveCreateWithoutJuegoInput, ClaveUncheckedCreateWithoutJuegoInput> | ClaveCreateWithoutJuegoInput[] | ClaveUncheckedCreateWithoutJuegoInput[]
    connectOrCreate?: ClaveCreateOrConnectWithoutJuegoInput | ClaveCreateOrConnectWithoutJuegoInput[]
    upsert?: ClaveUpsertWithWhereUniqueWithoutJuegoInput | ClaveUpsertWithWhereUniqueWithoutJuegoInput[]
    createMany?: ClaveCreateManyJuegoInputEnvelope
    set?: ClaveWhereUniqueInput | ClaveWhereUniqueInput[]
    disconnect?: ClaveWhereUniqueInput | ClaveWhereUniqueInput[]
    delete?: ClaveWhereUniqueInput | ClaveWhereUniqueInput[]
    connect?: ClaveWhereUniqueInput | ClaveWhereUniqueInput[]
    update?: ClaveUpdateWithWhereUniqueWithoutJuegoInput | ClaveUpdateWithWhereUniqueWithoutJuegoInput[]
    updateMany?: ClaveUpdateManyWithWhereWithoutJuegoInput | ClaveUpdateManyWithWhereWithoutJuegoInput[]
    deleteMany?: ClaveScalarWhereInput | ClaveScalarWhereInput[]
  }

  export type JuegoXVentaUpdateManyWithoutJuegoNestedInput = {
    create?: XOR<JuegoXVentaCreateWithoutJuegoInput, JuegoXVentaUncheckedCreateWithoutJuegoInput> | JuegoXVentaCreateWithoutJuegoInput[] | JuegoXVentaUncheckedCreateWithoutJuegoInput[]
    connectOrCreate?: JuegoXVentaCreateOrConnectWithoutJuegoInput | JuegoXVentaCreateOrConnectWithoutJuegoInput[]
    upsert?: JuegoXVentaUpsertWithWhereUniqueWithoutJuegoInput | JuegoXVentaUpsertWithWhereUniqueWithoutJuegoInput[]
    createMany?: JuegoXVentaCreateManyJuegoInputEnvelope
    set?: JuegoXVentaWhereUniqueInput | JuegoXVentaWhereUniqueInput[]
    disconnect?: JuegoXVentaWhereUniqueInput | JuegoXVentaWhereUniqueInput[]
    delete?: JuegoXVentaWhereUniqueInput | JuegoXVentaWhereUniqueInput[]
    connect?: JuegoXVentaWhereUniqueInput | JuegoXVentaWhereUniqueInput[]
    update?: JuegoXVentaUpdateWithWhereUniqueWithoutJuegoInput | JuegoXVentaUpdateWithWhereUniqueWithoutJuegoInput[]
    updateMany?: JuegoXVentaUpdateManyWithWhereWithoutJuegoInput | JuegoXVentaUpdateManyWithWhereWithoutJuegoInput[]
    deleteMany?: JuegoXVentaScalarWhereInput | JuegoXVentaScalarWhereInput[]
  }

  export type JuegoXUsuarioUpdateManyWithoutJuegoNestedInput = {
    create?: XOR<JuegoXUsuarioCreateWithoutJuegoInput, JuegoXUsuarioUncheckedCreateWithoutJuegoInput> | JuegoXUsuarioCreateWithoutJuegoInput[] | JuegoXUsuarioUncheckedCreateWithoutJuegoInput[]
    connectOrCreate?: JuegoXUsuarioCreateOrConnectWithoutJuegoInput | JuegoXUsuarioCreateOrConnectWithoutJuegoInput[]
    upsert?: JuegoXUsuarioUpsertWithWhereUniqueWithoutJuegoInput | JuegoXUsuarioUpsertWithWhereUniqueWithoutJuegoInput[]
    createMany?: JuegoXUsuarioCreateManyJuegoInputEnvelope
    set?: JuegoXUsuarioWhereUniqueInput | JuegoXUsuarioWhereUniqueInput[]
    disconnect?: JuegoXUsuarioWhereUniqueInput | JuegoXUsuarioWhereUniqueInput[]
    delete?: JuegoXUsuarioWhereUniqueInput | JuegoXUsuarioWhereUniqueInput[]
    connect?: JuegoXUsuarioWhereUniqueInput | JuegoXUsuarioWhereUniqueInput[]
    update?: JuegoXUsuarioUpdateWithWhereUniqueWithoutJuegoInput | JuegoXUsuarioUpdateWithWhereUniqueWithoutJuegoInput[]
    updateMany?: JuegoXUsuarioUpdateManyWithWhereWithoutJuegoInput | JuegoXUsuarioUpdateManyWithWhereWithoutJuegoInput[]
    deleteMany?: JuegoXUsuarioScalarWhereInput | JuegoXUsuarioScalarWhereInput[]
  }

  export type ResenaUpdateManyWithoutJuegoNestedInput = {
    create?: XOR<ResenaCreateWithoutJuegoInput, ResenaUncheckedCreateWithoutJuegoInput> | ResenaCreateWithoutJuegoInput[] | ResenaUncheckedCreateWithoutJuegoInput[]
    connectOrCreate?: ResenaCreateOrConnectWithoutJuegoInput | ResenaCreateOrConnectWithoutJuegoInput[]
    upsert?: ResenaUpsertWithWhereUniqueWithoutJuegoInput | ResenaUpsertWithWhereUniqueWithoutJuegoInput[]
    createMany?: ResenaCreateManyJuegoInputEnvelope
    set?: ResenaWhereUniqueInput | ResenaWhereUniqueInput[]
    disconnect?: ResenaWhereUniqueInput | ResenaWhereUniqueInput[]
    delete?: ResenaWhereUniqueInput | ResenaWhereUniqueInput[]
    connect?: ResenaWhereUniqueInput | ResenaWhereUniqueInput[]
    update?: ResenaUpdateWithWhereUniqueWithoutJuegoInput | ResenaUpdateWithWhereUniqueWithoutJuegoInput[]
    updateMany?: ResenaUpdateManyWithWhereWithoutJuegoInput | ResenaUpdateManyWithWhereWithoutJuegoInput[]
    deleteMany?: ResenaScalarWhereInput | ResenaScalarWhereInput[]
  }

  export type CarritoUpdateManyWithoutJuegoNestedInput = {
    create?: XOR<CarritoCreateWithoutJuegoInput, CarritoUncheckedCreateWithoutJuegoInput> | CarritoCreateWithoutJuegoInput[] | CarritoUncheckedCreateWithoutJuegoInput[]
    connectOrCreate?: CarritoCreateOrConnectWithoutJuegoInput | CarritoCreateOrConnectWithoutJuegoInput[]
    upsert?: CarritoUpsertWithWhereUniqueWithoutJuegoInput | CarritoUpsertWithWhereUniqueWithoutJuegoInput[]
    createMany?: CarritoCreateManyJuegoInputEnvelope
    set?: CarritoWhereUniqueInput | CarritoWhereUniqueInput[]
    disconnect?: CarritoWhereUniqueInput | CarritoWhereUniqueInput[]
    delete?: CarritoWhereUniqueInput | CarritoWhereUniqueInput[]
    connect?: CarritoWhereUniqueInput | CarritoWhereUniqueInput[]
    update?: CarritoUpdateWithWhereUniqueWithoutJuegoInput | CarritoUpdateWithWhereUniqueWithoutJuegoInput[]
    updateMany?: CarritoUpdateManyWithWhereWithoutJuegoInput | CarritoUpdateManyWithWhereWithoutJuegoInput[]
    deleteMany?: CarritoScalarWhereInput | CarritoScalarWhereInput[]
  }

  export type FotoUncheckedUpdateManyWithoutJuegoNestedInput = {
    create?: XOR<FotoCreateWithoutJuegoInput, FotoUncheckedCreateWithoutJuegoInput> | FotoCreateWithoutJuegoInput[] | FotoUncheckedCreateWithoutJuegoInput[]
    connectOrCreate?: FotoCreateOrConnectWithoutJuegoInput | FotoCreateOrConnectWithoutJuegoInput[]
    upsert?: FotoUpsertWithWhereUniqueWithoutJuegoInput | FotoUpsertWithWhereUniqueWithoutJuegoInput[]
    createMany?: FotoCreateManyJuegoInputEnvelope
    set?: FotoWhereUniqueInput | FotoWhereUniqueInput[]
    disconnect?: FotoWhereUniqueInput | FotoWhereUniqueInput[]
    delete?: FotoWhereUniqueInput | FotoWhereUniqueInput[]
    connect?: FotoWhereUniqueInput | FotoWhereUniqueInput[]
    update?: FotoUpdateWithWhereUniqueWithoutJuegoInput | FotoUpdateWithWhereUniqueWithoutJuegoInput[]
    updateMany?: FotoUpdateManyWithWhereWithoutJuegoInput | FotoUpdateManyWithWhereWithoutJuegoInput[]
    deleteMany?: FotoScalarWhereInput | FotoScalarWhereInput[]
  }

  export type CategoriaXJuegoUncheckedUpdateManyWithoutJuegoNestedInput = {
    create?: XOR<CategoriaXJuegoCreateWithoutJuegoInput, CategoriaXJuegoUncheckedCreateWithoutJuegoInput> | CategoriaXJuegoCreateWithoutJuegoInput[] | CategoriaXJuegoUncheckedCreateWithoutJuegoInput[]
    connectOrCreate?: CategoriaXJuegoCreateOrConnectWithoutJuegoInput | CategoriaXJuegoCreateOrConnectWithoutJuegoInput[]
    upsert?: CategoriaXJuegoUpsertWithWhereUniqueWithoutJuegoInput | CategoriaXJuegoUpsertWithWhereUniqueWithoutJuegoInput[]
    createMany?: CategoriaXJuegoCreateManyJuegoInputEnvelope
    set?: CategoriaXJuegoWhereUniqueInput | CategoriaXJuegoWhereUniqueInput[]
    disconnect?: CategoriaXJuegoWhereUniqueInput | CategoriaXJuegoWhereUniqueInput[]
    delete?: CategoriaXJuegoWhereUniqueInput | CategoriaXJuegoWhereUniqueInput[]
    connect?: CategoriaXJuegoWhereUniqueInput | CategoriaXJuegoWhereUniqueInput[]
    update?: CategoriaXJuegoUpdateWithWhereUniqueWithoutJuegoInput | CategoriaXJuegoUpdateWithWhereUniqueWithoutJuegoInput[]
    updateMany?: CategoriaXJuegoUpdateManyWithWhereWithoutJuegoInput | CategoriaXJuegoUpdateManyWithWhereWithoutJuegoInput[]
    deleteMany?: CategoriaXJuegoScalarWhereInput | CategoriaXJuegoScalarWhereInput[]
  }

  export type PlataformaXJuegoUncheckedUpdateManyWithoutJuegoNestedInput = {
    create?: XOR<PlataformaXJuegoCreateWithoutJuegoInput, PlataformaXJuegoUncheckedCreateWithoutJuegoInput> | PlataformaXJuegoCreateWithoutJuegoInput[] | PlataformaXJuegoUncheckedCreateWithoutJuegoInput[]
    connectOrCreate?: PlataformaXJuegoCreateOrConnectWithoutJuegoInput | PlataformaXJuegoCreateOrConnectWithoutJuegoInput[]
    upsert?: PlataformaXJuegoUpsertWithWhereUniqueWithoutJuegoInput | PlataformaXJuegoUpsertWithWhereUniqueWithoutJuegoInput[]
    createMany?: PlataformaXJuegoCreateManyJuegoInputEnvelope
    set?: PlataformaXJuegoWhereUniqueInput | PlataformaXJuegoWhereUniqueInput[]
    disconnect?: PlataformaXJuegoWhereUniqueInput | PlataformaXJuegoWhereUniqueInput[]
    delete?: PlataformaXJuegoWhereUniqueInput | PlataformaXJuegoWhereUniqueInput[]
    connect?: PlataformaXJuegoWhereUniqueInput | PlataformaXJuegoWhereUniqueInput[]
    update?: PlataformaXJuegoUpdateWithWhereUniqueWithoutJuegoInput | PlataformaXJuegoUpdateWithWhereUniqueWithoutJuegoInput[]
    updateMany?: PlataformaXJuegoUpdateManyWithWhereWithoutJuegoInput | PlataformaXJuegoUpdateManyWithWhereWithoutJuegoInput[]
    deleteMany?: PlataformaXJuegoScalarWhereInput | PlataformaXJuegoScalarWhereInput[]
  }

  export type ClaveUncheckedUpdateManyWithoutJuegoNestedInput = {
    create?: XOR<ClaveCreateWithoutJuegoInput, ClaveUncheckedCreateWithoutJuegoInput> | ClaveCreateWithoutJuegoInput[] | ClaveUncheckedCreateWithoutJuegoInput[]
    connectOrCreate?: ClaveCreateOrConnectWithoutJuegoInput | ClaveCreateOrConnectWithoutJuegoInput[]
    upsert?: ClaveUpsertWithWhereUniqueWithoutJuegoInput | ClaveUpsertWithWhereUniqueWithoutJuegoInput[]
    createMany?: ClaveCreateManyJuegoInputEnvelope
    set?: ClaveWhereUniqueInput | ClaveWhereUniqueInput[]
    disconnect?: ClaveWhereUniqueInput | ClaveWhereUniqueInput[]
    delete?: ClaveWhereUniqueInput | ClaveWhereUniqueInput[]
    connect?: ClaveWhereUniqueInput | ClaveWhereUniqueInput[]
    update?: ClaveUpdateWithWhereUniqueWithoutJuegoInput | ClaveUpdateWithWhereUniqueWithoutJuegoInput[]
    updateMany?: ClaveUpdateManyWithWhereWithoutJuegoInput | ClaveUpdateManyWithWhereWithoutJuegoInput[]
    deleteMany?: ClaveScalarWhereInput | ClaveScalarWhereInput[]
  }

  export type JuegoXVentaUncheckedUpdateManyWithoutJuegoNestedInput = {
    create?: XOR<JuegoXVentaCreateWithoutJuegoInput, JuegoXVentaUncheckedCreateWithoutJuegoInput> | JuegoXVentaCreateWithoutJuegoInput[] | JuegoXVentaUncheckedCreateWithoutJuegoInput[]
    connectOrCreate?: JuegoXVentaCreateOrConnectWithoutJuegoInput | JuegoXVentaCreateOrConnectWithoutJuegoInput[]
    upsert?: JuegoXVentaUpsertWithWhereUniqueWithoutJuegoInput | JuegoXVentaUpsertWithWhereUniqueWithoutJuegoInput[]
    createMany?: JuegoXVentaCreateManyJuegoInputEnvelope
    set?: JuegoXVentaWhereUniqueInput | JuegoXVentaWhereUniqueInput[]
    disconnect?: JuegoXVentaWhereUniqueInput | JuegoXVentaWhereUniqueInput[]
    delete?: JuegoXVentaWhereUniqueInput | JuegoXVentaWhereUniqueInput[]
    connect?: JuegoXVentaWhereUniqueInput | JuegoXVentaWhereUniqueInput[]
    update?: JuegoXVentaUpdateWithWhereUniqueWithoutJuegoInput | JuegoXVentaUpdateWithWhereUniqueWithoutJuegoInput[]
    updateMany?: JuegoXVentaUpdateManyWithWhereWithoutJuegoInput | JuegoXVentaUpdateManyWithWhereWithoutJuegoInput[]
    deleteMany?: JuegoXVentaScalarWhereInput | JuegoXVentaScalarWhereInput[]
  }

  export type JuegoXUsuarioUncheckedUpdateManyWithoutJuegoNestedInput = {
    create?: XOR<JuegoXUsuarioCreateWithoutJuegoInput, JuegoXUsuarioUncheckedCreateWithoutJuegoInput> | JuegoXUsuarioCreateWithoutJuegoInput[] | JuegoXUsuarioUncheckedCreateWithoutJuegoInput[]
    connectOrCreate?: JuegoXUsuarioCreateOrConnectWithoutJuegoInput | JuegoXUsuarioCreateOrConnectWithoutJuegoInput[]
    upsert?: JuegoXUsuarioUpsertWithWhereUniqueWithoutJuegoInput | JuegoXUsuarioUpsertWithWhereUniqueWithoutJuegoInput[]
    createMany?: JuegoXUsuarioCreateManyJuegoInputEnvelope
    set?: JuegoXUsuarioWhereUniqueInput | JuegoXUsuarioWhereUniqueInput[]
    disconnect?: JuegoXUsuarioWhereUniqueInput | JuegoXUsuarioWhereUniqueInput[]
    delete?: JuegoXUsuarioWhereUniqueInput | JuegoXUsuarioWhereUniqueInput[]
    connect?: JuegoXUsuarioWhereUniqueInput | JuegoXUsuarioWhereUniqueInput[]
    update?: JuegoXUsuarioUpdateWithWhereUniqueWithoutJuegoInput | JuegoXUsuarioUpdateWithWhereUniqueWithoutJuegoInput[]
    updateMany?: JuegoXUsuarioUpdateManyWithWhereWithoutJuegoInput | JuegoXUsuarioUpdateManyWithWhereWithoutJuegoInput[]
    deleteMany?: JuegoXUsuarioScalarWhereInput | JuegoXUsuarioScalarWhereInput[]
  }

  export type ResenaUncheckedUpdateManyWithoutJuegoNestedInput = {
    create?: XOR<ResenaCreateWithoutJuegoInput, ResenaUncheckedCreateWithoutJuegoInput> | ResenaCreateWithoutJuegoInput[] | ResenaUncheckedCreateWithoutJuegoInput[]
    connectOrCreate?: ResenaCreateOrConnectWithoutJuegoInput | ResenaCreateOrConnectWithoutJuegoInput[]
    upsert?: ResenaUpsertWithWhereUniqueWithoutJuegoInput | ResenaUpsertWithWhereUniqueWithoutJuegoInput[]
    createMany?: ResenaCreateManyJuegoInputEnvelope
    set?: ResenaWhereUniqueInput | ResenaWhereUniqueInput[]
    disconnect?: ResenaWhereUniqueInput | ResenaWhereUniqueInput[]
    delete?: ResenaWhereUniqueInput | ResenaWhereUniqueInput[]
    connect?: ResenaWhereUniqueInput | ResenaWhereUniqueInput[]
    update?: ResenaUpdateWithWhereUniqueWithoutJuegoInput | ResenaUpdateWithWhereUniqueWithoutJuegoInput[]
    updateMany?: ResenaUpdateManyWithWhereWithoutJuegoInput | ResenaUpdateManyWithWhereWithoutJuegoInput[]
    deleteMany?: ResenaScalarWhereInput | ResenaScalarWhereInput[]
  }

  export type CarritoUncheckedUpdateManyWithoutJuegoNestedInput = {
    create?: XOR<CarritoCreateWithoutJuegoInput, CarritoUncheckedCreateWithoutJuegoInput> | CarritoCreateWithoutJuegoInput[] | CarritoUncheckedCreateWithoutJuegoInput[]
    connectOrCreate?: CarritoCreateOrConnectWithoutJuegoInput | CarritoCreateOrConnectWithoutJuegoInput[]
    upsert?: CarritoUpsertWithWhereUniqueWithoutJuegoInput | CarritoUpsertWithWhereUniqueWithoutJuegoInput[]
    createMany?: CarritoCreateManyJuegoInputEnvelope
    set?: CarritoWhereUniqueInput | CarritoWhereUniqueInput[]
    disconnect?: CarritoWhereUniqueInput | CarritoWhereUniqueInput[]
    delete?: CarritoWhereUniqueInput | CarritoWhereUniqueInput[]
    connect?: CarritoWhereUniqueInput | CarritoWhereUniqueInput[]
    update?: CarritoUpdateWithWhereUniqueWithoutJuegoInput | CarritoUpdateWithWhereUniqueWithoutJuegoInput[]
    updateMany?: CarritoUpdateManyWithWhereWithoutJuegoInput | CarritoUpdateManyWithWhereWithoutJuegoInput[]
    deleteMany?: CarritoScalarWhereInput | CarritoScalarWhereInput[]
  }

  export type FotoCreateNestedOneWithoutNoticiaInput = {
    create?: XOR<FotoCreateWithoutNoticiaInput, FotoUncheckedCreateWithoutNoticiaInput>
    connectOrCreate?: FotoCreateOrConnectWithoutNoticiaInput
    connect?: FotoWhereUniqueInput
  }

  export type CatNoticiaXNoticiaCreateNestedManyWithoutNoticiaInput = {
    create?: XOR<CatNoticiaXNoticiaCreateWithoutNoticiaInput, CatNoticiaXNoticiaUncheckedCreateWithoutNoticiaInput> | CatNoticiaXNoticiaCreateWithoutNoticiaInput[] | CatNoticiaXNoticiaUncheckedCreateWithoutNoticiaInput[]
    connectOrCreate?: CatNoticiaXNoticiaCreateOrConnectWithoutNoticiaInput | CatNoticiaXNoticiaCreateOrConnectWithoutNoticiaInput[]
    createMany?: CatNoticiaXNoticiaCreateManyNoticiaInputEnvelope
    connect?: CatNoticiaXNoticiaWhereUniqueInput | CatNoticiaXNoticiaWhereUniqueInput[]
  }

  export type CatNoticiaXNoticiaUncheckedCreateNestedManyWithoutNoticiaInput = {
    create?: XOR<CatNoticiaXNoticiaCreateWithoutNoticiaInput, CatNoticiaXNoticiaUncheckedCreateWithoutNoticiaInput> | CatNoticiaXNoticiaCreateWithoutNoticiaInput[] | CatNoticiaXNoticiaUncheckedCreateWithoutNoticiaInput[]
    connectOrCreate?: CatNoticiaXNoticiaCreateOrConnectWithoutNoticiaInput | CatNoticiaXNoticiaCreateOrConnectWithoutNoticiaInput[]
    createMany?: CatNoticiaXNoticiaCreateManyNoticiaInputEnvelope
    connect?: CatNoticiaXNoticiaWhereUniqueInput | CatNoticiaXNoticiaWhereUniqueInput[]
  }

  export type FotoUpdateOneRequiredWithoutNoticiaNestedInput = {
    create?: XOR<FotoCreateWithoutNoticiaInput, FotoUncheckedCreateWithoutNoticiaInput>
    connectOrCreate?: FotoCreateOrConnectWithoutNoticiaInput
    upsert?: FotoUpsertWithoutNoticiaInput
    connect?: FotoWhereUniqueInput
    update?: XOR<XOR<FotoUpdateToOneWithWhereWithoutNoticiaInput, FotoUpdateWithoutNoticiaInput>, FotoUncheckedUpdateWithoutNoticiaInput>
  }

  export type CatNoticiaXNoticiaUpdateManyWithoutNoticiaNestedInput = {
    create?: XOR<CatNoticiaXNoticiaCreateWithoutNoticiaInput, CatNoticiaXNoticiaUncheckedCreateWithoutNoticiaInput> | CatNoticiaXNoticiaCreateWithoutNoticiaInput[] | CatNoticiaXNoticiaUncheckedCreateWithoutNoticiaInput[]
    connectOrCreate?: CatNoticiaXNoticiaCreateOrConnectWithoutNoticiaInput | CatNoticiaXNoticiaCreateOrConnectWithoutNoticiaInput[]
    upsert?: CatNoticiaXNoticiaUpsertWithWhereUniqueWithoutNoticiaInput | CatNoticiaXNoticiaUpsertWithWhereUniqueWithoutNoticiaInput[]
    createMany?: CatNoticiaXNoticiaCreateManyNoticiaInputEnvelope
    set?: CatNoticiaXNoticiaWhereUniqueInput | CatNoticiaXNoticiaWhereUniqueInput[]
    disconnect?: CatNoticiaXNoticiaWhereUniqueInput | CatNoticiaXNoticiaWhereUniqueInput[]
    delete?: CatNoticiaXNoticiaWhereUniqueInput | CatNoticiaXNoticiaWhereUniqueInput[]
    connect?: CatNoticiaXNoticiaWhereUniqueInput | CatNoticiaXNoticiaWhereUniqueInput[]
    update?: CatNoticiaXNoticiaUpdateWithWhereUniqueWithoutNoticiaInput | CatNoticiaXNoticiaUpdateWithWhereUniqueWithoutNoticiaInput[]
    updateMany?: CatNoticiaXNoticiaUpdateManyWithWhereWithoutNoticiaInput | CatNoticiaXNoticiaUpdateManyWithWhereWithoutNoticiaInput[]
    deleteMany?: CatNoticiaXNoticiaScalarWhereInput | CatNoticiaXNoticiaScalarWhereInput[]
  }

  export type CatNoticiaXNoticiaUncheckedUpdateManyWithoutNoticiaNestedInput = {
    create?: XOR<CatNoticiaXNoticiaCreateWithoutNoticiaInput, CatNoticiaXNoticiaUncheckedCreateWithoutNoticiaInput> | CatNoticiaXNoticiaCreateWithoutNoticiaInput[] | CatNoticiaXNoticiaUncheckedCreateWithoutNoticiaInput[]
    connectOrCreate?: CatNoticiaXNoticiaCreateOrConnectWithoutNoticiaInput | CatNoticiaXNoticiaCreateOrConnectWithoutNoticiaInput[]
    upsert?: CatNoticiaXNoticiaUpsertWithWhereUniqueWithoutNoticiaInput | CatNoticiaXNoticiaUpsertWithWhereUniqueWithoutNoticiaInput[]
    createMany?: CatNoticiaXNoticiaCreateManyNoticiaInputEnvelope
    set?: CatNoticiaXNoticiaWhereUniqueInput | CatNoticiaXNoticiaWhereUniqueInput[]
    disconnect?: CatNoticiaXNoticiaWhereUniqueInput | CatNoticiaXNoticiaWhereUniqueInput[]
    delete?: CatNoticiaXNoticiaWhereUniqueInput | CatNoticiaXNoticiaWhereUniqueInput[]
    connect?: CatNoticiaXNoticiaWhereUniqueInput | CatNoticiaXNoticiaWhereUniqueInput[]
    update?: CatNoticiaXNoticiaUpdateWithWhereUniqueWithoutNoticiaInput | CatNoticiaXNoticiaUpdateWithWhereUniqueWithoutNoticiaInput[]
    updateMany?: CatNoticiaXNoticiaUpdateManyWithWhereWithoutNoticiaInput | CatNoticiaXNoticiaUpdateManyWithWhereWithoutNoticiaInput[]
    deleteMany?: CatNoticiaXNoticiaScalarWhereInput | CatNoticiaXNoticiaScalarWhereInput[]
  }

  export type JuegoCreateNestedOneWithoutFotosInput = {
    create?: XOR<JuegoCreateWithoutFotosInput, JuegoUncheckedCreateWithoutFotosInput>
    connectOrCreate?: JuegoCreateOrConnectWithoutFotosInput
    connect?: JuegoWhereUniqueInput
  }

  export type NoticiaCreateNestedOneWithoutFotoInput = {
    create?: XOR<NoticiaCreateWithoutFotoInput, NoticiaUncheckedCreateWithoutFotoInput>
    connectOrCreate?: NoticiaCreateOrConnectWithoutFotoInput
    connect?: NoticiaWhereUniqueInput
  }

  export type NoticiaUncheckedCreateNestedOneWithoutFotoInput = {
    create?: XOR<NoticiaCreateWithoutFotoInput, NoticiaUncheckedCreateWithoutFotoInput>
    connectOrCreate?: NoticiaCreateOrConnectWithoutFotoInput
    connect?: NoticiaWhereUniqueInput
  }

  export type JuegoUpdateOneWithoutFotosNestedInput = {
    create?: XOR<JuegoCreateWithoutFotosInput, JuegoUncheckedCreateWithoutFotosInput>
    connectOrCreate?: JuegoCreateOrConnectWithoutFotosInput
    upsert?: JuegoUpsertWithoutFotosInput
    disconnect?: JuegoWhereInput | boolean
    delete?: JuegoWhereInput | boolean
    connect?: JuegoWhereUniqueInput
    update?: XOR<XOR<JuegoUpdateToOneWithWhereWithoutFotosInput, JuegoUpdateWithoutFotosInput>, JuegoUncheckedUpdateWithoutFotosInput>
  }

  export type NoticiaUpdateOneWithoutFotoNestedInput = {
    create?: XOR<NoticiaCreateWithoutFotoInput, NoticiaUncheckedCreateWithoutFotoInput>
    connectOrCreate?: NoticiaCreateOrConnectWithoutFotoInput
    upsert?: NoticiaUpsertWithoutFotoInput
    disconnect?: NoticiaWhereInput | boolean
    delete?: NoticiaWhereInput | boolean
    connect?: NoticiaWhereUniqueInput
    update?: XOR<XOR<NoticiaUpdateToOneWithWhereWithoutFotoInput, NoticiaUpdateWithoutFotoInput>, NoticiaUncheckedUpdateWithoutFotoInput>
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NoticiaUncheckedUpdateOneWithoutFotoNestedInput = {
    create?: XOR<NoticiaCreateWithoutFotoInput, NoticiaUncheckedCreateWithoutFotoInput>
    connectOrCreate?: NoticiaCreateOrConnectWithoutFotoInput
    upsert?: NoticiaUpsertWithoutFotoInput
    disconnect?: NoticiaWhereInput | boolean
    delete?: NoticiaWhereInput | boolean
    connect?: NoticiaWhereUniqueInput
    update?: XOR<XOR<NoticiaUpdateToOneWithWhereWithoutFotoInput, NoticiaUpdateWithoutFotoInput>, NoticiaUncheckedUpdateWithoutFotoInput>
  }

  export type CategoriaXJuegoCreateNestedManyWithoutCategoriaInput = {
    create?: XOR<CategoriaXJuegoCreateWithoutCategoriaInput, CategoriaXJuegoUncheckedCreateWithoutCategoriaInput> | CategoriaXJuegoCreateWithoutCategoriaInput[] | CategoriaXJuegoUncheckedCreateWithoutCategoriaInput[]
    connectOrCreate?: CategoriaXJuegoCreateOrConnectWithoutCategoriaInput | CategoriaXJuegoCreateOrConnectWithoutCategoriaInput[]
    createMany?: CategoriaXJuegoCreateManyCategoriaInputEnvelope
    connect?: CategoriaXJuegoWhereUniqueInput | CategoriaXJuegoWhereUniqueInput[]
  }

  export type CategoriaXJuegoUncheckedCreateNestedManyWithoutCategoriaInput = {
    create?: XOR<CategoriaXJuegoCreateWithoutCategoriaInput, CategoriaXJuegoUncheckedCreateWithoutCategoriaInput> | CategoriaXJuegoCreateWithoutCategoriaInput[] | CategoriaXJuegoUncheckedCreateWithoutCategoriaInput[]
    connectOrCreate?: CategoriaXJuegoCreateOrConnectWithoutCategoriaInput | CategoriaXJuegoCreateOrConnectWithoutCategoriaInput[]
    createMany?: CategoriaXJuegoCreateManyCategoriaInputEnvelope
    connect?: CategoriaXJuegoWhereUniqueInput | CategoriaXJuegoWhereUniqueInput[]
  }

  export type CategoriaXJuegoUpdateManyWithoutCategoriaNestedInput = {
    create?: XOR<CategoriaXJuegoCreateWithoutCategoriaInput, CategoriaXJuegoUncheckedCreateWithoutCategoriaInput> | CategoriaXJuegoCreateWithoutCategoriaInput[] | CategoriaXJuegoUncheckedCreateWithoutCategoriaInput[]
    connectOrCreate?: CategoriaXJuegoCreateOrConnectWithoutCategoriaInput | CategoriaXJuegoCreateOrConnectWithoutCategoriaInput[]
    upsert?: CategoriaXJuegoUpsertWithWhereUniqueWithoutCategoriaInput | CategoriaXJuegoUpsertWithWhereUniqueWithoutCategoriaInput[]
    createMany?: CategoriaXJuegoCreateManyCategoriaInputEnvelope
    set?: CategoriaXJuegoWhereUniqueInput | CategoriaXJuegoWhereUniqueInput[]
    disconnect?: CategoriaXJuegoWhereUniqueInput | CategoriaXJuegoWhereUniqueInput[]
    delete?: CategoriaXJuegoWhereUniqueInput | CategoriaXJuegoWhereUniqueInput[]
    connect?: CategoriaXJuegoWhereUniqueInput | CategoriaXJuegoWhereUniqueInput[]
    update?: CategoriaXJuegoUpdateWithWhereUniqueWithoutCategoriaInput | CategoriaXJuegoUpdateWithWhereUniqueWithoutCategoriaInput[]
    updateMany?: CategoriaXJuegoUpdateManyWithWhereWithoutCategoriaInput | CategoriaXJuegoUpdateManyWithWhereWithoutCategoriaInput[]
    deleteMany?: CategoriaXJuegoScalarWhereInput | CategoriaXJuegoScalarWhereInput[]
  }

  export type CategoriaXJuegoUncheckedUpdateManyWithoutCategoriaNestedInput = {
    create?: XOR<CategoriaXJuegoCreateWithoutCategoriaInput, CategoriaXJuegoUncheckedCreateWithoutCategoriaInput> | CategoriaXJuegoCreateWithoutCategoriaInput[] | CategoriaXJuegoUncheckedCreateWithoutCategoriaInput[]
    connectOrCreate?: CategoriaXJuegoCreateOrConnectWithoutCategoriaInput | CategoriaXJuegoCreateOrConnectWithoutCategoriaInput[]
    upsert?: CategoriaXJuegoUpsertWithWhereUniqueWithoutCategoriaInput | CategoriaXJuegoUpsertWithWhereUniqueWithoutCategoriaInput[]
    createMany?: CategoriaXJuegoCreateManyCategoriaInputEnvelope
    set?: CategoriaXJuegoWhereUniqueInput | CategoriaXJuegoWhereUniqueInput[]
    disconnect?: CategoriaXJuegoWhereUniqueInput | CategoriaXJuegoWhereUniqueInput[]
    delete?: CategoriaXJuegoWhereUniqueInput | CategoriaXJuegoWhereUniqueInput[]
    connect?: CategoriaXJuegoWhereUniqueInput | CategoriaXJuegoWhereUniqueInput[]
    update?: CategoriaXJuegoUpdateWithWhereUniqueWithoutCategoriaInput | CategoriaXJuegoUpdateWithWhereUniqueWithoutCategoriaInput[]
    updateMany?: CategoriaXJuegoUpdateManyWithWhereWithoutCategoriaInput | CategoriaXJuegoUpdateManyWithWhereWithoutCategoriaInput[]
    deleteMany?: CategoriaXJuegoScalarWhereInput | CategoriaXJuegoScalarWhereInput[]
  }

  export type PlataformaXJuegoCreateNestedManyWithoutPlataformaInput = {
    create?: XOR<PlataformaXJuegoCreateWithoutPlataformaInput, PlataformaXJuegoUncheckedCreateWithoutPlataformaInput> | PlataformaXJuegoCreateWithoutPlataformaInput[] | PlataformaXJuegoUncheckedCreateWithoutPlataformaInput[]
    connectOrCreate?: PlataformaXJuegoCreateOrConnectWithoutPlataformaInput | PlataformaXJuegoCreateOrConnectWithoutPlataformaInput[]
    createMany?: PlataformaXJuegoCreateManyPlataformaInputEnvelope
    connect?: PlataformaXJuegoWhereUniqueInput | PlataformaXJuegoWhereUniqueInput[]
  }

  export type PlataformaXJuegoUncheckedCreateNestedManyWithoutPlataformaInput = {
    create?: XOR<PlataformaXJuegoCreateWithoutPlataformaInput, PlataformaXJuegoUncheckedCreateWithoutPlataformaInput> | PlataformaXJuegoCreateWithoutPlataformaInput[] | PlataformaXJuegoUncheckedCreateWithoutPlataformaInput[]
    connectOrCreate?: PlataformaXJuegoCreateOrConnectWithoutPlataformaInput | PlataformaXJuegoCreateOrConnectWithoutPlataformaInput[]
    createMany?: PlataformaXJuegoCreateManyPlataformaInputEnvelope
    connect?: PlataformaXJuegoWhereUniqueInput | PlataformaXJuegoWhereUniqueInput[]
  }

  export type PlataformaXJuegoUpdateManyWithoutPlataformaNestedInput = {
    create?: XOR<PlataformaXJuegoCreateWithoutPlataformaInput, PlataformaXJuegoUncheckedCreateWithoutPlataformaInput> | PlataformaXJuegoCreateWithoutPlataformaInput[] | PlataformaXJuegoUncheckedCreateWithoutPlataformaInput[]
    connectOrCreate?: PlataformaXJuegoCreateOrConnectWithoutPlataformaInput | PlataformaXJuegoCreateOrConnectWithoutPlataformaInput[]
    upsert?: PlataformaXJuegoUpsertWithWhereUniqueWithoutPlataformaInput | PlataformaXJuegoUpsertWithWhereUniqueWithoutPlataformaInput[]
    createMany?: PlataformaXJuegoCreateManyPlataformaInputEnvelope
    set?: PlataformaXJuegoWhereUniqueInput | PlataformaXJuegoWhereUniqueInput[]
    disconnect?: PlataformaXJuegoWhereUniqueInput | PlataformaXJuegoWhereUniqueInput[]
    delete?: PlataformaXJuegoWhereUniqueInput | PlataformaXJuegoWhereUniqueInput[]
    connect?: PlataformaXJuegoWhereUniqueInput | PlataformaXJuegoWhereUniqueInput[]
    update?: PlataformaXJuegoUpdateWithWhereUniqueWithoutPlataformaInput | PlataformaXJuegoUpdateWithWhereUniqueWithoutPlataformaInput[]
    updateMany?: PlataformaXJuegoUpdateManyWithWhereWithoutPlataformaInput | PlataformaXJuegoUpdateManyWithWhereWithoutPlataformaInput[]
    deleteMany?: PlataformaXJuegoScalarWhereInput | PlataformaXJuegoScalarWhereInput[]
  }

  export type PlataformaXJuegoUncheckedUpdateManyWithoutPlataformaNestedInput = {
    create?: XOR<PlataformaXJuegoCreateWithoutPlataformaInput, PlataformaXJuegoUncheckedCreateWithoutPlataformaInput> | PlataformaXJuegoCreateWithoutPlataformaInput[] | PlataformaXJuegoUncheckedCreateWithoutPlataformaInput[]
    connectOrCreate?: PlataformaXJuegoCreateOrConnectWithoutPlataformaInput | PlataformaXJuegoCreateOrConnectWithoutPlataformaInput[]
    upsert?: PlataformaXJuegoUpsertWithWhereUniqueWithoutPlataformaInput | PlataformaXJuegoUpsertWithWhereUniqueWithoutPlataformaInput[]
    createMany?: PlataformaXJuegoCreateManyPlataformaInputEnvelope
    set?: PlataformaXJuegoWhereUniqueInput | PlataformaXJuegoWhereUniqueInput[]
    disconnect?: PlataformaXJuegoWhereUniqueInput | PlataformaXJuegoWhereUniqueInput[]
    delete?: PlataformaXJuegoWhereUniqueInput | PlataformaXJuegoWhereUniqueInput[]
    connect?: PlataformaXJuegoWhereUniqueInput | PlataformaXJuegoWhereUniqueInput[]
    update?: PlataformaXJuegoUpdateWithWhereUniqueWithoutPlataformaInput | PlataformaXJuegoUpdateWithWhereUniqueWithoutPlataformaInput[]
    updateMany?: PlataformaXJuegoUpdateManyWithWhereWithoutPlataformaInput | PlataformaXJuegoUpdateManyWithWhereWithoutPlataformaInput[]
    deleteMany?: PlataformaXJuegoScalarWhereInput | PlataformaXJuegoScalarWhereInput[]
  }

  export type UsuarioCreateNestedOneWithoutVentasInput = {
    create?: XOR<UsuarioCreateWithoutVentasInput, UsuarioUncheckedCreateWithoutVentasInput>
    connectOrCreate?: UsuarioCreateOrConnectWithoutVentasInput
    connect?: UsuarioWhereUniqueInput
  }

  export type JuegoXVentaCreateNestedManyWithoutVentaInput = {
    create?: XOR<JuegoXVentaCreateWithoutVentaInput, JuegoXVentaUncheckedCreateWithoutVentaInput> | JuegoXVentaCreateWithoutVentaInput[] | JuegoXVentaUncheckedCreateWithoutVentaInput[]
    connectOrCreate?: JuegoXVentaCreateOrConnectWithoutVentaInput | JuegoXVentaCreateOrConnectWithoutVentaInput[]
    createMany?: JuegoXVentaCreateManyVentaInputEnvelope
    connect?: JuegoXVentaWhereUniqueInput | JuegoXVentaWhereUniqueInput[]
  }

  export type ClaveCreateNestedManyWithoutVentaInput = {
    create?: XOR<ClaveCreateWithoutVentaInput, ClaveUncheckedCreateWithoutVentaInput> | ClaveCreateWithoutVentaInput[] | ClaveUncheckedCreateWithoutVentaInput[]
    connectOrCreate?: ClaveCreateOrConnectWithoutVentaInput | ClaveCreateOrConnectWithoutVentaInput[]
    createMany?: ClaveCreateManyVentaInputEnvelope
    connect?: ClaveWhereUniqueInput | ClaveWhereUniqueInput[]
  }

  export type JuegoXVentaUncheckedCreateNestedManyWithoutVentaInput = {
    create?: XOR<JuegoXVentaCreateWithoutVentaInput, JuegoXVentaUncheckedCreateWithoutVentaInput> | JuegoXVentaCreateWithoutVentaInput[] | JuegoXVentaUncheckedCreateWithoutVentaInput[]
    connectOrCreate?: JuegoXVentaCreateOrConnectWithoutVentaInput | JuegoXVentaCreateOrConnectWithoutVentaInput[]
    createMany?: JuegoXVentaCreateManyVentaInputEnvelope
    connect?: JuegoXVentaWhereUniqueInput | JuegoXVentaWhereUniqueInput[]
  }

  export type ClaveUncheckedCreateNestedManyWithoutVentaInput = {
    create?: XOR<ClaveCreateWithoutVentaInput, ClaveUncheckedCreateWithoutVentaInput> | ClaveCreateWithoutVentaInput[] | ClaveUncheckedCreateWithoutVentaInput[]
    connectOrCreate?: ClaveCreateOrConnectWithoutVentaInput | ClaveCreateOrConnectWithoutVentaInput[]
    createMany?: ClaveCreateManyVentaInputEnvelope
    connect?: ClaveWhereUniqueInput | ClaveWhereUniqueInput[]
  }

  export type UsuarioUpdateOneRequiredWithoutVentasNestedInput = {
    create?: XOR<UsuarioCreateWithoutVentasInput, UsuarioUncheckedCreateWithoutVentasInput>
    connectOrCreate?: UsuarioCreateOrConnectWithoutVentasInput
    upsert?: UsuarioUpsertWithoutVentasInput
    connect?: UsuarioWhereUniqueInput
    update?: XOR<XOR<UsuarioUpdateToOneWithWhereWithoutVentasInput, UsuarioUpdateWithoutVentasInput>, UsuarioUncheckedUpdateWithoutVentasInput>
  }

  export type JuegoXVentaUpdateManyWithoutVentaNestedInput = {
    create?: XOR<JuegoXVentaCreateWithoutVentaInput, JuegoXVentaUncheckedCreateWithoutVentaInput> | JuegoXVentaCreateWithoutVentaInput[] | JuegoXVentaUncheckedCreateWithoutVentaInput[]
    connectOrCreate?: JuegoXVentaCreateOrConnectWithoutVentaInput | JuegoXVentaCreateOrConnectWithoutVentaInput[]
    upsert?: JuegoXVentaUpsertWithWhereUniqueWithoutVentaInput | JuegoXVentaUpsertWithWhereUniqueWithoutVentaInput[]
    createMany?: JuegoXVentaCreateManyVentaInputEnvelope
    set?: JuegoXVentaWhereUniqueInput | JuegoXVentaWhereUniqueInput[]
    disconnect?: JuegoXVentaWhereUniqueInput | JuegoXVentaWhereUniqueInput[]
    delete?: JuegoXVentaWhereUniqueInput | JuegoXVentaWhereUniqueInput[]
    connect?: JuegoXVentaWhereUniqueInput | JuegoXVentaWhereUniqueInput[]
    update?: JuegoXVentaUpdateWithWhereUniqueWithoutVentaInput | JuegoXVentaUpdateWithWhereUniqueWithoutVentaInput[]
    updateMany?: JuegoXVentaUpdateManyWithWhereWithoutVentaInput | JuegoXVentaUpdateManyWithWhereWithoutVentaInput[]
    deleteMany?: JuegoXVentaScalarWhereInput | JuegoXVentaScalarWhereInput[]
  }

  export type ClaveUpdateManyWithoutVentaNestedInput = {
    create?: XOR<ClaveCreateWithoutVentaInput, ClaveUncheckedCreateWithoutVentaInput> | ClaveCreateWithoutVentaInput[] | ClaveUncheckedCreateWithoutVentaInput[]
    connectOrCreate?: ClaveCreateOrConnectWithoutVentaInput | ClaveCreateOrConnectWithoutVentaInput[]
    upsert?: ClaveUpsertWithWhereUniqueWithoutVentaInput | ClaveUpsertWithWhereUniqueWithoutVentaInput[]
    createMany?: ClaveCreateManyVentaInputEnvelope
    set?: ClaveWhereUniqueInput | ClaveWhereUniqueInput[]
    disconnect?: ClaveWhereUniqueInput | ClaveWhereUniqueInput[]
    delete?: ClaveWhereUniqueInput | ClaveWhereUniqueInput[]
    connect?: ClaveWhereUniqueInput | ClaveWhereUniqueInput[]
    update?: ClaveUpdateWithWhereUniqueWithoutVentaInput | ClaveUpdateWithWhereUniqueWithoutVentaInput[]
    updateMany?: ClaveUpdateManyWithWhereWithoutVentaInput | ClaveUpdateManyWithWhereWithoutVentaInput[]
    deleteMany?: ClaveScalarWhereInput | ClaveScalarWhereInput[]
  }

  export type JuegoXVentaUncheckedUpdateManyWithoutVentaNestedInput = {
    create?: XOR<JuegoXVentaCreateWithoutVentaInput, JuegoXVentaUncheckedCreateWithoutVentaInput> | JuegoXVentaCreateWithoutVentaInput[] | JuegoXVentaUncheckedCreateWithoutVentaInput[]
    connectOrCreate?: JuegoXVentaCreateOrConnectWithoutVentaInput | JuegoXVentaCreateOrConnectWithoutVentaInput[]
    upsert?: JuegoXVentaUpsertWithWhereUniqueWithoutVentaInput | JuegoXVentaUpsertWithWhereUniqueWithoutVentaInput[]
    createMany?: JuegoXVentaCreateManyVentaInputEnvelope
    set?: JuegoXVentaWhereUniqueInput | JuegoXVentaWhereUniqueInput[]
    disconnect?: JuegoXVentaWhereUniqueInput | JuegoXVentaWhereUniqueInput[]
    delete?: JuegoXVentaWhereUniqueInput | JuegoXVentaWhereUniqueInput[]
    connect?: JuegoXVentaWhereUniqueInput | JuegoXVentaWhereUniqueInput[]
    update?: JuegoXVentaUpdateWithWhereUniqueWithoutVentaInput | JuegoXVentaUpdateWithWhereUniqueWithoutVentaInput[]
    updateMany?: JuegoXVentaUpdateManyWithWhereWithoutVentaInput | JuegoXVentaUpdateManyWithWhereWithoutVentaInput[]
    deleteMany?: JuegoXVentaScalarWhereInput | JuegoXVentaScalarWhereInput[]
  }

  export type ClaveUncheckedUpdateManyWithoutVentaNestedInput = {
    create?: XOR<ClaveCreateWithoutVentaInput, ClaveUncheckedCreateWithoutVentaInput> | ClaveCreateWithoutVentaInput[] | ClaveUncheckedCreateWithoutVentaInput[]
    connectOrCreate?: ClaveCreateOrConnectWithoutVentaInput | ClaveCreateOrConnectWithoutVentaInput[]
    upsert?: ClaveUpsertWithWhereUniqueWithoutVentaInput | ClaveUpsertWithWhereUniqueWithoutVentaInput[]
    createMany?: ClaveCreateManyVentaInputEnvelope
    set?: ClaveWhereUniqueInput | ClaveWhereUniqueInput[]
    disconnect?: ClaveWhereUniqueInput | ClaveWhereUniqueInput[]
    delete?: ClaveWhereUniqueInput | ClaveWhereUniqueInput[]
    connect?: ClaveWhereUniqueInput | ClaveWhereUniqueInput[]
    update?: ClaveUpdateWithWhereUniqueWithoutVentaInput | ClaveUpdateWithWhereUniqueWithoutVentaInput[]
    updateMany?: ClaveUpdateManyWithWhereWithoutVentaInput | ClaveUpdateManyWithWhereWithoutVentaInput[]
    deleteMany?: ClaveScalarWhereInput | ClaveScalarWhereInput[]
  }

  export type JuegoCreateNestedOneWithoutVentasInput = {
    create?: XOR<JuegoCreateWithoutVentasInput, JuegoUncheckedCreateWithoutVentasInput>
    connectOrCreate?: JuegoCreateOrConnectWithoutVentasInput
    connect?: JuegoWhereUniqueInput
  }

  export type VentaCreateNestedOneWithoutJuegosInput = {
    create?: XOR<VentaCreateWithoutJuegosInput, VentaUncheckedCreateWithoutJuegosInput>
    connectOrCreate?: VentaCreateOrConnectWithoutJuegosInput
    connect?: VentaWhereUniqueInput
  }

  export type JuegoUpdateOneRequiredWithoutVentasNestedInput = {
    create?: XOR<JuegoCreateWithoutVentasInput, JuegoUncheckedCreateWithoutVentasInput>
    connectOrCreate?: JuegoCreateOrConnectWithoutVentasInput
    upsert?: JuegoUpsertWithoutVentasInput
    connect?: JuegoWhereUniqueInput
    update?: XOR<XOR<JuegoUpdateToOneWithWhereWithoutVentasInput, JuegoUpdateWithoutVentasInput>, JuegoUncheckedUpdateWithoutVentasInput>
  }

  export type VentaUpdateOneRequiredWithoutJuegosNestedInput = {
    create?: XOR<VentaCreateWithoutJuegosInput, VentaUncheckedCreateWithoutJuegosInput>
    connectOrCreate?: VentaCreateOrConnectWithoutJuegosInput
    upsert?: VentaUpsertWithoutJuegosInput
    connect?: VentaWhereUniqueInput
    update?: XOR<XOR<VentaUpdateToOneWithWhereWithoutJuegosInput, VentaUpdateWithoutJuegosInput>, VentaUncheckedUpdateWithoutJuegosInput>
  }

  export type JuegoCreateNestedOneWithoutUsuariosInput = {
    create?: XOR<JuegoCreateWithoutUsuariosInput, JuegoUncheckedCreateWithoutUsuariosInput>
    connectOrCreate?: JuegoCreateOrConnectWithoutUsuariosInput
    connect?: JuegoWhereUniqueInput
  }

  export type UsuarioCreateNestedOneWithoutJuegosInput = {
    create?: XOR<UsuarioCreateWithoutJuegosInput, UsuarioUncheckedCreateWithoutJuegosInput>
    connectOrCreate?: UsuarioCreateOrConnectWithoutJuegosInput
    connect?: UsuarioWhereUniqueInput
  }

  export type JuegoUpdateOneRequiredWithoutUsuariosNestedInput = {
    create?: XOR<JuegoCreateWithoutUsuariosInput, JuegoUncheckedCreateWithoutUsuariosInput>
    connectOrCreate?: JuegoCreateOrConnectWithoutUsuariosInput
    upsert?: JuegoUpsertWithoutUsuariosInput
    connect?: JuegoWhereUniqueInput
    update?: XOR<XOR<JuegoUpdateToOneWithWhereWithoutUsuariosInput, JuegoUpdateWithoutUsuariosInput>, JuegoUncheckedUpdateWithoutUsuariosInput>
  }

  export type UsuarioUpdateOneRequiredWithoutJuegosNestedInput = {
    create?: XOR<UsuarioCreateWithoutJuegosInput, UsuarioUncheckedCreateWithoutJuegosInput>
    connectOrCreate?: UsuarioCreateOrConnectWithoutJuegosInput
    upsert?: UsuarioUpsertWithoutJuegosInput
    connect?: UsuarioWhereUniqueInput
    update?: XOR<XOR<UsuarioUpdateToOneWithWhereWithoutJuegosInput, UsuarioUpdateWithoutJuegosInput>, UsuarioUncheckedUpdateWithoutJuegosInput>
  }

  export type JuegoCreateNestedOneWithoutClavesInput = {
    create?: XOR<JuegoCreateWithoutClavesInput, JuegoUncheckedCreateWithoutClavesInput>
    connectOrCreate?: JuegoCreateOrConnectWithoutClavesInput
    connect?: JuegoWhereUniqueInput
  }

  export type VentaCreateNestedOneWithoutClavesInput = {
    create?: XOR<VentaCreateWithoutClavesInput, VentaUncheckedCreateWithoutClavesInput>
    connectOrCreate?: VentaCreateOrConnectWithoutClavesInput
    connect?: VentaWhereUniqueInput
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type JuegoUpdateOneRequiredWithoutClavesNestedInput = {
    create?: XOR<JuegoCreateWithoutClavesInput, JuegoUncheckedCreateWithoutClavesInput>
    connectOrCreate?: JuegoCreateOrConnectWithoutClavesInput
    upsert?: JuegoUpsertWithoutClavesInput
    connect?: JuegoWhereUniqueInput
    update?: XOR<XOR<JuegoUpdateToOneWithWhereWithoutClavesInput, JuegoUpdateWithoutClavesInput>, JuegoUncheckedUpdateWithoutClavesInput>
  }

  export type VentaUpdateOneRequiredWithoutClavesNestedInput = {
    create?: XOR<VentaCreateWithoutClavesInput, VentaUncheckedCreateWithoutClavesInput>
    connectOrCreate?: VentaCreateOrConnectWithoutClavesInput
    upsert?: VentaUpsertWithoutClavesInput
    connect?: VentaWhereUniqueInput
    update?: XOR<XOR<VentaUpdateToOneWithWhereWithoutClavesInput, VentaUpdateWithoutClavesInput>, VentaUncheckedUpdateWithoutClavesInput>
  }

  export type JuegoCreateNestedOneWithoutCategoriasInput = {
    create?: XOR<JuegoCreateWithoutCategoriasInput, JuegoUncheckedCreateWithoutCategoriasInput>
    connectOrCreate?: JuegoCreateOrConnectWithoutCategoriasInput
    connect?: JuegoWhereUniqueInput
  }

  export type CategoriaCreateNestedOneWithoutJuegosInput = {
    create?: XOR<CategoriaCreateWithoutJuegosInput, CategoriaUncheckedCreateWithoutJuegosInput>
    connectOrCreate?: CategoriaCreateOrConnectWithoutJuegosInput
    connect?: CategoriaWhereUniqueInput
  }

  export type JuegoUpdateOneRequiredWithoutCategoriasNestedInput = {
    create?: XOR<JuegoCreateWithoutCategoriasInput, JuegoUncheckedCreateWithoutCategoriasInput>
    connectOrCreate?: JuegoCreateOrConnectWithoutCategoriasInput
    upsert?: JuegoUpsertWithoutCategoriasInput
    connect?: JuegoWhereUniqueInput
    update?: XOR<XOR<JuegoUpdateToOneWithWhereWithoutCategoriasInput, JuegoUpdateWithoutCategoriasInput>, JuegoUncheckedUpdateWithoutCategoriasInput>
  }

  export type CategoriaUpdateOneRequiredWithoutJuegosNestedInput = {
    create?: XOR<CategoriaCreateWithoutJuegosInput, CategoriaUncheckedCreateWithoutJuegosInput>
    connectOrCreate?: CategoriaCreateOrConnectWithoutJuegosInput
    upsert?: CategoriaUpsertWithoutJuegosInput
    connect?: CategoriaWhereUniqueInput
    update?: XOR<XOR<CategoriaUpdateToOneWithWhereWithoutJuegosInput, CategoriaUpdateWithoutJuegosInput>, CategoriaUncheckedUpdateWithoutJuegosInput>
  }

  export type JuegoCreateNestedOneWithoutPlataformasInput = {
    create?: XOR<JuegoCreateWithoutPlataformasInput, JuegoUncheckedCreateWithoutPlataformasInput>
    connectOrCreate?: JuegoCreateOrConnectWithoutPlataformasInput
    connect?: JuegoWhereUniqueInput
  }

  export type PlataformaCreateNestedOneWithoutJuegosInput = {
    create?: XOR<PlataformaCreateWithoutJuegosInput, PlataformaUncheckedCreateWithoutJuegosInput>
    connectOrCreate?: PlataformaCreateOrConnectWithoutJuegosInput
    connect?: PlataformaWhereUniqueInput
  }

  export type JuegoUpdateOneRequiredWithoutPlataformasNestedInput = {
    create?: XOR<JuegoCreateWithoutPlataformasInput, JuegoUncheckedCreateWithoutPlataformasInput>
    connectOrCreate?: JuegoCreateOrConnectWithoutPlataformasInput
    upsert?: JuegoUpsertWithoutPlataformasInput
    connect?: JuegoWhereUniqueInput
    update?: XOR<XOR<JuegoUpdateToOneWithWhereWithoutPlataformasInput, JuegoUpdateWithoutPlataformasInput>, JuegoUncheckedUpdateWithoutPlataformasInput>
  }

  export type PlataformaUpdateOneRequiredWithoutJuegosNestedInput = {
    create?: XOR<PlataformaCreateWithoutJuegosInput, PlataformaUncheckedCreateWithoutJuegosInput>
    connectOrCreate?: PlataformaCreateOrConnectWithoutJuegosInput
    upsert?: PlataformaUpsertWithoutJuegosInput
    connect?: PlataformaWhereUniqueInput
    update?: XOR<XOR<PlataformaUpdateToOneWithWhereWithoutJuegosInput, PlataformaUpdateWithoutJuegosInput>, PlataformaUncheckedUpdateWithoutJuegosInput>
  }

  export type CatNoticiaXNoticiaCreateNestedManyWithoutCatNoticiaInput = {
    create?: XOR<CatNoticiaXNoticiaCreateWithoutCatNoticiaInput, CatNoticiaXNoticiaUncheckedCreateWithoutCatNoticiaInput> | CatNoticiaXNoticiaCreateWithoutCatNoticiaInput[] | CatNoticiaXNoticiaUncheckedCreateWithoutCatNoticiaInput[]
    connectOrCreate?: CatNoticiaXNoticiaCreateOrConnectWithoutCatNoticiaInput | CatNoticiaXNoticiaCreateOrConnectWithoutCatNoticiaInput[]
    createMany?: CatNoticiaXNoticiaCreateManyCatNoticiaInputEnvelope
    connect?: CatNoticiaXNoticiaWhereUniqueInput | CatNoticiaXNoticiaWhereUniqueInput[]
  }

  export type CatNoticiaXNoticiaUncheckedCreateNestedManyWithoutCatNoticiaInput = {
    create?: XOR<CatNoticiaXNoticiaCreateWithoutCatNoticiaInput, CatNoticiaXNoticiaUncheckedCreateWithoutCatNoticiaInput> | CatNoticiaXNoticiaCreateWithoutCatNoticiaInput[] | CatNoticiaXNoticiaUncheckedCreateWithoutCatNoticiaInput[]
    connectOrCreate?: CatNoticiaXNoticiaCreateOrConnectWithoutCatNoticiaInput | CatNoticiaXNoticiaCreateOrConnectWithoutCatNoticiaInput[]
    createMany?: CatNoticiaXNoticiaCreateManyCatNoticiaInputEnvelope
    connect?: CatNoticiaXNoticiaWhereUniqueInput | CatNoticiaXNoticiaWhereUniqueInput[]
  }

  export type CatNoticiaXNoticiaUpdateManyWithoutCatNoticiaNestedInput = {
    create?: XOR<CatNoticiaXNoticiaCreateWithoutCatNoticiaInput, CatNoticiaXNoticiaUncheckedCreateWithoutCatNoticiaInput> | CatNoticiaXNoticiaCreateWithoutCatNoticiaInput[] | CatNoticiaXNoticiaUncheckedCreateWithoutCatNoticiaInput[]
    connectOrCreate?: CatNoticiaXNoticiaCreateOrConnectWithoutCatNoticiaInput | CatNoticiaXNoticiaCreateOrConnectWithoutCatNoticiaInput[]
    upsert?: CatNoticiaXNoticiaUpsertWithWhereUniqueWithoutCatNoticiaInput | CatNoticiaXNoticiaUpsertWithWhereUniqueWithoutCatNoticiaInput[]
    createMany?: CatNoticiaXNoticiaCreateManyCatNoticiaInputEnvelope
    set?: CatNoticiaXNoticiaWhereUniqueInput | CatNoticiaXNoticiaWhereUniqueInput[]
    disconnect?: CatNoticiaXNoticiaWhereUniqueInput | CatNoticiaXNoticiaWhereUniqueInput[]
    delete?: CatNoticiaXNoticiaWhereUniqueInput | CatNoticiaXNoticiaWhereUniqueInput[]
    connect?: CatNoticiaXNoticiaWhereUniqueInput | CatNoticiaXNoticiaWhereUniqueInput[]
    update?: CatNoticiaXNoticiaUpdateWithWhereUniqueWithoutCatNoticiaInput | CatNoticiaXNoticiaUpdateWithWhereUniqueWithoutCatNoticiaInput[]
    updateMany?: CatNoticiaXNoticiaUpdateManyWithWhereWithoutCatNoticiaInput | CatNoticiaXNoticiaUpdateManyWithWhereWithoutCatNoticiaInput[]
    deleteMany?: CatNoticiaXNoticiaScalarWhereInput | CatNoticiaXNoticiaScalarWhereInput[]
  }

  export type CatNoticiaXNoticiaUncheckedUpdateManyWithoutCatNoticiaNestedInput = {
    create?: XOR<CatNoticiaXNoticiaCreateWithoutCatNoticiaInput, CatNoticiaXNoticiaUncheckedCreateWithoutCatNoticiaInput> | CatNoticiaXNoticiaCreateWithoutCatNoticiaInput[] | CatNoticiaXNoticiaUncheckedCreateWithoutCatNoticiaInput[]
    connectOrCreate?: CatNoticiaXNoticiaCreateOrConnectWithoutCatNoticiaInput | CatNoticiaXNoticiaCreateOrConnectWithoutCatNoticiaInput[]
    upsert?: CatNoticiaXNoticiaUpsertWithWhereUniqueWithoutCatNoticiaInput | CatNoticiaXNoticiaUpsertWithWhereUniqueWithoutCatNoticiaInput[]
    createMany?: CatNoticiaXNoticiaCreateManyCatNoticiaInputEnvelope
    set?: CatNoticiaXNoticiaWhereUniqueInput | CatNoticiaXNoticiaWhereUniqueInput[]
    disconnect?: CatNoticiaXNoticiaWhereUniqueInput | CatNoticiaXNoticiaWhereUniqueInput[]
    delete?: CatNoticiaXNoticiaWhereUniqueInput | CatNoticiaXNoticiaWhereUniqueInput[]
    connect?: CatNoticiaXNoticiaWhereUniqueInput | CatNoticiaXNoticiaWhereUniqueInput[]
    update?: CatNoticiaXNoticiaUpdateWithWhereUniqueWithoutCatNoticiaInput | CatNoticiaXNoticiaUpdateWithWhereUniqueWithoutCatNoticiaInput[]
    updateMany?: CatNoticiaXNoticiaUpdateManyWithWhereWithoutCatNoticiaInput | CatNoticiaXNoticiaUpdateManyWithWhereWithoutCatNoticiaInput[]
    deleteMany?: CatNoticiaXNoticiaScalarWhereInput | CatNoticiaXNoticiaScalarWhereInput[]
  }

  export type NoticiaCreateNestedOneWithoutCategoriasInput = {
    create?: XOR<NoticiaCreateWithoutCategoriasInput, NoticiaUncheckedCreateWithoutCategoriasInput>
    connectOrCreate?: NoticiaCreateOrConnectWithoutCategoriasInput
    connect?: NoticiaWhereUniqueInput
  }

  export type CatNoticiaCreateNestedOneWithoutNoticiasInput = {
    create?: XOR<CatNoticiaCreateWithoutNoticiasInput, CatNoticiaUncheckedCreateWithoutNoticiasInput>
    connectOrCreate?: CatNoticiaCreateOrConnectWithoutNoticiasInput
    connect?: CatNoticiaWhereUniqueInput
  }

  export type NoticiaUpdateOneRequiredWithoutCategoriasNestedInput = {
    create?: XOR<NoticiaCreateWithoutCategoriasInput, NoticiaUncheckedCreateWithoutCategoriasInput>
    connectOrCreate?: NoticiaCreateOrConnectWithoutCategoriasInput
    upsert?: NoticiaUpsertWithoutCategoriasInput
    connect?: NoticiaWhereUniqueInput
    update?: XOR<XOR<NoticiaUpdateToOneWithWhereWithoutCategoriasInput, NoticiaUpdateWithoutCategoriasInput>, NoticiaUncheckedUpdateWithoutCategoriasInput>
  }

  export type CatNoticiaUpdateOneRequiredWithoutNoticiasNestedInput = {
    create?: XOR<CatNoticiaCreateWithoutNoticiasInput, CatNoticiaUncheckedCreateWithoutNoticiasInput>
    connectOrCreate?: CatNoticiaCreateOrConnectWithoutNoticiasInput
    upsert?: CatNoticiaUpsertWithoutNoticiasInput
    connect?: CatNoticiaWhereUniqueInput
    update?: XOR<XOR<CatNoticiaUpdateToOneWithWhereWithoutNoticiasInput, CatNoticiaUpdateWithoutNoticiasInput>, CatNoticiaUncheckedUpdateWithoutNoticiasInput>
  }

  export type UsuarioCreateNestedOneWithoutResenasInput = {
    create?: XOR<UsuarioCreateWithoutResenasInput, UsuarioUncheckedCreateWithoutResenasInput>
    connectOrCreate?: UsuarioCreateOrConnectWithoutResenasInput
    connect?: UsuarioWhereUniqueInput
  }

  export type JuegoCreateNestedOneWithoutResenasInput = {
    create?: XOR<JuegoCreateWithoutResenasInput, JuegoUncheckedCreateWithoutResenasInput>
    connectOrCreate?: JuegoCreateOrConnectWithoutResenasInput
    connect?: JuegoWhereUniqueInput
  }

  export type UsuarioUpdateOneRequiredWithoutResenasNestedInput = {
    create?: XOR<UsuarioCreateWithoutResenasInput, UsuarioUncheckedCreateWithoutResenasInput>
    connectOrCreate?: UsuarioCreateOrConnectWithoutResenasInput
    upsert?: UsuarioUpsertWithoutResenasInput
    connect?: UsuarioWhereUniqueInput
    update?: XOR<XOR<UsuarioUpdateToOneWithWhereWithoutResenasInput, UsuarioUpdateWithoutResenasInput>, UsuarioUncheckedUpdateWithoutResenasInput>
  }

  export type JuegoUpdateOneRequiredWithoutResenasNestedInput = {
    create?: XOR<JuegoCreateWithoutResenasInput, JuegoUncheckedCreateWithoutResenasInput>
    connectOrCreate?: JuegoCreateOrConnectWithoutResenasInput
    upsert?: JuegoUpsertWithoutResenasInput
    connect?: JuegoWhereUniqueInput
    update?: XOR<XOR<JuegoUpdateToOneWithWhereWithoutResenasInput, JuegoUpdateWithoutResenasInput>, JuegoUncheckedUpdateWithoutResenasInput>
  }

  export type UsuarioCreateNestedOneWithoutCarritoInput = {
    create?: XOR<UsuarioCreateWithoutCarritoInput, UsuarioUncheckedCreateWithoutCarritoInput>
    connectOrCreate?: UsuarioCreateOrConnectWithoutCarritoInput
    connect?: UsuarioWhereUniqueInput
  }

  export type JuegoCreateNestedOneWithoutEnCarritosInput = {
    create?: XOR<JuegoCreateWithoutEnCarritosInput, JuegoUncheckedCreateWithoutEnCarritosInput>
    connectOrCreate?: JuegoCreateOrConnectWithoutEnCarritosInput
    connect?: JuegoWhereUniqueInput
  }

  export type UsuarioUpdateOneRequiredWithoutCarritoNestedInput = {
    create?: XOR<UsuarioCreateWithoutCarritoInput, UsuarioUncheckedCreateWithoutCarritoInput>
    connectOrCreate?: UsuarioCreateOrConnectWithoutCarritoInput
    upsert?: UsuarioUpsertWithoutCarritoInput
    connect?: UsuarioWhereUniqueInput
    update?: XOR<XOR<UsuarioUpdateToOneWithWhereWithoutCarritoInput, UsuarioUpdateWithoutCarritoInput>, UsuarioUncheckedUpdateWithoutCarritoInput>
  }

  export type JuegoUpdateOneRequiredWithoutEnCarritosNestedInput = {
    create?: XOR<JuegoCreateWithoutEnCarritosInput, JuegoUncheckedCreateWithoutEnCarritosInput>
    connectOrCreate?: JuegoCreateOrConnectWithoutEnCarritosInput
    upsert?: JuegoUpsertWithoutEnCarritosInput
    connect?: JuegoWhereUniqueInput
    update?: XOR<XOR<JuegoUpdateToOneWithWhereWithoutEnCarritosInput, JuegoUpdateWithoutEnCarritosInput>, JuegoUncheckedUpdateWithoutEnCarritosInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedEnumRolFilter<$PrismaModel = never> = {
    equals?: $Enums.Rol | EnumRolFieldRefInput<$PrismaModel>
    in?: $Enums.Rol[] | ListEnumRolFieldRefInput<$PrismaModel>
    notIn?: $Enums.Rol[] | ListEnumRolFieldRefInput<$PrismaModel>
    not?: NestedEnumRolFilter<$PrismaModel> | $Enums.Rol
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedEnumRolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Rol | EnumRolFieldRefInput<$PrismaModel>
    in?: $Enums.Rol[] | ListEnumRolFieldRefInput<$PrismaModel>
    notIn?: $Enums.Rol[] | ListEnumRolFieldRefInput<$PrismaModel>
    not?: NestedEnumRolWithAggregatesFilter<$PrismaModel> | $Enums.Rol
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRolFilter<$PrismaModel>
    _max?: NestedEnumRolFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedFloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type VentaCreateWithoutUsuarioInput = {
    total: number
    fechaVenta?: Date | string
    juegos?: JuegoXVentaCreateNestedManyWithoutVentaInput
    claves?: ClaveCreateNestedManyWithoutVentaInput
  }

  export type VentaUncheckedCreateWithoutUsuarioInput = {
    id?: number
    total: number
    fechaVenta?: Date | string
    juegos?: JuegoXVentaUncheckedCreateNestedManyWithoutVentaInput
    claves?: ClaveUncheckedCreateNestedManyWithoutVentaInput
  }

  export type VentaCreateOrConnectWithoutUsuarioInput = {
    where: VentaWhereUniqueInput
    create: XOR<VentaCreateWithoutUsuarioInput, VentaUncheckedCreateWithoutUsuarioInput>
  }

  export type VentaCreateManyUsuarioInputEnvelope = {
    data: VentaCreateManyUsuarioInput | VentaCreateManyUsuarioInput[]
    skipDuplicates?: boolean
  }

  export type JuegoXUsuarioCreateWithoutUsuarioInput = {
    juego: JuegoCreateNestedOneWithoutUsuariosInput
  }

  export type JuegoXUsuarioUncheckedCreateWithoutUsuarioInput = {
    id?: number
    juegoId: number
  }

  export type JuegoXUsuarioCreateOrConnectWithoutUsuarioInput = {
    where: JuegoXUsuarioWhereUniqueInput
    create: XOR<JuegoXUsuarioCreateWithoutUsuarioInput, JuegoXUsuarioUncheckedCreateWithoutUsuarioInput>
  }

  export type JuegoXUsuarioCreateManyUsuarioInputEnvelope = {
    data: JuegoXUsuarioCreateManyUsuarioInput | JuegoXUsuarioCreateManyUsuarioInput[]
    skipDuplicates?: boolean
  }

  export type ResenaCreateWithoutUsuarioInput = {
    fechaCreacion?: Date | string
    texto: string
    puntuacion: number
    juego: JuegoCreateNestedOneWithoutResenasInput
  }

  export type ResenaUncheckedCreateWithoutUsuarioInput = {
    id?: number
    juegoId: number
    fechaCreacion?: Date | string
    texto: string
    puntuacion: number
  }

  export type ResenaCreateOrConnectWithoutUsuarioInput = {
    where: ResenaWhereUniqueInput
    create: XOR<ResenaCreateWithoutUsuarioInput, ResenaUncheckedCreateWithoutUsuarioInput>
  }

  export type ResenaCreateManyUsuarioInputEnvelope = {
    data: ResenaCreateManyUsuarioInput | ResenaCreateManyUsuarioInput[]
    skipDuplicates?: boolean
  }

  export type CarritoCreateWithoutUsuarioInput = {
    juego: JuegoCreateNestedOneWithoutEnCarritosInput
  }

  export type CarritoUncheckedCreateWithoutUsuarioInput = {
    id?: number
    juegoId: number
  }

  export type CarritoCreateOrConnectWithoutUsuarioInput = {
    where: CarritoWhereUniqueInput
    create: XOR<CarritoCreateWithoutUsuarioInput, CarritoUncheckedCreateWithoutUsuarioInput>
  }

  export type CarritoCreateManyUsuarioInputEnvelope = {
    data: CarritoCreateManyUsuarioInput | CarritoCreateManyUsuarioInput[]
    skipDuplicates?: boolean
  }

  export type VentaUpsertWithWhereUniqueWithoutUsuarioInput = {
    where: VentaWhereUniqueInput
    update: XOR<VentaUpdateWithoutUsuarioInput, VentaUncheckedUpdateWithoutUsuarioInput>
    create: XOR<VentaCreateWithoutUsuarioInput, VentaUncheckedCreateWithoutUsuarioInput>
  }

  export type VentaUpdateWithWhereUniqueWithoutUsuarioInput = {
    where: VentaWhereUniqueInput
    data: XOR<VentaUpdateWithoutUsuarioInput, VentaUncheckedUpdateWithoutUsuarioInput>
  }

  export type VentaUpdateManyWithWhereWithoutUsuarioInput = {
    where: VentaScalarWhereInput
    data: XOR<VentaUpdateManyMutationInput, VentaUncheckedUpdateManyWithoutUsuarioInput>
  }

  export type VentaScalarWhereInput = {
    AND?: VentaScalarWhereInput | VentaScalarWhereInput[]
    OR?: VentaScalarWhereInput[]
    NOT?: VentaScalarWhereInput | VentaScalarWhereInput[]
    id?: IntFilter<"Venta"> | number
    total?: FloatFilter<"Venta"> | number
    fechaVenta?: DateTimeFilter<"Venta"> | Date | string
    usuarioId?: IntFilter<"Venta"> | number
  }

  export type JuegoXUsuarioUpsertWithWhereUniqueWithoutUsuarioInput = {
    where: JuegoXUsuarioWhereUniqueInput
    update: XOR<JuegoXUsuarioUpdateWithoutUsuarioInput, JuegoXUsuarioUncheckedUpdateWithoutUsuarioInput>
    create: XOR<JuegoXUsuarioCreateWithoutUsuarioInput, JuegoXUsuarioUncheckedCreateWithoutUsuarioInput>
  }

  export type JuegoXUsuarioUpdateWithWhereUniqueWithoutUsuarioInput = {
    where: JuegoXUsuarioWhereUniqueInput
    data: XOR<JuegoXUsuarioUpdateWithoutUsuarioInput, JuegoXUsuarioUncheckedUpdateWithoutUsuarioInput>
  }

  export type JuegoXUsuarioUpdateManyWithWhereWithoutUsuarioInput = {
    where: JuegoXUsuarioScalarWhereInput
    data: XOR<JuegoXUsuarioUpdateManyMutationInput, JuegoXUsuarioUncheckedUpdateManyWithoutUsuarioInput>
  }

  export type JuegoXUsuarioScalarWhereInput = {
    AND?: JuegoXUsuarioScalarWhereInput | JuegoXUsuarioScalarWhereInput[]
    OR?: JuegoXUsuarioScalarWhereInput[]
    NOT?: JuegoXUsuarioScalarWhereInput | JuegoXUsuarioScalarWhereInput[]
    id?: IntFilter<"JuegoXUsuario"> | number
    juegoId?: IntFilter<"JuegoXUsuario"> | number
    usuarioId?: IntFilter<"JuegoXUsuario"> | number
  }

  export type ResenaUpsertWithWhereUniqueWithoutUsuarioInput = {
    where: ResenaWhereUniqueInput
    update: XOR<ResenaUpdateWithoutUsuarioInput, ResenaUncheckedUpdateWithoutUsuarioInput>
    create: XOR<ResenaCreateWithoutUsuarioInput, ResenaUncheckedCreateWithoutUsuarioInput>
  }

  export type ResenaUpdateWithWhereUniqueWithoutUsuarioInput = {
    where: ResenaWhereUniqueInput
    data: XOR<ResenaUpdateWithoutUsuarioInput, ResenaUncheckedUpdateWithoutUsuarioInput>
  }

  export type ResenaUpdateManyWithWhereWithoutUsuarioInput = {
    where: ResenaScalarWhereInput
    data: XOR<ResenaUpdateManyMutationInput, ResenaUncheckedUpdateManyWithoutUsuarioInput>
  }

  export type ResenaScalarWhereInput = {
    AND?: ResenaScalarWhereInput | ResenaScalarWhereInput[]
    OR?: ResenaScalarWhereInput[]
    NOT?: ResenaScalarWhereInput | ResenaScalarWhereInput[]
    id?: IntFilter<"Resena"> | number
    usuarioId?: IntFilter<"Resena"> | number
    juegoId?: IntFilter<"Resena"> | number
    fechaCreacion?: DateTimeFilter<"Resena"> | Date | string
    texto?: StringFilter<"Resena"> | string
    puntuacion?: FloatFilter<"Resena"> | number
  }

  export type CarritoUpsertWithWhereUniqueWithoutUsuarioInput = {
    where: CarritoWhereUniqueInput
    update: XOR<CarritoUpdateWithoutUsuarioInput, CarritoUncheckedUpdateWithoutUsuarioInput>
    create: XOR<CarritoCreateWithoutUsuarioInput, CarritoUncheckedCreateWithoutUsuarioInput>
  }

  export type CarritoUpdateWithWhereUniqueWithoutUsuarioInput = {
    where: CarritoWhereUniqueInput
    data: XOR<CarritoUpdateWithoutUsuarioInput, CarritoUncheckedUpdateWithoutUsuarioInput>
  }

  export type CarritoUpdateManyWithWhereWithoutUsuarioInput = {
    where: CarritoScalarWhereInput
    data: XOR<CarritoUpdateManyMutationInput, CarritoUncheckedUpdateManyWithoutUsuarioInput>
  }

  export type CarritoScalarWhereInput = {
    AND?: CarritoScalarWhereInput | CarritoScalarWhereInput[]
    OR?: CarritoScalarWhereInput[]
    NOT?: CarritoScalarWhereInput | CarritoScalarWhereInput[]
    id?: IntFilter<"Carrito"> | number
    usuarioId?: IntFilter<"Carrito"> | number
    juegoId?: IntFilter<"Carrito"> | number
  }

  export type FotoCreateWithoutJuegoInput = {
    url: string
    noticia?: NoticiaCreateNestedOneWithoutFotoInput
  }

  export type FotoUncheckedCreateWithoutJuegoInput = {
    id?: number
    url: string
    noticia?: NoticiaUncheckedCreateNestedOneWithoutFotoInput
  }

  export type FotoCreateOrConnectWithoutJuegoInput = {
    where: FotoWhereUniqueInput
    create: XOR<FotoCreateWithoutJuegoInput, FotoUncheckedCreateWithoutJuegoInput>
  }

  export type FotoCreateManyJuegoInputEnvelope = {
    data: FotoCreateManyJuegoInput | FotoCreateManyJuegoInput[]
    skipDuplicates?: boolean
  }

  export type CategoriaXJuegoCreateWithoutJuegoInput = {
    categoria: CategoriaCreateNestedOneWithoutJuegosInput
  }

  export type CategoriaXJuegoUncheckedCreateWithoutJuegoInput = {
    id?: number
    categoriaId: number
  }

  export type CategoriaXJuegoCreateOrConnectWithoutJuegoInput = {
    where: CategoriaXJuegoWhereUniqueInput
    create: XOR<CategoriaXJuegoCreateWithoutJuegoInput, CategoriaXJuegoUncheckedCreateWithoutJuegoInput>
  }

  export type CategoriaXJuegoCreateManyJuegoInputEnvelope = {
    data: CategoriaXJuegoCreateManyJuegoInput | CategoriaXJuegoCreateManyJuegoInput[]
    skipDuplicates?: boolean
  }

  export type PlataformaXJuegoCreateWithoutJuegoInput = {
    plataforma: PlataformaCreateNestedOneWithoutJuegosInput
  }

  export type PlataformaXJuegoUncheckedCreateWithoutJuegoInput = {
    id?: number
    plataformaId: number
  }

  export type PlataformaXJuegoCreateOrConnectWithoutJuegoInput = {
    where: PlataformaXJuegoWhereUniqueInput
    create: XOR<PlataformaXJuegoCreateWithoutJuegoInput, PlataformaXJuegoUncheckedCreateWithoutJuegoInput>
  }

  export type PlataformaXJuegoCreateManyJuegoInputEnvelope = {
    data: PlataformaXJuegoCreateManyJuegoInput | PlataformaXJuegoCreateManyJuegoInput[]
    skipDuplicates?: boolean
  }

  export type ClaveCreateWithoutJuegoInput = {
    texto: string
    usada?: boolean
    venta: VentaCreateNestedOneWithoutClavesInput
  }

  export type ClaveUncheckedCreateWithoutJuegoInput = {
    id?: number
    texto: string
    usada?: boolean
    ventaId: number
  }

  export type ClaveCreateOrConnectWithoutJuegoInput = {
    where: ClaveWhereUniqueInput
    create: XOR<ClaveCreateWithoutJuegoInput, ClaveUncheckedCreateWithoutJuegoInput>
  }

  export type ClaveCreateManyJuegoInputEnvelope = {
    data: ClaveCreateManyJuegoInput | ClaveCreateManyJuegoInput[]
    skipDuplicates?: boolean
  }

  export type JuegoXVentaCreateWithoutJuegoInput = {
    venta: VentaCreateNestedOneWithoutJuegosInput
  }

  export type JuegoXVentaUncheckedCreateWithoutJuegoInput = {
    id?: number
    ventaId: number
  }

  export type JuegoXVentaCreateOrConnectWithoutJuegoInput = {
    where: JuegoXVentaWhereUniqueInput
    create: XOR<JuegoXVentaCreateWithoutJuegoInput, JuegoXVentaUncheckedCreateWithoutJuegoInput>
  }

  export type JuegoXVentaCreateManyJuegoInputEnvelope = {
    data: JuegoXVentaCreateManyJuegoInput | JuegoXVentaCreateManyJuegoInput[]
    skipDuplicates?: boolean
  }

  export type JuegoXUsuarioCreateWithoutJuegoInput = {
    usuario: UsuarioCreateNestedOneWithoutJuegosInput
  }

  export type JuegoXUsuarioUncheckedCreateWithoutJuegoInput = {
    id?: number
    usuarioId: number
  }

  export type JuegoXUsuarioCreateOrConnectWithoutJuegoInput = {
    where: JuegoXUsuarioWhereUniqueInput
    create: XOR<JuegoXUsuarioCreateWithoutJuegoInput, JuegoXUsuarioUncheckedCreateWithoutJuegoInput>
  }

  export type JuegoXUsuarioCreateManyJuegoInputEnvelope = {
    data: JuegoXUsuarioCreateManyJuegoInput | JuegoXUsuarioCreateManyJuegoInput[]
    skipDuplicates?: boolean
  }

  export type ResenaCreateWithoutJuegoInput = {
    fechaCreacion?: Date | string
    texto: string
    puntuacion: number
    usuario: UsuarioCreateNestedOneWithoutResenasInput
  }

  export type ResenaUncheckedCreateWithoutJuegoInput = {
    id?: number
    usuarioId: number
    fechaCreacion?: Date | string
    texto: string
    puntuacion: number
  }

  export type ResenaCreateOrConnectWithoutJuegoInput = {
    where: ResenaWhereUniqueInput
    create: XOR<ResenaCreateWithoutJuegoInput, ResenaUncheckedCreateWithoutJuegoInput>
  }

  export type ResenaCreateManyJuegoInputEnvelope = {
    data: ResenaCreateManyJuegoInput | ResenaCreateManyJuegoInput[]
    skipDuplicates?: boolean
  }

  export type CarritoCreateWithoutJuegoInput = {
    usuario: UsuarioCreateNestedOneWithoutCarritoInput
  }

  export type CarritoUncheckedCreateWithoutJuegoInput = {
    id?: number
    usuarioId: number
  }

  export type CarritoCreateOrConnectWithoutJuegoInput = {
    where: CarritoWhereUniqueInput
    create: XOR<CarritoCreateWithoutJuegoInput, CarritoUncheckedCreateWithoutJuegoInput>
  }

  export type CarritoCreateManyJuegoInputEnvelope = {
    data: CarritoCreateManyJuegoInput | CarritoCreateManyJuegoInput[]
    skipDuplicates?: boolean
  }

  export type FotoUpsertWithWhereUniqueWithoutJuegoInput = {
    where: FotoWhereUniqueInput
    update: XOR<FotoUpdateWithoutJuegoInput, FotoUncheckedUpdateWithoutJuegoInput>
    create: XOR<FotoCreateWithoutJuegoInput, FotoUncheckedCreateWithoutJuegoInput>
  }

  export type FotoUpdateWithWhereUniqueWithoutJuegoInput = {
    where: FotoWhereUniqueInput
    data: XOR<FotoUpdateWithoutJuegoInput, FotoUncheckedUpdateWithoutJuegoInput>
  }

  export type FotoUpdateManyWithWhereWithoutJuegoInput = {
    where: FotoScalarWhereInput
    data: XOR<FotoUpdateManyMutationInput, FotoUncheckedUpdateManyWithoutJuegoInput>
  }

  export type FotoScalarWhereInput = {
    AND?: FotoScalarWhereInput | FotoScalarWhereInput[]
    OR?: FotoScalarWhereInput[]
    NOT?: FotoScalarWhereInput | FotoScalarWhereInput[]
    id?: IntFilter<"Foto"> | number
    url?: StringFilter<"Foto"> | string
    juegoId?: IntNullableFilter<"Foto"> | number | null
  }

  export type CategoriaXJuegoUpsertWithWhereUniqueWithoutJuegoInput = {
    where: CategoriaXJuegoWhereUniqueInput
    update: XOR<CategoriaXJuegoUpdateWithoutJuegoInput, CategoriaXJuegoUncheckedUpdateWithoutJuegoInput>
    create: XOR<CategoriaXJuegoCreateWithoutJuegoInput, CategoriaXJuegoUncheckedCreateWithoutJuegoInput>
  }

  export type CategoriaXJuegoUpdateWithWhereUniqueWithoutJuegoInput = {
    where: CategoriaXJuegoWhereUniqueInput
    data: XOR<CategoriaXJuegoUpdateWithoutJuegoInput, CategoriaXJuegoUncheckedUpdateWithoutJuegoInput>
  }

  export type CategoriaXJuegoUpdateManyWithWhereWithoutJuegoInput = {
    where: CategoriaXJuegoScalarWhereInput
    data: XOR<CategoriaXJuegoUpdateManyMutationInput, CategoriaXJuegoUncheckedUpdateManyWithoutJuegoInput>
  }

  export type CategoriaXJuegoScalarWhereInput = {
    AND?: CategoriaXJuegoScalarWhereInput | CategoriaXJuegoScalarWhereInput[]
    OR?: CategoriaXJuegoScalarWhereInput[]
    NOT?: CategoriaXJuegoScalarWhereInput | CategoriaXJuegoScalarWhereInput[]
    id?: IntFilter<"CategoriaXJuego"> | number
    juegoId?: IntFilter<"CategoriaXJuego"> | number
    categoriaId?: IntFilter<"CategoriaXJuego"> | number
  }

  export type PlataformaXJuegoUpsertWithWhereUniqueWithoutJuegoInput = {
    where: PlataformaXJuegoWhereUniqueInput
    update: XOR<PlataformaXJuegoUpdateWithoutJuegoInput, PlataformaXJuegoUncheckedUpdateWithoutJuegoInput>
    create: XOR<PlataformaXJuegoCreateWithoutJuegoInput, PlataformaXJuegoUncheckedCreateWithoutJuegoInput>
  }

  export type PlataformaXJuegoUpdateWithWhereUniqueWithoutJuegoInput = {
    where: PlataformaXJuegoWhereUniqueInput
    data: XOR<PlataformaXJuegoUpdateWithoutJuegoInput, PlataformaXJuegoUncheckedUpdateWithoutJuegoInput>
  }

  export type PlataformaXJuegoUpdateManyWithWhereWithoutJuegoInput = {
    where: PlataformaXJuegoScalarWhereInput
    data: XOR<PlataformaXJuegoUpdateManyMutationInput, PlataformaXJuegoUncheckedUpdateManyWithoutJuegoInput>
  }

  export type PlataformaXJuegoScalarWhereInput = {
    AND?: PlataformaXJuegoScalarWhereInput | PlataformaXJuegoScalarWhereInput[]
    OR?: PlataformaXJuegoScalarWhereInput[]
    NOT?: PlataformaXJuegoScalarWhereInput | PlataformaXJuegoScalarWhereInput[]
    id?: IntFilter<"PlataformaXJuego"> | number
    juegoId?: IntFilter<"PlataformaXJuego"> | number
    plataformaId?: IntFilter<"PlataformaXJuego"> | number
  }

  export type ClaveUpsertWithWhereUniqueWithoutJuegoInput = {
    where: ClaveWhereUniqueInput
    update: XOR<ClaveUpdateWithoutJuegoInput, ClaveUncheckedUpdateWithoutJuegoInput>
    create: XOR<ClaveCreateWithoutJuegoInput, ClaveUncheckedCreateWithoutJuegoInput>
  }

  export type ClaveUpdateWithWhereUniqueWithoutJuegoInput = {
    where: ClaveWhereUniqueInput
    data: XOR<ClaveUpdateWithoutJuegoInput, ClaveUncheckedUpdateWithoutJuegoInput>
  }

  export type ClaveUpdateManyWithWhereWithoutJuegoInput = {
    where: ClaveScalarWhereInput
    data: XOR<ClaveUpdateManyMutationInput, ClaveUncheckedUpdateManyWithoutJuegoInput>
  }

  export type ClaveScalarWhereInput = {
    AND?: ClaveScalarWhereInput | ClaveScalarWhereInput[]
    OR?: ClaveScalarWhereInput[]
    NOT?: ClaveScalarWhereInput | ClaveScalarWhereInput[]
    id?: IntFilter<"Clave"> | number
    texto?: StringFilter<"Clave"> | string
    usada?: BoolFilter<"Clave"> | boolean
    juegoId?: IntFilter<"Clave"> | number
    ventaId?: IntFilter<"Clave"> | number
  }

  export type JuegoXVentaUpsertWithWhereUniqueWithoutJuegoInput = {
    where: JuegoXVentaWhereUniqueInput
    update: XOR<JuegoXVentaUpdateWithoutJuegoInput, JuegoXVentaUncheckedUpdateWithoutJuegoInput>
    create: XOR<JuegoXVentaCreateWithoutJuegoInput, JuegoXVentaUncheckedCreateWithoutJuegoInput>
  }

  export type JuegoXVentaUpdateWithWhereUniqueWithoutJuegoInput = {
    where: JuegoXVentaWhereUniqueInput
    data: XOR<JuegoXVentaUpdateWithoutJuegoInput, JuegoXVentaUncheckedUpdateWithoutJuegoInput>
  }

  export type JuegoXVentaUpdateManyWithWhereWithoutJuegoInput = {
    where: JuegoXVentaScalarWhereInput
    data: XOR<JuegoXVentaUpdateManyMutationInput, JuegoXVentaUncheckedUpdateManyWithoutJuegoInput>
  }

  export type JuegoXVentaScalarWhereInput = {
    AND?: JuegoXVentaScalarWhereInput | JuegoXVentaScalarWhereInput[]
    OR?: JuegoXVentaScalarWhereInput[]
    NOT?: JuegoXVentaScalarWhereInput | JuegoXVentaScalarWhereInput[]
    id?: IntFilter<"JuegoXVenta"> | number
    juegoId?: IntFilter<"JuegoXVenta"> | number
    ventaId?: IntFilter<"JuegoXVenta"> | number
  }

  export type JuegoXUsuarioUpsertWithWhereUniqueWithoutJuegoInput = {
    where: JuegoXUsuarioWhereUniqueInput
    update: XOR<JuegoXUsuarioUpdateWithoutJuegoInput, JuegoXUsuarioUncheckedUpdateWithoutJuegoInput>
    create: XOR<JuegoXUsuarioCreateWithoutJuegoInput, JuegoXUsuarioUncheckedCreateWithoutJuegoInput>
  }

  export type JuegoXUsuarioUpdateWithWhereUniqueWithoutJuegoInput = {
    where: JuegoXUsuarioWhereUniqueInput
    data: XOR<JuegoXUsuarioUpdateWithoutJuegoInput, JuegoXUsuarioUncheckedUpdateWithoutJuegoInput>
  }

  export type JuegoXUsuarioUpdateManyWithWhereWithoutJuegoInput = {
    where: JuegoXUsuarioScalarWhereInput
    data: XOR<JuegoXUsuarioUpdateManyMutationInput, JuegoXUsuarioUncheckedUpdateManyWithoutJuegoInput>
  }

  export type ResenaUpsertWithWhereUniqueWithoutJuegoInput = {
    where: ResenaWhereUniqueInput
    update: XOR<ResenaUpdateWithoutJuegoInput, ResenaUncheckedUpdateWithoutJuegoInput>
    create: XOR<ResenaCreateWithoutJuegoInput, ResenaUncheckedCreateWithoutJuegoInput>
  }

  export type ResenaUpdateWithWhereUniqueWithoutJuegoInput = {
    where: ResenaWhereUniqueInput
    data: XOR<ResenaUpdateWithoutJuegoInput, ResenaUncheckedUpdateWithoutJuegoInput>
  }

  export type ResenaUpdateManyWithWhereWithoutJuegoInput = {
    where: ResenaScalarWhereInput
    data: XOR<ResenaUpdateManyMutationInput, ResenaUncheckedUpdateManyWithoutJuegoInput>
  }

  export type CarritoUpsertWithWhereUniqueWithoutJuegoInput = {
    where: CarritoWhereUniqueInput
    update: XOR<CarritoUpdateWithoutJuegoInput, CarritoUncheckedUpdateWithoutJuegoInput>
    create: XOR<CarritoCreateWithoutJuegoInput, CarritoUncheckedCreateWithoutJuegoInput>
  }

  export type CarritoUpdateWithWhereUniqueWithoutJuegoInput = {
    where: CarritoWhereUniqueInput
    data: XOR<CarritoUpdateWithoutJuegoInput, CarritoUncheckedUpdateWithoutJuegoInput>
  }

  export type CarritoUpdateManyWithWhereWithoutJuegoInput = {
    where: CarritoScalarWhereInput
    data: XOR<CarritoUpdateManyMutationInput, CarritoUncheckedUpdateManyWithoutJuegoInput>
  }

  export type FotoCreateWithoutNoticiaInput = {
    url: string
    juego?: JuegoCreateNestedOneWithoutFotosInput
  }

  export type FotoUncheckedCreateWithoutNoticiaInput = {
    id?: number
    url: string
    juegoId?: number | null
  }

  export type FotoCreateOrConnectWithoutNoticiaInput = {
    where: FotoWhereUniqueInput
    create: XOR<FotoCreateWithoutNoticiaInput, FotoUncheckedCreateWithoutNoticiaInput>
  }

  export type CatNoticiaXNoticiaCreateWithoutNoticiaInput = {
    catNoticia: CatNoticiaCreateNestedOneWithoutNoticiasInput
  }

  export type CatNoticiaXNoticiaUncheckedCreateWithoutNoticiaInput = {
    id?: number
    catNoticiaId: number
  }

  export type CatNoticiaXNoticiaCreateOrConnectWithoutNoticiaInput = {
    where: CatNoticiaXNoticiaWhereUniqueInput
    create: XOR<CatNoticiaXNoticiaCreateWithoutNoticiaInput, CatNoticiaXNoticiaUncheckedCreateWithoutNoticiaInput>
  }

  export type CatNoticiaXNoticiaCreateManyNoticiaInputEnvelope = {
    data: CatNoticiaXNoticiaCreateManyNoticiaInput | CatNoticiaXNoticiaCreateManyNoticiaInput[]
    skipDuplicates?: boolean
  }

  export type FotoUpsertWithoutNoticiaInput = {
    update: XOR<FotoUpdateWithoutNoticiaInput, FotoUncheckedUpdateWithoutNoticiaInput>
    create: XOR<FotoCreateWithoutNoticiaInput, FotoUncheckedCreateWithoutNoticiaInput>
    where?: FotoWhereInput
  }

  export type FotoUpdateToOneWithWhereWithoutNoticiaInput = {
    where?: FotoWhereInput
    data: XOR<FotoUpdateWithoutNoticiaInput, FotoUncheckedUpdateWithoutNoticiaInput>
  }

  export type FotoUpdateWithoutNoticiaInput = {
    url?: StringFieldUpdateOperationsInput | string
    juego?: JuegoUpdateOneWithoutFotosNestedInput
  }

  export type FotoUncheckedUpdateWithoutNoticiaInput = {
    id?: IntFieldUpdateOperationsInput | number
    url?: StringFieldUpdateOperationsInput | string
    juegoId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type CatNoticiaXNoticiaUpsertWithWhereUniqueWithoutNoticiaInput = {
    where: CatNoticiaXNoticiaWhereUniqueInput
    update: XOR<CatNoticiaXNoticiaUpdateWithoutNoticiaInput, CatNoticiaXNoticiaUncheckedUpdateWithoutNoticiaInput>
    create: XOR<CatNoticiaXNoticiaCreateWithoutNoticiaInput, CatNoticiaXNoticiaUncheckedCreateWithoutNoticiaInput>
  }

  export type CatNoticiaXNoticiaUpdateWithWhereUniqueWithoutNoticiaInput = {
    where: CatNoticiaXNoticiaWhereUniqueInput
    data: XOR<CatNoticiaXNoticiaUpdateWithoutNoticiaInput, CatNoticiaXNoticiaUncheckedUpdateWithoutNoticiaInput>
  }

  export type CatNoticiaXNoticiaUpdateManyWithWhereWithoutNoticiaInput = {
    where: CatNoticiaXNoticiaScalarWhereInput
    data: XOR<CatNoticiaXNoticiaUpdateManyMutationInput, CatNoticiaXNoticiaUncheckedUpdateManyWithoutNoticiaInput>
  }

  export type CatNoticiaXNoticiaScalarWhereInput = {
    AND?: CatNoticiaXNoticiaScalarWhereInput | CatNoticiaXNoticiaScalarWhereInput[]
    OR?: CatNoticiaXNoticiaScalarWhereInput[]
    NOT?: CatNoticiaXNoticiaScalarWhereInput | CatNoticiaXNoticiaScalarWhereInput[]
    id?: IntFilter<"CatNoticiaXNoticia"> | number
    noticiaId?: IntFilter<"CatNoticiaXNoticia"> | number
    catNoticiaId?: IntFilter<"CatNoticiaXNoticia"> | number
  }

  export type JuegoCreateWithoutFotosInput = {
    titulo: string
    descripcion: string
    precio: number
    porcentajeOferta?: number | null
    trailerUrl?: string | null
    rating?: number | null
    fechaLanzamiento: Date | string
    fechaSubida?: Date | string
    slug: string
    reviewJuego?: string | null
    categorias?: CategoriaXJuegoCreateNestedManyWithoutJuegoInput
    plataformas?: PlataformaXJuegoCreateNestedManyWithoutJuegoInput
    claves?: ClaveCreateNestedManyWithoutJuegoInput
    ventas?: JuegoXVentaCreateNestedManyWithoutJuegoInput
    usuarios?: JuegoXUsuarioCreateNestedManyWithoutJuegoInput
    resenas?: ResenaCreateNestedManyWithoutJuegoInput
    enCarritos?: CarritoCreateNestedManyWithoutJuegoInput
  }

  export type JuegoUncheckedCreateWithoutFotosInput = {
    id?: number
    titulo: string
    descripcion: string
    precio: number
    porcentajeOferta?: number | null
    trailerUrl?: string | null
    rating?: number | null
    fechaLanzamiento: Date | string
    fechaSubida?: Date | string
    slug: string
    reviewJuego?: string | null
    categorias?: CategoriaXJuegoUncheckedCreateNestedManyWithoutJuegoInput
    plataformas?: PlataformaXJuegoUncheckedCreateNestedManyWithoutJuegoInput
    claves?: ClaveUncheckedCreateNestedManyWithoutJuegoInput
    ventas?: JuegoXVentaUncheckedCreateNestedManyWithoutJuegoInput
    usuarios?: JuegoXUsuarioUncheckedCreateNestedManyWithoutJuegoInput
    resenas?: ResenaUncheckedCreateNestedManyWithoutJuegoInput
    enCarritos?: CarritoUncheckedCreateNestedManyWithoutJuegoInput
  }

  export type JuegoCreateOrConnectWithoutFotosInput = {
    where: JuegoWhereUniqueInput
    create: XOR<JuegoCreateWithoutFotosInput, JuegoUncheckedCreateWithoutFotosInput>
  }

  export type NoticiaCreateWithoutFotoInput = {
    titulo: string
    slug: string
    tiempoLectura: number
    fechaPub: Date | string
    texto: string
    resumen: string
    categorias?: CatNoticiaXNoticiaCreateNestedManyWithoutNoticiaInput
  }

  export type NoticiaUncheckedCreateWithoutFotoInput = {
    id?: number
    titulo: string
    slug: string
    tiempoLectura: number
    fechaPub: Date | string
    texto: string
    resumen: string
    categorias?: CatNoticiaXNoticiaUncheckedCreateNestedManyWithoutNoticiaInput
  }

  export type NoticiaCreateOrConnectWithoutFotoInput = {
    where: NoticiaWhereUniqueInput
    create: XOR<NoticiaCreateWithoutFotoInput, NoticiaUncheckedCreateWithoutFotoInput>
  }

  export type JuegoUpsertWithoutFotosInput = {
    update: XOR<JuegoUpdateWithoutFotosInput, JuegoUncheckedUpdateWithoutFotosInput>
    create: XOR<JuegoCreateWithoutFotosInput, JuegoUncheckedCreateWithoutFotosInput>
    where?: JuegoWhereInput
  }

  export type JuegoUpdateToOneWithWhereWithoutFotosInput = {
    where?: JuegoWhereInput
    data: XOR<JuegoUpdateWithoutFotosInput, JuegoUncheckedUpdateWithoutFotosInput>
  }

  export type JuegoUpdateWithoutFotosInput = {
    titulo?: StringFieldUpdateOperationsInput | string
    descripcion?: StringFieldUpdateOperationsInput | string
    precio?: FloatFieldUpdateOperationsInput | number
    porcentajeOferta?: NullableFloatFieldUpdateOperationsInput | number | null
    trailerUrl?: NullableStringFieldUpdateOperationsInput | string | null
    rating?: NullableFloatFieldUpdateOperationsInput | number | null
    fechaLanzamiento?: DateTimeFieldUpdateOperationsInput | Date | string
    fechaSubida?: DateTimeFieldUpdateOperationsInput | Date | string
    slug?: StringFieldUpdateOperationsInput | string
    reviewJuego?: NullableStringFieldUpdateOperationsInput | string | null
    categorias?: CategoriaXJuegoUpdateManyWithoutJuegoNestedInput
    plataformas?: PlataformaXJuegoUpdateManyWithoutJuegoNestedInput
    claves?: ClaveUpdateManyWithoutJuegoNestedInput
    ventas?: JuegoXVentaUpdateManyWithoutJuegoNestedInput
    usuarios?: JuegoXUsuarioUpdateManyWithoutJuegoNestedInput
    resenas?: ResenaUpdateManyWithoutJuegoNestedInput
    enCarritos?: CarritoUpdateManyWithoutJuegoNestedInput
  }

  export type JuegoUncheckedUpdateWithoutFotosInput = {
    id?: IntFieldUpdateOperationsInput | number
    titulo?: StringFieldUpdateOperationsInput | string
    descripcion?: StringFieldUpdateOperationsInput | string
    precio?: FloatFieldUpdateOperationsInput | number
    porcentajeOferta?: NullableFloatFieldUpdateOperationsInput | number | null
    trailerUrl?: NullableStringFieldUpdateOperationsInput | string | null
    rating?: NullableFloatFieldUpdateOperationsInput | number | null
    fechaLanzamiento?: DateTimeFieldUpdateOperationsInput | Date | string
    fechaSubida?: DateTimeFieldUpdateOperationsInput | Date | string
    slug?: StringFieldUpdateOperationsInput | string
    reviewJuego?: NullableStringFieldUpdateOperationsInput | string | null
    categorias?: CategoriaXJuegoUncheckedUpdateManyWithoutJuegoNestedInput
    plataformas?: PlataformaXJuegoUncheckedUpdateManyWithoutJuegoNestedInput
    claves?: ClaveUncheckedUpdateManyWithoutJuegoNestedInput
    ventas?: JuegoXVentaUncheckedUpdateManyWithoutJuegoNestedInput
    usuarios?: JuegoXUsuarioUncheckedUpdateManyWithoutJuegoNestedInput
    resenas?: ResenaUncheckedUpdateManyWithoutJuegoNestedInput
    enCarritos?: CarritoUncheckedUpdateManyWithoutJuegoNestedInput
  }

  export type NoticiaUpsertWithoutFotoInput = {
    update: XOR<NoticiaUpdateWithoutFotoInput, NoticiaUncheckedUpdateWithoutFotoInput>
    create: XOR<NoticiaCreateWithoutFotoInput, NoticiaUncheckedCreateWithoutFotoInput>
    where?: NoticiaWhereInput
  }

  export type NoticiaUpdateToOneWithWhereWithoutFotoInput = {
    where?: NoticiaWhereInput
    data: XOR<NoticiaUpdateWithoutFotoInput, NoticiaUncheckedUpdateWithoutFotoInput>
  }

  export type NoticiaUpdateWithoutFotoInput = {
    titulo?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    tiempoLectura?: IntFieldUpdateOperationsInput | number
    fechaPub?: DateTimeFieldUpdateOperationsInput | Date | string
    texto?: StringFieldUpdateOperationsInput | string
    resumen?: StringFieldUpdateOperationsInput | string
    categorias?: CatNoticiaXNoticiaUpdateManyWithoutNoticiaNestedInput
  }

  export type NoticiaUncheckedUpdateWithoutFotoInput = {
    id?: IntFieldUpdateOperationsInput | number
    titulo?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    tiempoLectura?: IntFieldUpdateOperationsInput | number
    fechaPub?: DateTimeFieldUpdateOperationsInput | Date | string
    texto?: StringFieldUpdateOperationsInput | string
    resumen?: StringFieldUpdateOperationsInput | string
    categorias?: CatNoticiaXNoticiaUncheckedUpdateManyWithoutNoticiaNestedInput
  }

  export type CategoriaXJuegoCreateWithoutCategoriaInput = {
    juego: JuegoCreateNestedOneWithoutCategoriasInput
  }

  export type CategoriaXJuegoUncheckedCreateWithoutCategoriaInput = {
    id?: number
    juegoId: number
  }

  export type CategoriaXJuegoCreateOrConnectWithoutCategoriaInput = {
    where: CategoriaXJuegoWhereUniqueInput
    create: XOR<CategoriaXJuegoCreateWithoutCategoriaInput, CategoriaXJuegoUncheckedCreateWithoutCategoriaInput>
  }

  export type CategoriaXJuegoCreateManyCategoriaInputEnvelope = {
    data: CategoriaXJuegoCreateManyCategoriaInput | CategoriaXJuegoCreateManyCategoriaInput[]
    skipDuplicates?: boolean
  }

  export type CategoriaXJuegoUpsertWithWhereUniqueWithoutCategoriaInput = {
    where: CategoriaXJuegoWhereUniqueInput
    update: XOR<CategoriaXJuegoUpdateWithoutCategoriaInput, CategoriaXJuegoUncheckedUpdateWithoutCategoriaInput>
    create: XOR<CategoriaXJuegoCreateWithoutCategoriaInput, CategoriaXJuegoUncheckedCreateWithoutCategoriaInput>
  }

  export type CategoriaXJuegoUpdateWithWhereUniqueWithoutCategoriaInput = {
    where: CategoriaXJuegoWhereUniqueInput
    data: XOR<CategoriaXJuegoUpdateWithoutCategoriaInput, CategoriaXJuegoUncheckedUpdateWithoutCategoriaInput>
  }

  export type CategoriaXJuegoUpdateManyWithWhereWithoutCategoriaInput = {
    where: CategoriaXJuegoScalarWhereInput
    data: XOR<CategoriaXJuegoUpdateManyMutationInput, CategoriaXJuegoUncheckedUpdateManyWithoutCategoriaInput>
  }

  export type PlataformaXJuegoCreateWithoutPlataformaInput = {
    juego: JuegoCreateNestedOneWithoutPlataformasInput
  }

  export type PlataformaXJuegoUncheckedCreateWithoutPlataformaInput = {
    id?: number
    juegoId: number
  }

  export type PlataformaXJuegoCreateOrConnectWithoutPlataformaInput = {
    where: PlataformaXJuegoWhereUniqueInput
    create: XOR<PlataformaXJuegoCreateWithoutPlataformaInput, PlataformaXJuegoUncheckedCreateWithoutPlataformaInput>
  }

  export type PlataformaXJuegoCreateManyPlataformaInputEnvelope = {
    data: PlataformaXJuegoCreateManyPlataformaInput | PlataformaXJuegoCreateManyPlataformaInput[]
    skipDuplicates?: boolean
  }

  export type PlataformaXJuegoUpsertWithWhereUniqueWithoutPlataformaInput = {
    where: PlataformaXJuegoWhereUniqueInput
    update: XOR<PlataformaXJuegoUpdateWithoutPlataformaInput, PlataformaXJuegoUncheckedUpdateWithoutPlataformaInput>
    create: XOR<PlataformaXJuegoCreateWithoutPlataformaInput, PlataformaXJuegoUncheckedCreateWithoutPlataformaInput>
  }

  export type PlataformaXJuegoUpdateWithWhereUniqueWithoutPlataformaInput = {
    where: PlataformaXJuegoWhereUniqueInput
    data: XOR<PlataformaXJuegoUpdateWithoutPlataformaInput, PlataformaXJuegoUncheckedUpdateWithoutPlataformaInput>
  }

  export type PlataformaXJuegoUpdateManyWithWhereWithoutPlataformaInput = {
    where: PlataformaXJuegoScalarWhereInput
    data: XOR<PlataformaXJuegoUpdateManyMutationInput, PlataformaXJuegoUncheckedUpdateManyWithoutPlataformaInput>
  }

  export type UsuarioCreateWithoutVentasInput = {
    correo: string
    contrasena: string
    rol?: $Enums.Rol
    nombre: string
    apellido: string
    juegos?: JuegoXUsuarioCreateNestedManyWithoutUsuarioInput
    resenas?: ResenaCreateNestedManyWithoutUsuarioInput
    carrito?: CarritoCreateNestedManyWithoutUsuarioInput
  }

  export type UsuarioUncheckedCreateWithoutVentasInput = {
    id?: number
    correo: string
    contrasena: string
    rol?: $Enums.Rol
    nombre: string
    apellido: string
    juegos?: JuegoXUsuarioUncheckedCreateNestedManyWithoutUsuarioInput
    resenas?: ResenaUncheckedCreateNestedManyWithoutUsuarioInput
    carrito?: CarritoUncheckedCreateNestedManyWithoutUsuarioInput
  }

  export type UsuarioCreateOrConnectWithoutVentasInput = {
    where: UsuarioWhereUniqueInput
    create: XOR<UsuarioCreateWithoutVentasInput, UsuarioUncheckedCreateWithoutVentasInput>
  }

  export type JuegoXVentaCreateWithoutVentaInput = {
    juego: JuegoCreateNestedOneWithoutVentasInput
  }

  export type JuegoXVentaUncheckedCreateWithoutVentaInput = {
    id?: number
    juegoId: number
  }

  export type JuegoXVentaCreateOrConnectWithoutVentaInput = {
    where: JuegoXVentaWhereUniqueInput
    create: XOR<JuegoXVentaCreateWithoutVentaInput, JuegoXVentaUncheckedCreateWithoutVentaInput>
  }

  export type JuegoXVentaCreateManyVentaInputEnvelope = {
    data: JuegoXVentaCreateManyVentaInput | JuegoXVentaCreateManyVentaInput[]
    skipDuplicates?: boolean
  }

  export type ClaveCreateWithoutVentaInput = {
    texto: string
    usada?: boolean
    juego: JuegoCreateNestedOneWithoutClavesInput
  }

  export type ClaveUncheckedCreateWithoutVentaInput = {
    id?: number
    texto: string
    usada?: boolean
    juegoId: number
  }

  export type ClaveCreateOrConnectWithoutVentaInput = {
    where: ClaveWhereUniqueInput
    create: XOR<ClaveCreateWithoutVentaInput, ClaveUncheckedCreateWithoutVentaInput>
  }

  export type ClaveCreateManyVentaInputEnvelope = {
    data: ClaveCreateManyVentaInput | ClaveCreateManyVentaInput[]
    skipDuplicates?: boolean
  }

  export type UsuarioUpsertWithoutVentasInput = {
    update: XOR<UsuarioUpdateWithoutVentasInput, UsuarioUncheckedUpdateWithoutVentasInput>
    create: XOR<UsuarioCreateWithoutVentasInput, UsuarioUncheckedCreateWithoutVentasInput>
    where?: UsuarioWhereInput
  }

  export type UsuarioUpdateToOneWithWhereWithoutVentasInput = {
    where?: UsuarioWhereInput
    data: XOR<UsuarioUpdateWithoutVentasInput, UsuarioUncheckedUpdateWithoutVentasInput>
  }

  export type UsuarioUpdateWithoutVentasInput = {
    correo?: StringFieldUpdateOperationsInput | string
    contrasena?: StringFieldUpdateOperationsInput | string
    rol?: EnumRolFieldUpdateOperationsInput | $Enums.Rol
    nombre?: StringFieldUpdateOperationsInput | string
    apellido?: StringFieldUpdateOperationsInput | string
    juegos?: JuegoXUsuarioUpdateManyWithoutUsuarioNestedInput
    resenas?: ResenaUpdateManyWithoutUsuarioNestedInput
    carrito?: CarritoUpdateManyWithoutUsuarioNestedInput
  }

  export type UsuarioUncheckedUpdateWithoutVentasInput = {
    id?: IntFieldUpdateOperationsInput | number
    correo?: StringFieldUpdateOperationsInput | string
    contrasena?: StringFieldUpdateOperationsInput | string
    rol?: EnumRolFieldUpdateOperationsInput | $Enums.Rol
    nombre?: StringFieldUpdateOperationsInput | string
    apellido?: StringFieldUpdateOperationsInput | string
    juegos?: JuegoXUsuarioUncheckedUpdateManyWithoutUsuarioNestedInput
    resenas?: ResenaUncheckedUpdateManyWithoutUsuarioNestedInput
    carrito?: CarritoUncheckedUpdateManyWithoutUsuarioNestedInput
  }

  export type JuegoXVentaUpsertWithWhereUniqueWithoutVentaInput = {
    where: JuegoXVentaWhereUniqueInput
    update: XOR<JuegoXVentaUpdateWithoutVentaInput, JuegoXVentaUncheckedUpdateWithoutVentaInput>
    create: XOR<JuegoXVentaCreateWithoutVentaInput, JuegoXVentaUncheckedCreateWithoutVentaInput>
  }

  export type JuegoXVentaUpdateWithWhereUniqueWithoutVentaInput = {
    where: JuegoXVentaWhereUniqueInput
    data: XOR<JuegoXVentaUpdateWithoutVentaInput, JuegoXVentaUncheckedUpdateWithoutVentaInput>
  }

  export type JuegoXVentaUpdateManyWithWhereWithoutVentaInput = {
    where: JuegoXVentaScalarWhereInput
    data: XOR<JuegoXVentaUpdateManyMutationInput, JuegoXVentaUncheckedUpdateManyWithoutVentaInput>
  }

  export type ClaveUpsertWithWhereUniqueWithoutVentaInput = {
    where: ClaveWhereUniqueInput
    update: XOR<ClaveUpdateWithoutVentaInput, ClaveUncheckedUpdateWithoutVentaInput>
    create: XOR<ClaveCreateWithoutVentaInput, ClaveUncheckedCreateWithoutVentaInput>
  }

  export type ClaveUpdateWithWhereUniqueWithoutVentaInput = {
    where: ClaveWhereUniqueInput
    data: XOR<ClaveUpdateWithoutVentaInput, ClaveUncheckedUpdateWithoutVentaInput>
  }

  export type ClaveUpdateManyWithWhereWithoutVentaInput = {
    where: ClaveScalarWhereInput
    data: XOR<ClaveUpdateManyMutationInput, ClaveUncheckedUpdateManyWithoutVentaInput>
  }

  export type JuegoCreateWithoutVentasInput = {
    titulo: string
    descripcion: string
    precio: number
    porcentajeOferta?: number | null
    trailerUrl?: string | null
    rating?: number | null
    fechaLanzamiento: Date | string
    fechaSubida?: Date | string
    slug: string
    reviewJuego?: string | null
    fotos?: FotoCreateNestedManyWithoutJuegoInput
    categorias?: CategoriaXJuegoCreateNestedManyWithoutJuegoInput
    plataformas?: PlataformaXJuegoCreateNestedManyWithoutJuegoInput
    claves?: ClaveCreateNestedManyWithoutJuegoInput
    usuarios?: JuegoXUsuarioCreateNestedManyWithoutJuegoInput
    resenas?: ResenaCreateNestedManyWithoutJuegoInput
    enCarritos?: CarritoCreateNestedManyWithoutJuegoInput
  }

  export type JuegoUncheckedCreateWithoutVentasInput = {
    id?: number
    titulo: string
    descripcion: string
    precio: number
    porcentajeOferta?: number | null
    trailerUrl?: string | null
    rating?: number | null
    fechaLanzamiento: Date | string
    fechaSubida?: Date | string
    slug: string
    reviewJuego?: string | null
    fotos?: FotoUncheckedCreateNestedManyWithoutJuegoInput
    categorias?: CategoriaXJuegoUncheckedCreateNestedManyWithoutJuegoInput
    plataformas?: PlataformaXJuegoUncheckedCreateNestedManyWithoutJuegoInput
    claves?: ClaveUncheckedCreateNestedManyWithoutJuegoInput
    usuarios?: JuegoXUsuarioUncheckedCreateNestedManyWithoutJuegoInput
    resenas?: ResenaUncheckedCreateNestedManyWithoutJuegoInput
    enCarritos?: CarritoUncheckedCreateNestedManyWithoutJuegoInput
  }

  export type JuegoCreateOrConnectWithoutVentasInput = {
    where: JuegoWhereUniqueInput
    create: XOR<JuegoCreateWithoutVentasInput, JuegoUncheckedCreateWithoutVentasInput>
  }

  export type VentaCreateWithoutJuegosInput = {
    total: number
    fechaVenta?: Date | string
    usuario: UsuarioCreateNestedOneWithoutVentasInput
    claves?: ClaveCreateNestedManyWithoutVentaInput
  }

  export type VentaUncheckedCreateWithoutJuegosInput = {
    id?: number
    total: number
    fechaVenta?: Date | string
    usuarioId: number
    claves?: ClaveUncheckedCreateNestedManyWithoutVentaInput
  }

  export type VentaCreateOrConnectWithoutJuegosInput = {
    where: VentaWhereUniqueInput
    create: XOR<VentaCreateWithoutJuegosInput, VentaUncheckedCreateWithoutJuegosInput>
  }

  export type JuegoUpsertWithoutVentasInput = {
    update: XOR<JuegoUpdateWithoutVentasInput, JuegoUncheckedUpdateWithoutVentasInput>
    create: XOR<JuegoCreateWithoutVentasInput, JuegoUncheckedCreateWithoutVentasInput>
    where?: JuegoWhereInput
  }

  export type JuegoUpdateToOneWithWhereWithoutVentasInput = {
    where?: JuegoWhereInput
    data: XOR<JuegoUpdateWithoutVentasInput, JuegoUncheckedUpdateWithoutVentasInput>
  }

  export type JuegoUpdateWithoutVentasInput = {
    titulo?: StringFieldUpdateOperationsInput | string
    descripcion?: StringFieldUpdateOperationsInput | string
    precio?: FloatFieldUpdateOperationsInput | number
    porcentajeOferta?: NullableFloatFieldUpdateOperationsInput | number | null
    trailerUrl?: NullableStringFieldUpdateOperationsInput | string | null
    rating?: NullableFloatFieldUpdateOperationsInput | number | null
    fechaLanzamiento?: DateTimeFieldUpdateOperationsInput | Date | string
    fechaSubida?: DateTimeFieldUpdateOperationsInput | Date | string
    slug?: StringFieldUpdateOperationsInput | string
    reviewJuego?: NullableStringFieldUpdateOperationsInput | string | null
    fotos?: FotoUpdateManyWithoutJuegoNestedInput
    categorias?: CategoriaXJuegoUpdateManyWithoutJuegoNestedInput
    plataformas?: PlataformaXJuegoUpdateManyWithoutJuegoNestedInput
    claves?: ClaveUpdateManyWithoutJuegoNestedInput
    usuarios?: JuegoXUsuarioUpdateManyWithoutJuegoNestedInput
    resenas?: ResenaUpdateManyWithoutJuegoNestedInput
    enCarritos?: CarritoUpdateManyWithoutJuegoNestedInput
  }

  export type JuegoUncheckedUpdateWithoutVentasInput = {
    id?: IntFieldUpdateOperationsInput | number
    titulo?: StringFieldUpdateOperationsInput | string
    descripcion?: StringFieldUpdateOperationsInput | string
    precio?: FloatFieldUpdateOperationsInput | number
    porcentajeOferta?: NullableFloatFieldUpdateOperationsInput | number | null
    trailerUrl?: NullableStringFieldUpdateOperationsInput | string | null
    rating?: NullableFloatFieldUpdateOperationsInput | number | null
    fechaLanzamiento?: DateTimeFieldUpdateOperationsInput | Date | string
    fechaSubida?: DateTimeFieldUpdateOperationsInput | Date | string
    slug?: StringFieldUpdateOperationsInput | string
    reviewJuego?: NullableStringFieldUpdateOperationsInput | string | null
    fotos?: FotoUncheckedUpdateManyWithoutJuegoNestedInput
    categorias?: CategoriaXJuegoUncheckedUpdateManyWithoutJuegoNestedInput
    plataformas?: PlataformaXJuegoUncheckedUpdateManyWithoutJuegoNestedInput
    claves?: ClaveUncheckedUpdateManyWithoutJuegoNestedInput
    usuarios?: JuegoXUsuarioUncheckedUpdateManyWithoutJuegoNestedInput
    resenas?: ResenaUncheckedUpdateManyWithoutJuegoNestedInput
    enCarritos?: CarritoUncheckedUpdateManyWithoutJuegoNestedInput
  }

  export type VentaUpsertWithoutJuegosInput = {
    update: XOR<VentaUpdateWithoutJuegosInput, VentaUncheckedUpdateWithoutJuegosInput>
    create: XOR<VentaCreateWithoutJuegosInput, VentaUncheckedCreateWithoutJuegosInput>
    where?: VentaWhereInput
  }

  export type VentaUpdateToOneWithWhereWithoutJuegosInput = {
    where?: VentaWhereInput
    data: XOR<VentaUpdateWithoutJuegosInput, VentaUncheckedUpdateWithoutJuegosInput>
  }

  export type VentaUpdateWithoutJuegosInput = {
    total?: FloatFieldUpdateOperationsInput | number
    fechaVenta?: DateTimeFieldUpdateOperationsInput | Date | string
    usuario?: UsuarioUpdateOneRequiredWithoutVentasNestedInput
    claves?: ClaveUpdateManyWithoutVentaNestedInput
  }

  export type VentaUncheckedUpdateWithoutJuegosInput = {
    id?: IntFieldUpdateOperationsInput | number
    total?: FloatFieldUpdateOperationsInput | number
    fechaVenta?: DateTimeFieldUpdateOperationsInput | Date | string
    usuarioId?: IntFieldUpdateOperationsInput | number
    claves?: ClaveUncheckedUpdateManyWithoutVentaNestedInput
  }

  export type JuegoCreateWithoutUsuariosInput = {
    titulo: string
    descripcion: string
    precio: number
    porcentajeOferta?: number | null
    trailerUrl?: string | null
    rating?: number | null
    fechaLanzamiento: Date | string
    fechaSubida?: Date | string
    slug: string
    reviewJuego?: string | null
    fotos?: FotoCreateNestedManyWithoutJuegoInput
    categorias?: CategoriaXJuegoCreateNestedManyWithoutJuegoInput
    plataformas?: PlataformaXJuegoCreateNestedManyWithoutJuegoInput
    claves?: ClaveCreateNestedManyWithoutJuegoInput
    ventas?: JuegoXVentaCreateNestedManyWithoutJuegoInput
    resenas?: ResenaCreateNestedManyWithoutJuegoInput
    enCarritos?: CarritoCreateNestedManyWithoutJuegoInput
  }

  export type JuegoUncheckedCreateWithoutUsuariosInput = {
    id?: number
    titulo: string
    descripcion: string
    precio: number
    porcentajeOferta?: number | null
    trailerUrl?: string | null
    rating?: number | null
    fechaLanzamiento: Date | string
    fechaSubida?: Date | string
    slug: string
    reviewJuego?: string | null
    fotos?: FotoUncheckedCreateNestedManyWithoutJuegoInput
    categorias?: CategoriaXJuegoUncheckedCreateNestedManyWithoutJuegoInput
    plataformas?: PlataformaXJuegoUncheckedCreateNestedManyWithoutJuegoInput
    claves?: ClaveUncheckedCreateNestedManyWithoutJuegoInput
    ventas?: JuegoXVentaUncheckedCreateNestedManyWithoutJuegoInput
    resenas?: ResenaUncheckedCreateNestedManyWithoutJuegoInput
    enCarritos?: CarritoUncheckedCreateNestedManyWithoutJuegoInput
  }

  export type JuegoCreateOrConnectWithoutUsuariosInput = {
    where: JuegoWhereUniqueInput
    create: XOR<JuegoCreateWithoutUsuariosInput, JuegoUncheckedCreateWithoutUsuariosInput>
  }

  export type UsuarioCreateWithoutJuegosInput = {
    correo: string
    contrasena: string
    rol?: $Enums.Rol
    nombre: string
    apellido: string
    ventas?: VentaCreateNestedManyWithoutUsuarioInput
    resenas?: ResenaCreateNestedManyWithoutUsuarioInput
    carrito?: CarritoCreateNestedManyWithoutUsuarioInput
  }

  export type UsuarioUncheckedCreateWithoutJuegosInput = {
    id?: number
    correo: string
    contrasena: string
    rol?: $Enums.Rol
    nombre: string
    apellido: string
    ventas?: VentaUncheckedCreateNestedManyWithoutUsuarioInput
    resenas?: ResenaUncheckedCreateNestedManyWithoutUsuarioInput
    carrito?: CarritoUncheckedCreateNestedManyWithoutUsuarioInput
  }

  export type UsuarioCreateOrConnectWithoutJuegosInput = {
    where: UsuarioWhereUniqueInput
    create: XOR<UsuarioCreateWithoutJuegosInput, UsuarioUncheckedCreateWithoutJuegosInput>
  }

  export type JuegoUpsertWithoutUsuariosInput = {
    update: XOR<JuegoUpdateWithoutUsuariosInput, JuegoUncheckedUpdateWithoutUsuariosInput>
    create: XOR<JuegoCreateWithoutUsuariosInput, JuegoUncheckedCreateWithoutUsuariosInput>
    where?: JuegoWhereInput
  }

  export type JuegoUpdateToOneWithWhereWithoutUsuariosInput = {
    where?: JuegoWhereInput
    data: XOR<JuegoUpdateWithoutUsuariosInput, JuegoUncheckedUpdateWithoutUsuariosInput>
  }

  export type JuegoUpdateWithoutUsuariosInput = {
    titulo?: StringFieldUpdateOperationsInput | string
    descripcion?: StringFieldUpdateOperationsInput | string
    precio?: FloatFieldUpdateOperationsInput | number
    porcentajeOferta?: NullableFloatFieldUpdateOperationsInput | number | null
    trailerUrl?: NullableStringFieldUpdateOperationsInput | string | null
    rating?: NullableFloatFieldUpdateOperationsInput | number | null
    fechaLanzamiento?: DateTimeFieldUpdateOperationsInput | Date | string
    fechaSubida?: DateTimeFieldUpdateOperationsInput | Date | string
    slug?: StringFieldUpdateOperationsInput | string
    reviewJuego?: NullableStringFieldUpdateOperationsInput | string | null
    fotos?: FotoUpdateManyWithoutJuegoNestedInput
    categorias?: CategoriaXJuegoUpdateManyWithoutJuegoNestedInput
    plataformas?: PlataformaXJuegoUpdateManyWithoutJuegoNestedInput
    claves?: ClaveUpdateManyWithoutJuegoNestedInput
    ventas?: JuegoXVentaUpdateManyWithoutJuegoNestedInput
    resenas?: ResenaUpdateManyWithoutJuegoNestedInput
    enCarritos?: CarritoUpdateManyWithoutJuegoNestedInput
  }

  export type JuegoUncheckedUpdateWithoutUsuariosInput = {
    id?: IntFieldUpdateOperationsInput | number
    titulo?: StringFieldUpdateOperationsInput | string
    descripcion?: StringFieldUpdateOperationsInput | string
    precio?: FloatFieldUpdateOperationsInput | number
    porcentajeOferta?: NullableFloatFieldUpdateOperationsInput | number | null
    trailerUrl?: NullableStringFieldUpdateOperationsInput | string | null
    rating?: NullableFloatFieldUpdateOperationsInput | number | null
    fechaLanzamiento?: DateTimeFieldUpdateOperationsInput | Date | string
    fechaSubida?: DateTimeFieldUpdateOperationsInput | Date | string
    slug?: StringFieldUpdateOperationsInput | string
    reviewJuego?: NullableStringFieldUpdateOperationsInput | string | null
    fotos?: FotoUncheckedUpdateManyWithoutJuegoNestedInput
    categorias?: CategoriaXJuegoUncheckedUpdateManyWithoutJuegoNestedInput
    plataformas?: PlataformaXJuegoUncheckedUpdateManyWithoutJuegoNestedInput
    claves?: ClaveUncheckedUpdateManyWithoutJuegoNestedInput
    ventas?: JuegoXVentaUncheckedUpdateManyWithoutJuegoNestedInput
    resenas?: ResenaUncheckedUpdateManyWithoutJuegoNestedInput
    enCarritos?: CarritoUncheckedUpdateManyWithoutJuegoNestedInput
  }

  export type UsuarioUpsertWithoutJuegosInput = {
    update: XOR<UsuarioUpdateWithoutJuegosInput, UsuarioUncheckedUpdateWithoutJuegosInput>
    create: XOR<UsuarioCreateWithoutJuegosInput, UsuarioUncheckedCreateWithoutJuegosInput>
    where?: UsuarioWhereInput
  }

  export type UsuarioUpdateToOneWithWhereWithoutJuegosInput = {
    where?: UsuarioWhereInput
    data: XOR<UsuarioUpdateWithoutJuegosInput, UsuarioUncheckedUpdateWithoutJuegosInput>
  }

  export type UsuarioUpdateWithoutJuegosInput = {
    correo?: StringFieldUpdateOperationsInput | string
    contrasena?: StringFieldUpdateOperationsInput | string
    rol?: EnumRolFieldUpdateOperationsInput | $Enums.Rol
    nombre?: StringFieldUpdateOperationsInput | string
    apellido?: StringFieldUpdateOperationsInput | string
    ventas?: VentaUpdateManyWithoutUsuarioNestedInput
    resenas?: ResenaUpdateManyWithoutUsuarioNestedInput
    carrito?: CarritoUpdateManyWithoutUsuarioNestedInput
  }

  export type UsuarioUncheckedUpdateWithoutJuegosInput = {
    id?: IntFieldUpdateOperationsInput | number
    correo?: StringFieldUpdateOperationsInput | string
    contrasena?: StringFieldUpdateOperationsInput | string
    rol?: EnumRolFieldUpdateOperationsInput | $Enums.Rol
    nombre?: StringFieldUpdateOperationsInput | string
    apellido?: StringFieldUpdateOperationsInput | string
    ventas?: VentaUncheckedUpdateManyWithoutUsuarioNestedInput
    resenas?: ResenaUncheckedUpdateManyWithoutUsuarioNestedInput
    carrito?: CarritoUncheckedUpdateManyWithoutUsuarioNestedInput
  }

  export type JuegoCreateWithoutClavesInput = {
    titulo: string
    descripcion: string
    precio: number
    porcentajeOferta?: number | null
    trailerUrl?: string | null
    rating?: number | null
    fechaLanzamiento: Date | string
    fechaSubida?: Date | string
    slug: string
    reviewJuego?: string | null
    fotos?: FotoCreateNestedManyWithoutJuegoInput
    categorias?: CategoriaXJuegoCreateNestedManyWithoutJuegoInput
    plataformas?: PlataformaXJuegoCreateNestedManyWithoutJuegoInput
    ventas?: JuegoXVentaCreateNestedManyWithoutJuegoInput
    usuarios?: JuegoXUsuarioCreateNestedManyWithoutJuegoInput
    resenas?: ResenaCreateNestedManyWithoutJuegoInput
    enCarritos?: CarritoCreateNestedManyWithoutJuegoInput
  }

  export type JuegoUncheckedCreateWithoutClavesInput = {
    id?: number
    titulo: string
    descripcion: string
    precio: number
    porcentajeOferta?: number | null
    trailerUrl?: string | null
    rating?: number | null
    fechaLanzamiento: Date | string
    fechaSubida?: Date | string
    slug: string
    reviewJuego?: string | null
    fotos?: FotoUncheckedCreateNestedManyWithoutJuegoInput
    categorias?: CategoriaXJuegoUncheckedCreateNestedManyWithoutJuegoInput
    plataformas?: PlataformaXJuegoUncheckedCreateNestedManyWithoutJuegoInput
    ventas?: JuegoXVentaUncheckedCreateNestedManyWithoutJuegoInput
    usuarios?: JuegoXUsuarioUncheckedCreateNestedManyWithoutJuegoInput
    resenas?: ResenaUncheckedCreateNestedManyWithoutJuegoInput
    enCarritos?: CarritoUncheckedCreateNestedManyWithoutJuegoInput
  }

  export type JuegoCreateOrConnectWithoutClavesInput = {
    where: JuegoWhereUniqueInput
    create: XOR<JuegoCreateWithoutClavesInput, JuegoUncheckedCreateWithoutClavesInput>
  }

  export type VentaCreateWithoutClavesInput = {
    total: number
    fechaVenta?: Date | string
    usuario: UsuarioCreateNestedOneWithoutVentasInput
    juegos?: JuegoXVentaCreateNestedManyWithoutVentaInput
  }

  export type VentaUncheckedCreateWithoutClavesInput = {
    id?: number
    total: number
    fechaVenta?: Date | string
    usuarioId: number
    juegos?: JuegoXVentaUncheckedCreateNestedManyWithoutVentaInput
  }

  export type VentaCreateOrConnectWithoutClavesInput = {
    where: VentaWhereUniqueInput
    create: XOR<VentaCreateWithoutClavesInput, VentaUncheckedCreateWithoutClavesInput>
  }

  export type JuegoUpsertWithoutClavesInput = {
    update: XOR<JuegoUpdateWithoutClavesInput, JuegoUncheckedUpdateWithoutClavesInput>
    create: XOR<JuegoCreateWithoutClavesInput, JuegoUncheckedCreateWithoutClavesInput>
    where?: JuegoWhereInput
  }

  export type JuegoUpdateToOneWithWhereWithoutClavesInput = {
    where?: JuegoWhereInput
    data: XOR<JuegoUpdateWithoutClavesInput, JuegoUncheckedUpdateWithoutClavesInput>
  }

  export type JuegoUpdateWithoutClavesInput = {
    titulo?: StringFieldUpdateOperationsInput | string
    descripcion?: StringFieldUpdateOperationsInput | string
    precio?: FloatFieldUpdateOperationsInput | number
    porcentajeOferta?: NullableFloatFieldUpdateOperationsInput | number | null
    trailerUrl?: NullableStringFieldUpdateOperationsInput | string | null
    rating?: NullableFloatFieldUpdateOperationsInput | number | null
    fechaLanzamiento?: DateTimeFieldUpdateOperationsInput | Date | string
    fechaSubida?: DateTimeFieldUpdateOperationsInput | Date | string
    slug?: StringFieldUpdateOperationsInput | string
    reviewJuego?: NullableStringFieldUpdateOperationsInput | string | null
    fotos?: FotoUpdateManyWithoutJuegoNestedInput
    categorias?: CategoriaXJuegoUpdateManyWithoutJuegoNestedInput
    plataformas?: PlataformaXJuegoUpdateManyWithoutJuegoNestedInput
    ventas?: JuegoXVentaUpdateManyWithoutJuegoNestedInput
    usuarios?: JuegoXUsuarioUpdateManyWithoutJuegoNestedInput
    resenas?: ResenaUpdateManyWithoutJuegoNestedInput
    enCarritos?: CarritoUpdateManyWithoutJuegoNestedInput
  }

  export type JuegoUncheckedUpdateWithoutClavesInput = {
    id?: IntFieldUpdateOperationsInput | number
    titulo?: StringFieldUpdateOperationsInput | string
    descripcion?: StringFieldUpdateOperationsInput | string
    precio?: FloatFieldUpdateOperationsInput | number
    porcentajeOferta?: NullableFloatFieldUpdateOperationsInput | number | null
    trailerUrl?: NullableStringFieldUpdateOperationsInput | string | null
    rating?: NullableFloatFieldUpdateOperationsInput | number | null
    fechaLanzamiento?: DateTimeFieldUpdateOperationsInput | Date | string
    fechaSubida?: DateTimeFieldUpdateOperationsInput | Date | string
    slug?: StringFieldUpdateOperationsInput | string
    reviewJuego?: NullableStringFieldUpdateOperationsInput | string | null
    fotos?: FotoUncheckedUpdateManyWithoutJuegoNestedInput
    categorias?: CategoriaXJuegoUncheckedUpdateManyWithoutJuegoNestedInput
    plataformas?: PlataformaXJuegoUncheckedUpdateManyWithoutJuegoNestedInput
    ventas?: JuegoXVentaUncheckedUpdateManyWithoutJuegoNestedInput
    usuarios?: JuegoXUsuarioUncheckedUpdateManyWithoutJuegoNestedInput
    resenas?: ResenaUncheckedUpdateManyWithoutJuegoNestedInput
    enCarritos?: CarritoUncheckedUpdateManyWithoutJuegoNestedInput
  }

  export type VentaUpsertWithoutClavesInput = {
    update: XOR<VentaUpdateWithoutClavesInput, VentaUncheckedUpdateWithoutClavesInput>
    create: XOR<VentaCreateWithoutClavesInput, VentaUncheckedCreateWithoutClavesInput>
    where?: VentaWhereInput
  }

  export type VentaUpdateToOneWithWhereWithoutClavesInput = {
    where?: VentaWhereInput
    data: XOR<VentaUpdateWithoutClavesInput, VentaUncheckedUpdateWithoutClavesInput>
  }

  export type VentaUpdateWithoutClavesInput = {
    total?: FloatFieldUpdateOperationsInput | number
    fechaVenta?: DateTimeFieldUpdateOperationsInput | Date | string
    usuario?: UsuarioUpdateOneRequiredWithoutVentasNestedInput
    juegos?: JuegoXVentaUpdateManyWithoutVentaNestedInput
  }

  export type VentaUncheckedUpdateWithoutClavesInput = {
    id?: IntFieldUpdateOperationsInput | number
    total?: FloatFieldUpdateOperationsInput | number
    fechaVenta?: DateTimeFieldUpdateOperationsInput | Date | string
    usuarioId?: IntFieldUpdateOperationsInput | number
    juegos?: JuegoXVentaUncheckedUpdateManyWithoutVentaNestedInput
  }

  export type JuegoCreateWithoutCategoriasInput = {
    titulo: string
    descripcion: string
    precio: number
    porcentajeOferta?: number | null
    trailerUrl?: string | null
    rating?: number | null
    fechaLanzamiento: Date | string
    fechaSubida?: Date | string
    slug: string
    reviewJuego?: string | null
    fotos?: FotoCreateNestedManyWithoutJuegoInput
    plataformas?: PlataformaXJuegoCreateNestedManyWithoutJuegoInput
    claves?: ClaveCreateNestedManyWithoutJuegoInput
    ventas?: JuegoXVentaCreateNestedManyWithoutJuegoInput
    usuarios?: JuegoXUsuarioCreateNestedManyWithoutJuegoInput
    resenas?: ResenaCreateNestedManyWithoutJuegoInput
    enCarritos?: CarritoCreateNestedManyWithoutJuegoInput
  }

  export type JuegoUncheckedCreateWithoutCategoriasInput = {
    id?: number
    titulo: string
    descripcion: string
    precio: number
    porcentajeOferta?: number | null
    trailerUrl?: string | null
    rating?: number | null
    fechaLanzamiento: Date | string
    fechaSubida?: Date | string
    slug: string
    reviewJuego?: string | null
    fotos?: FotoUncheckedCreateNestedManyWithoutJuegoInput
    plataformas?: PlataformaXJuegoUncheckedCreateNestedManyWithoutJuegoInput
    claves?: ClaveUncheckedCreateNestedManyWithoutJuegoInput
    ventas?: JuegoXVentaUncheckedCreateNestedManyWithoutJuegoInput
    usuarios?: JuegoXUsuarioUncheckedCreateNestedManyWithoutJuegoInput
    resenas?: ResenaUncheckedCreateNestedManyWithoutJuegoInput
    enCarritos?: CarritoUncheckedCreateNestedManyWithoutJuegoInput
  }

  export type JuegoCreateOrConnectWithoutCategoriasInput = {
    where: JuegoWhereUniqueInput
    create: XOR<JuegoCreateWithoutCategoriasInput, JuegoUncheckedCreateWithoutCategoriasInput>
  }

  export type CategoriaCreateWithoutJuegosInput = {
    nombre: string
  }

  export type CategoriaUncheckedCreateWithoutJuegosInput = {
    id?: number
    nombre: string
  }

  export type CategoriaCreateOrConnectWithoutJuegosInput = {
    where: CategoriaWhereUniqueInput
    create: XOR<CategoriaCreateWithoutJuegosInput, CategoriaUncheckedCreateWithoutJuegosInput>
  }

  export type JuegoUpsertWithoutCategoriasInput = {
    update: XOR<JuegoUpdateWithoutCategoriasInput, JuegoUncheckedUpdateWithoutCategoriasInput>
    create: XOR<JuegoCreateWithoutCategoriasInput, JuegoUncheckedCreateWithoutCategoriasInput>
    where?: JuegoWhereInput
  }

  export type JuegoUpdateToOneWithWhereWithoutCategoriasInput = {
    where?: JuegoWhereInput
    data: XOR<JuegoUpdateWithoutCategoriasInput, JuegoUncheckedUpdateWithoutCategoriasInput>
  }

  export type JuegoUpdateWithoutCategoriasInput = {
    titulo?: StringFieldUpdateOperationsInput | string
    descripcion?: StringFieldUpdateOperationsInput | string
    precio?: FloatFieldUpdateOperationsInput | number
    porcentajeOferta?: NullableFloatFieldUpdateOperationsInput | number | null
    trailerUrl?: NullableStringFieldUpdateOperationsInput | string | null
    rating?: NullableFloatFieldUpdateOperationsInput | number | null
    fechaLanzamiento?: DateTimeFieldUpdateOperationsInput | Date | string
    fechaSubida?: DateTimeFieldUpdateOperationsInput | Date | string
    slug?: StringFieldUpdateOperationsInput | string
    reviewJuego?: NullableStringFieldUpdateOperationsInput | string | null
    fotos?: FotoUpdateManyWithoutJuegoNestedInput
    plataformas?: PlataformaXJuegoUpdateManyWithoutJuegoNestedInput
    claves?: ClaveUpdateManyWithoutJuegoNestedInput
    ventas?: JuegoXVentaUpdateManyWithoutJuegoNestedInput
    usuarios?: JuegoXUsuarioUpdateManyWithoutJuegoNestedInput
    resenas?: ResenaUpdateManyWithoutJuegoNestedInput
    enCarritos?: CarritoUpdateManyWithoutJuegoNestedInput
  }

  export type JuegoUncheckedUpdateWithoutCategoriasInput = {
    id?: IntFieldUpdateOperationsInput | number
    titulo?: StringFieldUpdateOperationsInput | string
    descripcion?: StringFieldUpdateOperationsInput | string
    precio?: FloatFieldUpdateOperationsInput | number
    porcentajeOferta?: NullableFloatFieldUpdateOperationsInput | number | null
    trailerUrl?: NullableStringFieldUpdateOperationsInput | string | null
    rating?: NullableFloatFieldUpdateOperationsInput | number | null
    fechaLanzamiento?: DateTimeFieldUpdateOperationsInput | Date | string
    fechaSubida?: DateTimeFieldUpdateOperationsInput | Date | string
    slug?: StringFieldUpdateOperationsInput | string
    reviewJuego?: NullableStringFieldUpdateOperationsInput | string | null
    fotos?: FotoUncheckedUpdateManyWithoutJuegoNestedInput
    plataformas?: PlataformaXJuegoUncheckedUpdateManyWithoutJuegoNestedInput
    claves?: ClaveUncheckedUpdateManyWithoutJuegoNestedInput
    ventas?: JuegoXVentaUncheckedUpdateManyWithoutJuegoNestedInput
    usuarios?: JuegoXUsuarioUncheckedUpdateManyWithoutJuegoNestedInput
    resenas?: ResenaUncheckedUpdateManyWithoutJuegoNestedInput
    enCarritos?: CarritoUncheckedUpdateManyWithoutJuegoNestedInput
  }

  export type CategoriaUpsertWithoutJuegosInput = {
    update: XOR<CategoriaUpdateWithoutJuegosInput, CategoriaUncheckedUpdateWithoutJuegosInput>
    create: XOR<CategoriaCreateWithoutJuegosInput, CategoriaUncheckedCreateWithoutJuegosInput>
    where?: CategoriaWhereInput
  }

  export type CategoriaUpdateToOneWithWhereWithoutJuegosInput = {
    where?: CategoriaWhereInput
    data: XOR<CategoriaUpdateWithoutJuegosInput, CategoriaUncheckedUpdateWithoutJuegosInput>
  }

  export type CategoriaUpdateWithoutJuegosInput = {
    nombre?: StringFieldUpdateOperationsInput | string
  }

  export type CategoriaUncheckedUpdateWithoutJuegosInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
  }

  export type JuegoCreateWithoutPlataformasInput = {
    titulo: string
    descripcion: string
    precio: number
    porcentajeOferta?: number | null
    trailerUrl?: string | null
    rating?: number | null
    fechaLanzamiento: Date | string
    fechaSubida?: Date | string
    slug: string
    reviewJuego?: string | null
    fotos?: FotoCreateNestedManyWithoutJuegoInput
    categorias?: CategoriaXJuegoCreateNestedManyWithoutJuegoInput
    claves?: ClaveCreateNestedManyWithoutJuegoInput
    ventas?: JuegoXVentaCreateNestedManyWithoutJuegoInput
    usuarios?: JuegoXUsuarioCreateNestedManyWithoutJuegoInput
    resenas?: ResenaCreateNestedManyWithoutJuegoInput
    enCarritos?: CarritoCreateNestedManyWithoutJuegoInput
  }

  export type JuegoUncheckedCreateWithoutPlataformasInput = {
    id?: number
    titulo: string
    descripcion: string
    precio: number
    porcentajeOferta?: number | null
    trailerUrl?: string | null
    rating?: number | null
    fechaLanzamiento: Date | string
    fechaSubida?: Date | string
    slug: string
    reviewJuego?: string | null
    fotos?: FotoUncheckedCreateNestedManyWithoutJuegoInput
    categorias?: CategoriaXJuegoUncheckedCreateNestedManyWithoutJuegoInput
    claves?: ClaveUncheckedCreateNestedManyWithoutJuegoInput
    ventas?: JuegoXVentaUncheckedCreateNestedManyWithoutJuegoInput
    usuarios?: JuegoXUsuarioUncheckedCreateNestedManyWithoutJuegoInput
    resenas?: ResenaUncheckedCreateNestedManyWithoutJuegoInput
    enCarritos?: CarritoUncheckedCreateNestedManyWithoutJuegoInput
  }

  export type JuegoCreateOrConnectWithoutPlataformasInput = {
    where: JuegoWhereUniqueInput
    create: XOR<JuegoCreateWithoutPlataformasInput, JuegoUncheckedCreateWithoutPlataformasInput>
  }

  export type PlataformaCreateWithoutJuegosInput = {
    nombre: string
    color: string
  }

  export type PlataformaUncheckedCreateWithoutJuegosInput = {
    id?: number
    nombre: string
    color: string
  }

  export type PlataformaCreateOrConnectWithoutJuegosInput = {
    where: PlataformaWhereUniqueInput
    create: XOR<PlataformaCreateWithoutJuegosInput, PlataformaUncheckedCreateWithoutJuegosInput>
  }

  export type JuegoUpsertWithoutPlataformasInput = {
    update: XOR<JuegoUpdateWithoutPlataformasInput, JuegoUncheckedUpdateWithoutPlataformasInput>
    create: XOR<JuegoCreateWithoutPlataformasInput, JuegoUncheckedCreateWithoutPlataformasInput>
    where?: JuegoWhereInput
  }

  export type JuegoUpdateToOneWithWhereWithoutPlataformasInput = {
    where?: JuegoWhereInput
    data: XOR<JuegoUpdateWithoutPlataformasInput, JuegoUncheckedUpdateWithoutPlataformasInput>
  }

  export type JuegoUpdateWithoutPlataformasInput = {
    titulo?: StringFieldUpdateOperationsInput | string
    descripcion?: StringFieldUpdateOperationsInput | string
    precio?: FloatFieldUpdateOperationsInput | number
    porcentajeOferta?: NullableFloatFieldUpdateOperationsInput | number | null
    trailerUrl?: NullableStringFieldUpdateOperationsInput | string | null
    rating?: NullableFloatFieldUpdateOperationsInput | number | null
    fechaLanzamiento?: DateTimeFieldUpdateOperationsInput | Date | string
    fechaSubida?: DateTimeFieldUpdateOperationsInput | Date | string
    slug?: StringFieldUpdateOperationsInput | string
    reviewJuego?: NullableStringFieldUpdateOperationsInput | string | null
    fotos?: FotoUpdateManyWithoutJuegoNestedInput
    categorias?: CategoriaXJuegoUpdateManyWithoutJuegoNestedInput
    claves?: ClaveUpdateManyWithoutJuegoNestedInput
    ventas?: JuegoXVentaUpdateManyWithoutJuegoNestedInput
    usuarios?: JuegoXUsuarioUpdateManyWithoutJuegoNestedInput
    resenas?: ResenaUpdateManyWithoutJuegoNestedInput
    enCarritos?: CarritoUpdateManyWithoutJuegoNestedInput
  }

  export type JuegoUncheckedUpdateWithoutPlataformasInput = {
    id?: IntFieldUpdateOperationsInput | number
    titulo?: StringFieldUpdateOperationsInput | string
    descripcion?: StringFieldUpdateOperationsInput | string
    precio?: FloatFieldUpdateOperationsInput | number
    porcentajeOferta?: NullableFloatFieldUpdateOperationsInput | number | null
    trailerUrl?: NullableStringFieldUpdateOperationsInput | string | null
    rating?: NullableFloatFieldUpdateOperationsInput | number | null
    fechaLanzamiento?: DateTimeFieldUpdateOperationsInput | Date | string
    fechaSubida?: DateTimeFieldUpdateOperationsInput | Date | string
    slug?: StringFieldUpdateOperationsInput | string
    reviewJuego?: NullableStringFieldUpdateOperationsInput | string | null
    fotos?: FotoUncheckedUpdateManyWithoutJuegoNestedInput
    categorias?: CategoriaXJuegoUncheckedUpdateManyWithoutJuegoNestedInput
    claves?: ClaveUncheckedUpdateManyWithoutJuegoNestedInput
    ventas?: JuegoXVentaUncheckedUpdateManyWithoutJuegoNestedInput
    usuarios?: JuegoXUsuarioUncheckedUpdateManyWithoutJuegoNestedInput
    resenas?: ResenaUncheckedUpdateManyWithoutJuegoNestedInput
    enCarritos?: CarritoUncheckedUpdateManyWithoutJuegoNestedInput
  }

  export type PlataformaUpsertWithoutJuegosInput = {
    update: XOR<PlataformaUpdateWithoutJuegosInput, PlataformaUncheckedUpdateWithoutJuegosInput>
    create: XOR<PlataformaCreateWithoutJuegosInput, PlataformaUncheckedCreateWithoutJuegosInput>
    where?: PlataformaWhereInput
  }

  export type PlataformaUpdateToOneWithWhereWithoutJuegosInput = {
    where?: PlataformaWhereInput
    data: XOR<PlataformaUpdateWithoutJuegosInput, PlataformaUncheckedUpdateWithoutJuegosInput>
  }

  export type PlataformaUpdateWithoutJuegosInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    color?: StringFieldUpdateOperationsInput | string
  }

  export type PlataformaUncheckedUpdateWithoutJuegosInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    color?: StringFieldUpdateOperationsInput | string
  }

  export type CatNoticiaXNoticiaCreateWithoutCatNoticiaInput = {
    noticia: NoticiaCreateNestedOneWithoutCategoriasInput
  }

  export type CatNoticiaXNoticiaUncheckedCreateWithoutCatNoticiaInput = {
    id?: number
    noticiaId: number
  }

  export type CatNoticiaXNoticiaCreateOrConnectWithoutCatNoticiaInput = {
    where: CatNoticiaXNoticiaWhereUniqueInput
    create: XOR<CatNoticiaXNoticiaCreateWithoutCatNoticiaInput, CatNoticiaXNoticiaUncheckedCreateWithoutCatNoticiaInput>
  }

  export type CatNoticiaXNoticiaCreateManyCatNoticiaInputEnvelope = {
    data: CatNoticiaXNoticiaCreateManyCatNoticiaInput | CatNoticiaXNoticiaCreateManyCatNoticiaInput[]
    skipDuplicates?: boolean
  }

  export type CatNoticiaXNoticiaUpsertWithWhereUniqueWithoutCatNoticiaInput = {
    where: CatNoticiaXNoticiaWhereUniqueInput
    update: XOR<CatNoticiaXNoticiaUpdateWithoutCatNoticiaInput, CatNoticiaXNoticiaUncheckedUpdateWithoutCatNoticiaInput>
    create: XOR<CatNoticiaXNoticiaCreateWithoutCatNoticiaInput, CatNoticiaXNoticiaUncheckedCreateWithoutCatNoticiaInput>
  }

  export type CatNoticiaXNoticiaUpdateWithWhereUniqueWithoutCatNoticiaInput = {
    where: CatNoticiaXNoticiaWhereUniqueInput
    data: XOR<CatNoticiaXNoticiaUpdateWithoutCatNoticiaInput, CatNoticiaXNoticiaUncheckedUpdateWithoutCatNoticiaInput>
  }

  export type CatNoticiaXNoticiaUpdateManyWithWhereWithoutCatNoticiaInput = {
    where: CatNoticiaXNoticiaScalarWhereInput
    data: XOR<CatNoticiaXNoticiaUpdateManyMutationInput, CatNoticiaXNoticiaUncheckedUpdateManyWithoutCatNoticiaInput>
  }

  export type NoticiaCreateWithoutCategoriasInput = {
    titulo: string
    slug: string
    tiempoLectura: number
    fechaPub: Date | string
    texto: string
    resumen: string
    foto: FotoCreateNestedOneWithoutNoticiaInput
  }

  export type NoticiaUncheckedCreateWithoutCategoriasInput = {
    id?: number
    titulo: string
    slug: string
    tiempoLectura: number
    fechaPub: Date | string
    texto: string
    resumen: string
    fotoId: number
  }

  export type NoticiaCreateOrConnectWithoutCategoriasInput = {
    where: NoticiaWhereUniqueInput
    create: XOR<NoticiaCreateWithoutCategoriasInput, NoticiaUncheckedCreateWithoutCategoriasInput>
  }

  export type CatNoticiaCreateWithoutNoticiasInput = {
    nombre: string
  }

  export type CatNoticiaUncheckedCreateWithoutNoticiasInput = {
    id?: number
    nombre: string
  }

  export type CatNoticiaCreateOrConnectWithoutNoticiasInput = {
    where: CatNoticiaWhereUniqueInput
    create: XOR<CatNoticiaCreateWithoutNoticiasInput, CatNoticiaUncheckedCreateWithoutNoticiasInput>
  }

  export type NoticiaUpsertWithoutCategoriasInput = {
    update: XOR<NoticiaUpdateWithoutCategoriasInput, NoticiaUncheckedUpdateWithoutCategoriasInput>
    create: XOR<NoticiaCreateWithoutCategoriasInput, NoticiaUncheckedCreateWithoutCategoriasInput>
    where?: NoticiaWhereInput
  }

  export type NoticiaUpdateToOneWithWhereWithoutCategoriasInput = {
    where?: NoticiaWhereInput
    data: XOR<NoticiaUpdateWithoutCategoriasInput, NoticiaUncheckedUpdateWithoutCategoriasInput>
  }

  export type NoticiaUpdateWithoutCategoriasInput = {
    titulo?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    tiempoLectura?: IntFieldUpdateOperationsInput | number
    fechaPub?: DateTimeFieldUpdateOperationsInput | Date | string
    texto?: StringFieldUpdateOperationsInput | string
    resumen?: StringFieldUpdateOperationsInput | string
    foto?: FotoUpdateOneRequiredWithoutNoticiaNestedInput
  }

  export type NoticiaUncheckedUpdateWithoutCategoriasInput = {
    id?: IntFieldUpdateOperationsInput | number
    titulo?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    tiempoLectura?: IntFieldUpdateOperationsInput | number
    fechaPub?: DateTimeFieldUpdateOperationsInput | Date | string
    texto?: StringFieldUpdateOperationsInput | string
    resumen?: StringFieldUpdateOperationsInput | string
    fotoId?: IntFieldUpdateOperationsInput | number
  }

  export type CatNoticiaUpsertWithoutNoticiasInput = {
    update: XOR<CatNoticiaUpdateWithoutNoticiasInput, CatNoticiaUncheckedUpdateWithoutNoticiasInput>
    create: XOR<CatNoticiaCreateWithoutNoticiasInput, CatNoticiaUncheckedCreateWithoutNoticiasInput>
    where?: CatNoticiaWhereInput
  }

  export type CatNoticiaUpdateToOneWithWhereWithoutNoticiasInput = {
    where?: CatNoticiaWhereInput
    data: XOR<CatNoticiaUpdateWithoutNoticiasInput, CatNoticiaUncheckedUpdateWithoutNoticiasInput>
  }

  export type CatNoticiaUpdateWithoutNoticiasInput = {
    nombre?: StringFieldUpdateOperationsInput | string
  }

  export type CatNoticiaUncheckedUpdateWithoutNoticiasInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
  }

  export type UsuarioCreateWithoutResenasInput = {
    correo: string
    contrasena: string
    rol?: $Enums.Rol
    nombre: string
    apellido: string
    ventas?: VentaCreateNestedManyWithoutUsuarioInput
    juegos?: JuegoXUsuarioCreateNestedManyWithoutUsuarioInput
    carrito?: CarritoCreateNestedManyWithoutUsuarioInput
  }

  export type UsuarioUncheckedCreateWithoutResenasInput = {
    id?: number
    correo: string
    contrasena: string
    rol?: $Enums.Rol
    nombre: string
    apellido: string
    ventas?: VentaUncheckedCreateNestedManyWithoutUsuarioInput
    juegos?: JuegoXUsuarioUncheckedCreateNestedManyWithoutUsuarioInput
    carrito?: CarritoUncheckedCreateNestedManyWithoutUsuarioInput
  }

  export type UsuarioCreateOrConnectWithoutResenasInput = {
    where: UsuarioWhereUniqueInput
    create: XOR<UsuarioCreateWithoutResenasInput, UsuarioUncheckedCreateWithoutResenasInput>
  }

  export type JuegoCreateWithoutResenasInput = {
    titulo: string
    descripcion: string
    precio: number
    porcentajeOferta?: number | null
    trailerUrl?: string | null
    rating?: number | null
    fechaLanzamiento: Date | string
    fechaSubida?: Date | string
    slug: string
    reviewJuego?: string | null
    fotos?: FotoCreateNestedManyWithoutJuegoInput
    categorias?: CategoriaXJuegoCreateNestedManyWithoutJuegoInput
    plataformas?: PlataformaXJuegoCreateNestedManyWithoutJuegoInput
    claves?: ClaveCreateNestedManyWithoutJuegoInput
    ventas?: JuegoXVentaCreateNestedManyWithoutJuegoInput
    usuarios?: JuegoXUsuarioCreateNestedManyWithoutJuegoInput
    enCarritos?: CarritoCreateNestedManyWithoutJuegoInput
  }

  export type JuegoUncheckedCreateWithoutResenasInput = {
    id?: number
    titulo: string
    descripcion: string
    precio: number
    porcentajeOferta?: number | null
    trailerUrl?: string | null
    rating?: number | null
    fechaLanzamiento: Date | string
    fechaSubida?: Date | string
    slug: string
    reviewJuego?: string | null
    fotos?: FotoUncheckedCreateNestedManyWithoutJuegoInput
    categorias?: CategoriaXJuegoUncheckedCreateNestedManyWithoutJuegoInput
    plataformas?: PlataformaXJuegoUncheckedCreateNestedManyWithoutJuegoInput
    claves?: ClaveUncheckedCreateNestedManyWithoutJuegoInput
    ventas?: JuegoXVentaUncheckedCreateNestedManyWithoutJuegoInput
    usuarios?: JuegoXUsuarioUncheckedCreateNestedManyWithoutJuegoInput
    enCarritos?: CarritoUncheckedCreateNestedManyWithoutJuegoInput
  }

  export type JuegoCreateOrConnectWithoutResenasInput = {
    where: JuegoWhereUniqueInput
    create: XOR<JuegoCreateWithoutResenasInput, JuegoUncheckedCreateWithoutResenasInput>
  }

  export type UsuarioUpsertWithoutResenasInput = {
    update: XOR<UsuarioUpdateWithoutResenasInput, UsuarioUncheckedUpdateWithoutResenasInput>
    create: XOR<UsuarioCreateWithoutResenasInput, UsuarioUncheckedCreateWithoutResenasInput>
    where?: UsuarioWhereInput
  }

  export type UsuarioUpdateToOneWithWhereWithoutResenasInput = {
    where?: UsuarioWhereInput
    data: XOR<UsuarioUpdateWithoutResenasInput, UsuarioUncheckedUpdateWithoutResenasInput>
  }

  export type UsuarioUpdateWithoutResenasInput = {
    correo?: StringFieldUpdateOperationsInput | string
    contrasena?: StringFieldUpdateOperationsInput | string
    rol?: EnumRolFieldUpdateOperationsInput | $Enums.Rol
    nombre?: StringFieldUpdateOperationsInput | string
    apellido?: StringFieldUpdateOperationsInput | string
    ventas?: VentaUpdateManyWithoutUsuarioNestedInput
    juegos?: JuegoXUsuarioUpdateManyWithoutUsuarioNestedInput
    carrito?: CarritoUpdateManyWithoutUsuarioNestedInput
  }

  export type UsuarioUncheckedUpdateWithoutResenasInput = {
    id?: IntFieldUpdateOperationsInput | number
    correo?: StringFieldUpdateOperationsInput | string
    contrasena?: StringFieldUpdateOperationsInput | string
    rol?: EnumRolFieldUpdateOperationsInput | $Enums.Rol
    nombre?: StringFieldUpdateOperationsInput | string
    apellido?: StringFieldUpdateOperationsInput | string
    ventas?: VentaUncheckedUpdateManyWithoutUsuarioNestedInput
    juegos?: JuegoXUsuarioUncheckedUpdateManyWithoutUsuarioNestedInput
    carrito?: CarritoUncheckedUpdateManyWithoutUsuarioNestedInput
  }

  export type JuegoUpsertWithoutResenasInput = {
    update: XOR<JuegoUpdateWithoutResenasInput, JuegoUncheckedUpdateWithoutResenasInput>
    create: XOR<JuegoCreateWithoutResenasInput, JuegoUncheckedCreateWithoutResenasInput>
    where?: JuegoWhereInput
  }

  export type JuegoUpdateToOneWithWhereWithoutResenasInput = {
    where?: JuegoWhereInput
    data: XOR<JuegoUpdateWithoutResenasInput, JuegoUncheckedUpdateWithoutResenasInput>
  }

  export type JuegoUpdateWithoutResenasInput = {
    titulo?: StringFieldUpdateOperationsInput | string
    descripcion?: StringFieldUpdateOperationsInput | string
    precio?: FloatFieldUpdateOperationsInput | number
    porcentajeOferta?: NullableFloatFieldUpdateOperationsInput | number | null
    trailerUrl?: NullableStringFieldUpdateOperationsInput | string | null
    rating?: NullableFloatFieldUpdateOperationsInput | number | null
    fechaLanzamiento?: DateTimeFieldUpdateOperationsInput | Date | string
    fechaSubida?: DateTimeFieldUpdateOperationsInput | Date | string
    slug?: StringFieldUpdateOperationsInput | string
    reviewJuego?: NullableStringFieldUpdateOperationsInput | string | null
    fotos?: FotoUpdateManyWithoutJuegoNestedInput
    categorias?: CategoriaXJuegoUpdateManyWithoutJuegoNestedInput
    plataformas?: PlataformaXJuegoUpdateManyWithoutJuegoNestedInput
    claves?: ClaveUpdateManyWithoutJuegoNestedInput
    ventas?: JuegoXVentaUpdateManyWithoutJuegoNestedInput
    usuarios?: JuegoXUsuarioUpdateManyWithoutJuegoNestedInput
    enCarritos?: CarritoUpdateManyWithoutJuegoNestedInput
  }

  export type JuegoUncheckedUpdateWithoutResenasInput = {
    id?: IntFieldUpdateOperationsInput | number
    titulo?: StringFieldUpdateOperationsInput | string
    descripcion?: StringFieldUpdateOperationsInput | string
    precio?: FloatFieldUpdateOperationsInput | number
    porcentajeOferta?: NullableFloatFieldUpdateOperationsInput | number | null
    trailerUrl?: NullableStringFieldUpdateOperationsInput | string | null
    rating?: NullableFloatFieldUpdateOperationsInput | number | null
    fechaLanzamiento?: DateTimeFieldUpdateOperationsInput | Date | string
    fechaSubida?: DateTimeFieldUpdateOperationsInput | Date | string
    slug?: StringFieldUpdateOperationsInput | string
    reviewJuego?: NullableStringFieldUpdateOperationsInput | string | null
    fotos?: FotoUncheckedUpdateManyWithoutJuegoNestedInput
    categorias?: CategoriaXJuegoUncheckedUpdateManyWithoutJuegoNestedInput
    plataformas?: PlataformaXJuegoUncheckedUpdateManyWithoutJuegoNestedInput
    claves?: ClaveUncheckedUpdateManyWithoutJuegoNestedInput
    ventas?: JuegoXVentaUncheckedUpdateManyWithoutJuegoNestedInput
    usuarios?: JuegoXUsuarioUncheckedUpdateManyWithoutJuegoNestedInput
    enCarritos?: CarritoUncheckedUpdateManyWithoutJuegoNestedInput
  }

  export type UsuarioCreateWithoutCarritoInput = {
    correo: string
    contrasena: string
    rol?: $Enums.Rol
    nombre: string
    apellido: string
    ventas?: VentaCreateNestedManyWithoutUsuarioInput
    juegos?: JuegoXUsuarioCreateNestedManyWithoutUsuarioInput
    resenas?: ResenaCreateNestedManyWithoutUsuarioInput
  }

  export type UsuarioUncheckedCreateWithoutCarritoInput = {
    id?: number
    correo: string
    contrasena: string
    rol?: $Enums.Rol
    nombre: string
    apellido: string
    ventas?: VentaUncheckedCreateNestedManyWithoutUsuarioInput
    juegos?: JuegoXUsuarioUncheckedCreateNestedManyWithoutUsuarioInput
    resenas?: ResenaUncheckedCreateNestedManyWithoutUsuarioInput
  }

  export type UsuarioCreateOrConnectWithoutCarritoInput = {
    where: UsuarioWhereUniqueInput
    create: XOR<UsuarioCreateWithoutCarritoInput, UsuarioUncheckedCreateWithoutCarritoInput>
  }

  export type JuegoCreateWithoutEnCarritosInput = {
    titulo: string
    descripcion: string
    precio: number
    porcentajeOferta?: number | null
    trailerUrl?: string | null
    rating?: number | null
    fechaLanzamiento: Date | string
    fechaSubida?: Date | string
    slug: string
    reviewJuego?: string | null
    fotos?: FotoCreateNestedManyWithoutJuegoInput
    categorias?: CategoriaXJuegoCreateNestedManyWithoutJuegoInput
    plataformas?: PlataformaXJuegoCreateNestedManyWithoutJuegoInput
    claves?: ClaveCreateNestedManyWithoutJuegoInput
    ventas?: JuegoXVentaCreateNestedManyWithoutJuegoInput
    usuarios?: JuegoXUsuarioCreateNestedManyWithoutJuegoInput
    resenas?: ResenaCreateNestedManyWithoutJuegoInput
  }

  export type JuegoUncheckedCreateWithoutEnCarritosInput = {
    id?: number
    titulo: string
    descripcion: string
    precio: number
    porcentajeOferta?: number | null
    trailerUrl?: string | null
    rating?: number | null
    fechaLanzamiento: Date | string
    fechaSubida?: Date | string
    slug: string
    reviewJuego?: string | null
    fotos?: FotoUncheckedCreateNestedManyWithoutJuegoInput
    categorias?: CategoriaXJuegoUncheckedCreateNestedManyWithoutJuegoInput
    plataformas?: PlataformaXJuegoUncheckedCreateNestedManyWithoutJuegoInput
    claves?: ClaveUncheckedCreateNestedManyWithoutJuegoInput
    ventas?: JuegoXVentaUncheckedCreateNestedManyWithoutJuegoInput
    usuarios?: JuegoXUsuarioUncheckedCreateNestedManyWithoutJuegoInput
    resenas?: ResenaUncheckedCreateNestedManyWithoutJuegoInput
  }

  export type JuegoCreateOrConnectWithoutEnCarritosInput = {
    where: JuegoWhereUniqueInput
    create: XOR<JuegoCreateWithoutEnCarritosInput, JuegoUncheckedCreateWithoutEnCarritosInput>
  }

  export type UsuarioUpsertWithoutCarritoInput = {
    update: XOR<UsuarioUpdateWithoutCarritoInput, UsuarioUncheckedUpdateWithoutCarritoInput>
    create: XOR<UsuarioCreateWithoutCarritoInput, UsuarioUncheckedCreateWithoutCarritoInput>
    where?: UsuarioWhereInput
  }

  export type UsuarioUpdateToOneWithWhereWithoutCarritoInput = {
    where?: UsuarioWhereInput
    data: XOR<UsuarioUpdateWithoutCarritoInput, UsuarioUncheckedUpdateWithoutCarritoInput>
  }

  export type UsuarioUpdateWithoutCarritoInput = {
    correo?: StringFieldUpdateOperationsInput | string
    contrasena?: StringFieldUpdateOperationsInput | string
    rol?: EnumRolFieldUpdateOperationsInput | $Enums.Rol
    nombre?: StringFieldUpdateOperationsInput | string
    apellido?: StringFieldUpdateOperationsInput | string
    ventas?: VentaUpdateManyWithoutUsuarioNestedInput
    juegos?: JuegoXUsuarioUpdateManyWithoutUsuarioNestedInput
    resenas?: ResenaUpdateManyWithoutUsuarioNestedInput
  }

  export type UsuarioUncheckedUpdateWithoutCarritoInput = {
    id?: IntFieldUpdateOperationsInput | number
    correo?: StringFieldUpdateOperationsInput | string
    contrasena?: StringFieldUpdateOperationsInput | string
    rol?: EnumRolFieldUpdateOperationsInput | $Enums.Rol
    nombre?: StringFieldUpdateOperationsInput | string
    apellido?: StringFieldUpdateOperationsInput | string
    ventas?: VentaUncheckedUpdateManyWithoutUsuarioNestedInput
    juegos?: JuegoXUsuarioUncheckedUpdateManyWithoutUsuarioNestedInput
    resenas?: ResenaUncheckedUpdateManyWithoutUsuarioNestedInput
  }

  export type JuegoUpsertWithoutEnCarritosInput = {
    update: XOR<JuegoUpdateWithoutEnCarritosInput, JuegoUncheckedUpdateWithoutEnCarritosInput>
    create: XOR<JuegoCreateWithoutEnCarritosInput, JuegoUncheckedCreateWithoutEnCarritosInput>
    where?: JuegoWhereInput
  }

  export type JuegoUpdateToOneWithWhereWithoutEnCarritosInput = {
    where?: JuegoWhereInput
    data: XOR<JuegoUpdateWithoutEnCarritosInput, JuegoUncheckedUpdateWithoutEnCarritosInput>
  }

  export type JuegoUpdateWithoutEnCarritosInput = {
    titulo?: StringFieldUpdateOperationsInput | string
    descripcion?: StringFieldUpdateOperationsInput | string
    precio?: FloatFieldUpdateOperationsInput | number
    porcentajeOferta?: NullableFloatFieldUpdateOperationsInput | number | null
    trailerUrl?: NullableStringFieldUpdateOperationsInput | string | null
    rating?: NullableFloatFieldUpdateOperationsInput | number | null
    fechaLanzamiento?: DateTimeFieldUpdateOperationsInput | Date | string
    fechaSubida?: DateTimeFieldUpdateOperationsInput | Date | string
    slug?: StringFieldUpdateOperationsInput | string
    reviewJuego?: NullableStringFieldUpdateOperationsInput | string | null
    fotos?: FotoUpdateManyWithoutJuegoNestedInput
    categorias?: CategoriaXJuegoUpdateManyWithoutJuegoNestedInput
    plataformas?: PlataformaXJuegoUpdateManyWithoutJuegoNestedInput
    claves?: ClaveUpdateManyWithoutJuegoNestedInput
    ventas?: JuegoXVentaUpdateManyWithoutJuegoNestedInput
    usuarios?: JuegoXUsuarioUpdateManyWithoutJuegoNestedInput
    resenas?: ResenaUpdateManyWithoutJuegoNestedInput
  }

  export type JuegoUncheckedUpdateWithoutEnCarritosInput = {
    id?: IntFieldUpdateOperationsInput | number
    titulo?: StringFieldUpdateOperationsInput | string
    descripcion?: StringFieldUpdateOperationsInput | string
    precio?: FloatFieldUpdateOperationsInput | number
    porcentajeOferta?: NullableFloatFieldUpdateOperationsInput | number | null
    trailerUrl?: NullableStringFieldUpdateOperationsInput | string | null
    rating?: NullableFloatFieldUpdateOperationsInput | number | null
    fechaLanzamiento?: DateTimeFieldUpdateOperationsInput | Date | string
    fechaSubida?: DateTimeFieldUpdateOperationsInput | Date | string
    slug?: StringFieldUpdateOperationsInput | string
    reviewJuego?: NullableStringFieldUpdateOperationsInput | string | null
    fotos?: FotoUncheckedUpdateManyWithoutJuegoNestedInput
    categorias?: CategoriaXJuegoUncheckedUpdateManyWithoutJuegoNestedInput
    plataformas?: PlataformaXJuegoUncheckedUpdateManyWithoutJuegoNestedInput
    claves?: ClaveUncheckedUpdateManyWithoutJuegoNestedInput
    ventas?: JuegoXVentaUncheckedUpdateManyWithoutJuegoNestedInput
    usuarios?: JuegoXUsuarioUncheckedUpdateManyWithoutJuegoNestedInput
    resenas?: ResenaUncheckedUpdateManyWithoutJuegoNestedInput
  }

  export type VentaCreateManyUsuarioInput = {
    id?: number
    total: number
    fechaVenta?: Date | string
  }

  export type JuegoXUsuarioCreateManyUsuarioInput = {
    id?: number
    juegoId: number
  }

  export type ResenaCreateManyUsuarioInput = {
    id?: number
    juegoId: number
    fechaCreacion?: Date | string
    texto: string
    puntuacion: number
  }

  export type CarritoCreateManyUsuarioInput = {
    id?: number
    juegoId: number
  }

  export type VentaUpdateWithoutUsuarioInput = {
    total?: FloatFieldUpdateOperationsInput | number
    fechaVenta?: DateTimeFieldUpdateOperationsInput | Date | string
    juegos?: JuegoXVentaUpdateManyWithoutVentaNestedInput
    claves?: ClaveUpdateManyWithoutVentaNestedInput
  }

  export type VentaUncheckedUpdateWithoutUsuarioInput = {
    id?: IntFieldUpdateOperationsInput | number
    total?: FloatFieldUpdateOperationsInput | number
    fechaVenta?: DateTimeFieldUpdateOperationsInput | Date | string
    juegos?: JuegoXVentaUncheckedUpdateManyWithoutVentaNestedInput
    claves?: ClaveUncheckedUpdateManyWithoutVentaNestedInput
  }

  export type VentaUncheckedUpdateManyWithoutUsuarioInput = {
    id?: IntFieldUpdateOperationsInput | number
    total?: FloatFieldUpdateOperationsInput | number
    fechaVenta?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type JuegoXUsuarioUpdateWithoutUsuarioInput = {
    juego?: JuegoUpdateOneRequiredWithoutUsuariosNestedInput
  }

  export type JuegoXUsuarioUncheckedUpdateWithoutUsuarioInput = {
    id?: IntFieldUpdateOperationsInput | number
    juegoId?: IntFieldUpdateOperationsInput | number
  }

  export type JuegoXUsuarioUncheckedUpdateManyWithoutUsuarioInput = {
    id?: IntFieldUpdateOperationsInput | number
    juegoId?: IntFieldUpdateOperationsInput | number
  }

  export type ResenaUpdateWithoutUsuarioInput = {
    fechaCreacion?: DateTimeFieldUpdateOperationsInput | Date | string
    texto?: StringFieldUpdateOperationsInput | string
    puntuacion?: FloatFieldUpdateOperationsInput | number
    juego?: JuegoUpdateOneRequiredWithoutResenasNestedInput
  }

  export type ResenaUncheckedUpdateWithoutUsuarioInput = {
    id?: IntFieldUpdateOperationsInput | number
    juegoId?: IntFieldUpdateOperationsInput | number
    fechaCreacion?: DateTimeFieldUpdateOperationsInput | Date | string
    texto?: StringFieldUpdateOperationsInput | string
    puntuacion?: FloatFieldUpdateOperationsInput | number
  }

  export type ResenaUncheckedUpdateManyWithoutUsuarioInput = {
    id?: IntFieldUpdateOperationsInput | number
    juegoId?: IntFieldUpdateOperationsInput | number
    fechaCreacion?: DateTimeFieldUpdateOperationsInput | Date | string
    texto?: StringFieldUpdateOperationsInput | string
    puntuacion?: FloatFieldUpdateOperationsInput | number
  }

  export type CarritoUpdateWithoutUsuarioInput = {
    juego?: JuegoUpdateOneRequiredWithoutEnCarritosNestedInput
  }

  export type CarritoUncheckedUpdateWithoutUsuarioInput = {
    id?: IntFieldUpdateOperationsInput | number
    juegoId?: IntFieldUpdateOperationsInput | number
  }

  export type CarritoUncheckedUpdateManyWithoutUsuarioInput = {
    id?: IntFieldUpdateOperationsInput | number
    juegoId?: IntFieldUpdateOperationsInput | number
  }

  export type FotoCreateManyJuegoInput = {
    id?: number
    url: string
  }

  export type CategoriaXJuegoCreateManyJuegoInput = {
    id?: number
    categoriaId: number
  }

  export type PlataformaXJuegoCreateManyJuegoInput = {
    id?: number
    plataformaId: number
  }

  export type ClaveCreateManyJuegoInput = {
    id?: number
    texto: string
    usada?: boolean
    ventaId: number
  }

  export type JuegoXVentaCreateManyJuegoInput = {
    id?: number
    ventaId: number
  }

  export type JuegoXUsuarioCreateManyJuegoInput = {
    id?: number
    usuarioId: number
  }

  export type ResenaCreateManyJuegoInput = {
    id?: number
    usuarioId: number
    fechaCreacion?: Date | string
    texto: string
    puntuacion: number
  }

  export type CarritoCreateManyJuegoInput = {
    id?: number
    usuarioId: number
  }

  export type FotoUpdateWithoutJuegoInput = {
    url?: StringFieldUpdateOperationsInput | string
    noticia?: NoticiaUpdateOneWithoutFotoNestedInput
  }

  export type FotoUncheckedUpdateWithoutJuegoInput = {
    id?: IntFieldUpdateOperationsInput | number
    url?: StringFieldUpdateOperationsInput | string
    noticia?: NoticiaUncheckedUpdateOneWithoutFotoNestedInput
  }

  export type FotoUncheckedUpdateManyWithoutJuegoInput = {
    id?: IntFieldUpdateOperationsInput | number
    url?: StringFieldUpdateOperationsInput | string
  }

  export type CategoriaXJuegoUpdateWithoutJuegoInput = {
    categoria?: CategoriaUpdateOneRequiredWithoutJuegosNestedInput
  }

  export type CategoriaXJuegoUncheckedUpdateWithoutJuegoInput = {
    id?: IntFieldUpdateOperationsInput | number
    categoriaId?: IntFieldUpdateOperationsInput | number
  }

  export type CategoriaXJuegoUncheckedUpdateManyWithoutJuegoInput = {
    id?: IntFieldUpdateOperationsInput | number
    categoriaId?: IntFieldUpdateOperationsInput | number
  }

  export type PlataformaXJuegoUpdateWithoutJuegoInput = {
    plataforma?: PlataformaUpdateOneRequiredWithoutJuegosNestedInput
  }

  export type PlataformaXJuegoUncheckedUpdateWithoutJuegoInput = {
    id?: IntFieldUpdateOperationsInput | number
    plataformaId?: IntFieldUpdateOperationsInput | number
  }

  export type PlataformaXJuegoUncheckedUpdateManyWithoutJuegoInput = {
    id?: IntFieldUpdateOperationsInput | number
    plataformaId?: IntFieldUpdateOperationsInput | number
  }

  export type ClaveUpdateWithoutJuegoInput = {
    texto?: StringFieldUpdateOperationsInput | string
    usada?: BoolFieldUpdateOperationsInput | boolean
    venta?: VentaUpdateOneRequiredWithoutClavesNestedInput
  }

  export type ClaveUncheckedUpdateWithoutJuegoInput = {
    id?: IntFieldUpdateOperationsInput | number
    texto?: StringFieldUpdateOperationsInput | string
    usada?: BoolFieldUpdateOperationsInput | boolean
    ventaId?: IntFieldUpdateOperationsInput | number
  }

  export type ClaveUncheckedUpdateManyWithoutJuegoInput = {
    id?: IntFieldUpdateOperationsInput | number
    texto?: StringFieldUpdateOperationsInput | string
    usada?: BoolFieldUpdateOperationsInput | boolean
    ventaId?: IntFieldUpdateOperationsInput | number
  }

  export type JuegoXVentaUpdateWithoutJuegoInput = {
    venta?: VentaUpdateOneRequiredWithoutJuegosNestedInput
  }

  export type JuegoXVentaUncheckedUpdateWithoutJuegoInput = {
    id?: IntFieldUpdateOperationsInput | number
    ventaId?: IntFieldUpdateOperationsInput | number
  }

  export type JuegoXVentaUncheckedUpdateManyWithoutJuegoInput = {
    id?: IntFieldUpdateOperationsInput | number
    ventaId?: IntFieldUpdateOperationsInput | number
  }

  export type JuegoXUsuarioUpdateWithoutJuegoInput = {
    usuario?: UsuarioUpdateOneRequiredWithoutJuegosNestedInput
  }

  export type JuegoXUsuarioUncheckedUpdateWithoutJuegoInput = {
    id?: IntFieldUpdateOperationsInput | number
    usuarioId?: IntFieldUpdateOperationsInput | number
  }

  export type JuegoXUsuarioUncheckedUpdateManyWithoutJuegoInput = {
    id?: IntFieldUpdateOperationsInput | number
    usuarioId?: IntFieldUpdateOperationsInput | number
  }

  export type ResenaUpdateWithoutJuegoInput = {
    fechaCreacion?: DateTimeFieldUpdateOperationsInput | Date | string
    texto?: StringFieldUpdateOperationsInput | string
    puntuacion?: FloatFieldUpdateOperationsInput | number
    usuario?: UsuarioUpdateOneRequiredWithoutResenasNestedInput
  }

  export type ResenaUncheckedUpdateWithoutJuegoInput = {
    id?: IntFieldUpdateOperationsInput | number
    usuarioId?: IntFieldUpdateOperationsInput | number
    fechaCreacion?: DateTimeFieldUpdateOperationsInput | Date | string
    texto?: StringFieldUpdateOperationsInput | string
    puntuacion?: FloatFieldUpdateOperationsInput | number
  }

  export type ResenaUncheckedUpdateManyWithoutJuegoInput = {
    id?: IntFieldUpdateOperationsInput | number
    usuarioId?: IntFieldUpdateOperationsInput | number
    fechaCreacion?: DateTimeFieldUpdateOperationsInput | Date | string
    texto?: StringFieldUpdateOperationsInput | string
    puntuacion?: FloatFieldUpdateOperationsInput | number
  }

  export type CarritoUpdateWithoutJuegoInput = {
    usuario?: UsuarioUpdateOneRequiredWithoutCarritoNestedInput
  }

  export type CarritoUncheckedUpdateWithoutJuegoInput = {
    id?: IntFieldUpdateOperationsInput | number
    usuarioId?: IntFieldUpdateOperationsInput | number
  }

  export type CarritoUncheckedUpdateManyWithoutJuegoInput = {
    id?: IntFieldUpdateOperationsInput | number
    usuarioId?: IntFieldUpdateOperationsInput | number
  }

  export type CatNoticiaXNoticiaCreateManyNoticiaInput = {
    id?: number
    catNoticiaId: number
  }

  export type CatNoticiaXNoticiaUpdateWithoutNoticiaInput = {
    catNoticia?: CatNoticiaUpdateOneRequiredWithoutNoticiasNestedInput
  }

  export type CatNoticiaXNoticiaUncheckedUpdateWithoutNoticiaInput = {
    id?: IntFieldUpdateOperationsInput | number
    catNoticiaId?: IntFieldUpdateOperationsInput | number
  }

  export type CatNoticiaXNoticiaUncheckedUpdateManyWithoutNoticiaInput = {
    id?: IntFieldUpdateOperationsInput | number
    catNoticiaId?: IntFieldUpdateOperationsInput | number
  }

  export type CategoriaXJuegoCreateManyCategoriaInput = {
    id?: number
    juegoId: number
  }

  export type CategoriaXJuegoUpdateWithoutCategoriaInput = {
    juego?: JuegoUpdateOneRequiredWithoutCategoriasNestedInput
  }

  export type CategoriaXJuegoUncheckedUpdateWithoutCategoriaInput = {
    id?: IntFieldUpdateOperationsInput | number
    juegoId?: IntFieldUpdateOperationsInput | number
  }

  export type CategoriaXJuegoUncheckedUpdateManyWithoutCategoriaInput = {
    id?: IntFieldUpdateOperationsInput | number
    juegoId?: IntFieldUpdateOperationsInput | number
  }

  export type PlataformaXJuegoCreateManyPlataformaInput = {
    id?: number
    juegoId: number
  }

  export type PlataformaXJuegoUpdateWithoutPlataformaInput = {
    juego?: JuegoUpdateOneRequiredWithoutPlataformasNestedInput
  }

  export type PlataformaXJuegoUncheckedUpdateWithoutPlataformaInput = {
    id?: IntFieldUpdateOperationsInput | number
    juegoId?: IntFieldUpdateOperationsInput | number
  }

  export type PlataformaXJuegoUncheckedUpdateManyWithoutPlataformaInput = {
    id?: IntFieldUpdateOperationsInput | number
    juegoId?: IntFieldUpdateOperationsInput | number
  }

  export type JuegoXVentaCreateManyVentaInput = {
    id?: number
    juegoId: number
  }

  export type ClaveCreateManyVentaInput = {
    id?: number
    texto: string
    usada?: boolean
    juegoId: number
  }

  export type JuegoXVentaUpdateWithoutVentaInput = {
    juego?: JuegoUpdateOneRequiredWithoutVentasNestedInput
  }

  export type JuegoXVentaUncheckedUpdateWithoutVentaInput = {
    id?: IntFieldUpdateOperationsInput | number
    juegoId?: IntFieldUpdateOperationsInput | number
  }

  export type JuegoXVentaUncheckedUpdateManyWithoutVentaInput = {
    id?: IntFieldUpdateOperationsInput | number
    juegoId?: IntFieldUpdateOperationsInput | number
  }

  export type ClaveUpdateWithoutVentaInput = {
    texto?: StringFieldUpdateOperationsInput | string
    usada?: BoolFieldUpdateOperationsInput | boolean
    juego?: JuegoUpdateOneRequiredWithoutClavesNestedInput
  }

  export type ClaveUncheckedUpdateWithoutVentaInput = {
    id?: IntFieldUpdateOperationsInput | number
    texto?: StringFieldUpdateOperationsInput | string
    usada?: BoolFieldUpdateOperationsInput | boolean
    juegoId?: IntFieldUpdateOperationsInput | number
  }

  export type ClaveUncheckedUpdateManyWithoutVentaInput = {
    id?: IntFieldUpdateOperationsInput | number
    texto?: StringFieldUpdateOperationsInput | string
    usada?: BoolFieldUpdateOperationsInput | boolean
    juegoId?: IntFieldUpdateOperationsInput | number
  }

  export type CatNoticiaXNoticiaCreateManyCatNoticiaInput = {
    id?: number
    noticiaId: number
  }

  export type CatNoticiaXNoticiaUpdateWithoutCatNoticiaInput = {
    noticia?: NoticiaUpdateOneRequiredWithoutCategoriasNestedInput
  }

  export type CatNoticiaXNoticiaUncheckedUpdateWithoutCatNoticiaInput = {
    id?: IntFieldUpdateOperationsInput | number
    noticiaId?: IntFieldUpdateOperationsInput | number
  }

  export type CatNoticiaXNoticiaUncheckedUpdateManyWithoutCatNoticiaInput = {
    id?: IntFieldUpdateOperationsInput | number
    noticiaId?: IntFieldUpdateOperationsInput | number
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}